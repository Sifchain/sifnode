---
  swagger: '2.0'
  info:
    version: '3.0'
    title: Sifchain Light Client JsonRPC
    description: A REST interface for state queries, transaction generation and broadcasting.
  tags:
    - name: Transactions
      description: Search, encode, or broadcast transactions.
    - name: Tendermint RPC
      description: Tendermint APIs, such as query blocks, transactions and validatorset
    - name: Auth
      description: Authenticate accounts
    - name: Bank
      description: Create and broadcast transactions
    - name: Staking
      description: Stake module APIs
    - name: Slashing
      description: Slashing module APIs
    - name: Distribution
      description: Fee distribution module APIs
    - name: Supply
      description: Supply module APIs
    - name: Mint
      description: Minting module APIs
    - name: Misc
      description: Query app version
  schemes:
    - https
  host: api.sifchain.finance
  securityDefinitions:
    kms:
      type: basic
  paths:
    /node_info:
      get:
        description: Information about the connected node
        summary: The properties of the connected node
        tags:
          - Tendermint RPC
        produces:
          - application/json
        responses:
          200:
            description: Node status
            schema:
              type: object
              properties:
                application_version:
                  properties:
                    build_tags:
                      type: string
                    client_name:
                      type: string
                    commit:
                      type: string
                    go:
                      type: string
                    name:
                      type: string
                    server_name:
                      type: string
                    version:
                      type: string
                node_info:
                  properties:
                    id:
                      type: string
                    moniker:
                      type: string
                      example: validator-name
                    protocol_version:
                      properties:
                        p2p:
                          type: string
                          example: 7
                        block:
                          type: string
                          example: 10
                        app:
                          type: string
                          example: 0
                    network:
                      type: string
                    channels:
                      type: string
                    listen_addr:
                      type: string
                      example: 192.168.56.1:26656
                    version:
                      description: Tendermint version
                      type: string
                      example: 0.15.0
                    other:
                      description: more information on versions
                      type: object
                      properties:
                        tx_index:
                          type: string
                          example: on
                        rpc_address:
                          type: string
                          example: tcp://0.0.0.0:26657
          500:
            description: Failed to query node status
    /syncing:
      get:
        summary: Syncing state of node
        tags:
          - Tendermint RPC
        description: Get the syncing status of the node
        produces:
          - application/json
        responses:
          200:
            description: Node syncing status
            schema:
              type: object
              properties:
                syncing:
                  type: boolean
          500:
            description: Server internal error
    /blocks/latest:
      get:
        summary: Get the latest block
        tags:
          - Tendermint RPC
        produces:
          - application/json
        responses:
          200:
            description: The latest block
            schema:
              $ref: '#/definitions/BlockQuery'
          500:
            description: Server internal error
    /blocks/{height}:
      get:
        summary: Get a block at a certain height
        tags:
          - Tendermint RPC
        produces:
          - application/json
        parameters:
          - in: path
            name: height
            description: Block height
            required: true
            type: number
            x-example: 1
        responses:
          200:
            description: The block at a specific height
            schema:
              $ref: '#/definitions/BlockQuery'
          404:
            description: Request block height doesn't
          400:
            description: Invalid height
          500:
            description: Server internal error
    /validatorsets/latest:
      get:
        summary: Get the latest validator set
        tags:
          - Tendermint RPC
        produces:
          - application/json
        responses:
          200:
            description: The validator set at the latest block height
            schema:
              type: object
              properties:
                block_height:
                  type: string
                validators:
                  type: array
                  items:
                    $ref: '#/definitions/TendermintValidator'
          500:
            description: Server internal error
    /validatorsets/{height}:
      get:
        summary: Get a validator set a certain height
        tags:
          - Tendermint RPC
        produces:
          - application/json
        parameters:
          - in: path
            name: height
            description: Block height
            required: true
            type: number
            x-example: 1
        responses:
          200:
            description: The validator set at a specific block height
            schema:
              type: object
              properties:
                block_height:
                  type: string
                validators:
                  type: array
                  items:
                    $ref: '#/definitions/TendermintValidator'
          404:
            description: Block at height not available
          400:
            description: Invalid height
          500:
            description: Server internal error
    /txs/{hash}:
      get:
        summary: Get a Tx by hash
        tags:
          - Transactions
        description: Retrieve a transaction using its hash.
        produces:
          - application/json
        parameters:
          - in: path
            name: hash
            description: Tx hash
            required: true
            type: string
            x-example: FFC8D0E5D52D330AD315E950E5C18A9D65FC640156B9A95B5AEF07DDAE32E61D
        responses:
          200:
            description: Tx with the provided hash
            schema:
              $ref: "#/definitions/TxQuery"
          500:
            description: Internal Server Error
    /txs:
      get:
        tags:
          - Transactions
        summary: Search transactions
        description: Search transactions by events.
        produces:
          - application/json
        parameters:
          - in: query
            name: message.action
            type: string
            description: "transaction events such as 'message.action=send' which results in the following endpoint: 'GET /txs?message.action=send'. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory"
            x-example: "send"
          - in: query
            name: message.sender
            type: string
            description: "transaction tags with sender: 'GET /txs?message.action=send&message.sender=sif1q53rwutgpzx7szcrgzqguxyccjpzt9j4cyctn9'"
            x-example: "sif1q53rwutgpzx7szcrgzqguxyccjpzt9j4cyctn9"
          - in: query
            name: page
            description: Page number
            type: integer
            x-example: 1
          - in: query
            name: limit
            description: Maximum number of items per page
            type: integer
            x-example: 1
          - in: query
            name: txheight # this should actually be tx.height but dredd doesn't handle periods in get parameter names so no period allows the test to pass
            description: Transaction height
            type: integer
            x-example: 1
        responses:
          200:
            description: All txs matching the provided events
            schema:
              $ref: "#/definitions/PaginatedQueryTxs"
          400:
            description: Invalid search events
          500:
            description: Internal Server Error
      post:
        tags:
          - Transactions
        summary: Broadcast a signed tx
        description: Broadcast a signed tx to a full node
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - in: body
            name: txBroadcast
            description: The tx must be a signed StdTx. The supported broadcast modes include `"block"`(return after tx commit), `"sync"`(return afer CheckTx) and `"async"`(return right away).
            required: true
            schema:
              type: object
              properties:
                tx:
                  $ref: "#/definitions/PostStdTx"
                mode:
                  type: string
                  example: block
        responses:
          200:
            description: Tx broadcasting result
            schema:
              $ref: "#/definitions/BroadcastTxCommitResult"
          500:
            description: Internal Server Error
    /txs/encode:
      post:
        tags:
          - Transactions
        summary: Encode a transaction to the Amino wire format
        description: Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - description: ""
            name: EncodeBody
            in: body
            required: true
            schema:
              type: object
              $ref: "#/definitions/EncodeTx"
        responses:
          200:
            description: The tx was successfully decoded and re-encoded
            schema:
              type: object
              properties:
                tx:
                  type: string
                  example: The base64-encoded Amino-serialized bytes for the tx
          400:
            description: The tx was malformatted
          500:
            description: Server internal error
    /txs/decode:
      post:
        tags:
          - Transactions
        summary: Decode a transaction from the Amino wire format
        description: Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - in: body
            name: tx
            description: The tx to decode
            required: true
            schema:
              type: object
              properties:
                tx:
                  type: string
                  example: ogEoKBapCjyoo2GaChRKWendsRagTF1ACC1nxzjVxW3xJBIU/A6hCReBn5NYI6K2dl10kCEeTfgaCgoFc3Rha2USATESEAoKCgVzdGFrZRIBMRDAmgwaQhJAdlC1HbNw+ux6lRrK3mNdmaH62NE3ThD8SswlDcnhFex7pKSNhaxE4m6TgDhosoK6EyU0LnOZKutXKECNSvO+WCIIdGVzdG1lbW8=
        responses:
          200:
            description: The tx was successfully decoded
            schema:
              $ref: "#/definitions/StdTx"
          400:
            description: The tx was malformated
          500:
            description: Server internal error
    /bank/balances/{address}:
      get:
        summary: Get the account balances
        tags:
          - Bank
        produces:
          - application/json
        parameters:
          - in: path
            name: address
            description: Account address in bech32 format
            required: true
            type: string
            x-example: sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c
        responses:
          200:
            description: Account balances
            schema:
              type: object
              properties:
                height:
                  type: string
                  example: "100"
                result:
                  items:
                    $ref: "#/definitions/Coin"
          500:
            description: Server internal error

    /bank/accounts/{address}/transfers:
      post:
        summary: Send coins from one account to another
        tags:
          - Bank
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - in: path
            name: address
            description: Account address in bech32 format
            required: true
            type: string
            x-example: sif1q53rwutgpzx7szcrgzqguxyccjpzt9j4cyctn9
          - in: body
            name: account
            description: The sender and tx information
            required: true
            schema:
              type: object
              properties:
                base_req:
                  $ref: "#/definitions/BaseReq"
                amount:
                  type: array
                  items:
                    $ref: "#/definitions/Coin"
        responses:
          200:
            description: Tx was successfully generated
            schema:
              $ref: "#/definitions/StdTx"
          400:
            description: Invalid request
          500:
            description: Server internal error
    /auth/accounts/{address}:
      get:
        summary: Get the account information on blockchain
        tags:
          - Auth
        produces:
          - application/json
        parameters:
          - in: path
            name: address
            description: Account address
            required: true
            type: string
            x-example: sif1q53rwutgpzx7szcrgzqguxyccjpzt9j4cyctn9
        responses:
          200:
            description: Account information on the blockchain
            schema:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: object
                  properties:
                    account_number:
                      type: string
                    address:
                      type: string
                    coins:
                      type: array
                      items:
                        $ref: "#/definitions/Coin"
                    public_key:
                      $ref: "#/definitions/PublicKey"
                    sequence:
                      type: string
          500:
            description: Server internal error
    /staking/delegators/{delegatorAddr}/delegations:
      parameters:
        - in: path
          name: delegatorAddr
          description: Bech32 AccAddress of Delegator
          required: true
          type: string
          x-example: sif1q53rwutgpzx7szcrgzqguxyccjpzt9j4cyctn9
      get:
        summary: Get all delegations from a delegator
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                height:
                  type: string
                  example: "100"
                result:
                  items:
                    $ref: "#/definitions/Delegation"
          400:
            description: Invalid delegator address
          500:
            description: Internal Server Error

      # THE BELOW ENDPOINT IS NOT IMPLEMENTED IN COSMOS, SEE:
      # https://github.com/cosmos/cosmos-sdk/blob/18de630d0ae1887113e266982b51c2bf1f662edb/x/staking/client/rest/query.go

      # post:
      #   summary: Submit delegation
      #   parameters:
      #     - in: body
      #       name: delegation
      #       description: The password of the account to remove from the KMS
      #       schema:
      #         type: object
      #         properties:
      #           base_req:
      #             $ref: "#/definitions/BaseReq"
      #           delegator_address:
      #             $ref: "#/definitions/Address"
      #           validator_address:
      #             $ref: "#/definitions/ValidatorAddress"
      #           delegation:
      #             $ref: "#/definitions/Coin"
      #   tags:
      #     - Staking
      #   consumes:
      #     - application/json
      #   produces:
      #     - application/json
      #   responses:
      #     200:
      #       description: OK
      #       schema:
      #         $ref: "#/definitions/BroadcastTxCommitResult"
      #     400:
      #       description: Invalid delegator address or delegation request body
      #     401:
      #       description: Key password is wrong
      #     500:
      #       description: Internal Server Error
    /staking/delegators/{delegatorAddr}/delegations/{validatorAddr}:
      parameters:
        - in: path
          name: delegatorAddr
          description: Bech32 AccAddress of Delegator
          required: true
          type: string
          x-example: sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c
        - in: path
          name: validatorAddr
          description: Bech32 OperatorAddress of validator
          required: true
          type: string
          x-example: sifvaloper1ffv7nhd3z6sych2qpqkk03ec6hzkmufyz4scd0
      get:
        summary: Query the current delegation between a delegator and a validator
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              $ref: "#/definitions/Delegation"
          400:
            description: Invalid delegator address or validator address
          500:
            description: Internal Server Error
    /staking/delegators/{delegatorAddr}/unbonding_delegations:
      parameters:
        - in: path
          name: delegatorAddr
          description: Bech32 AccAddress of Delegator
          required: true
          type: string
          x-example: sif1q53rwutgpzx7szcrgzqguxyccjpzt9j4cyctn9
      get:
        summary: Get all unbonding delegations from a delegator
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                height:
                  type: string
                  example: "100"
                result:
                  items:
                    $ref: "#/definitions/UnbondingDelegation"

          400:
            description: Invalid delegator address
          500:
            description: Internal Server Error

      # THE BELOW ENDPOINT IS NOT IMPLEMENTED IN COSMOS, SEE:
      # https://github.com/cosmos/cosmos-sdk/blob/18de630d0ae1887113e266982b51c2bf1f662edb/x/staking/client/rest/query.go

      # post:
      #   summary: Submit an unbonding delegation
      #   parameters:
      #     - in: body
      #       name: delegation
      #       description: The password of the account to remove from the KMS
      #       schema:
      #         type: object
      #         properties:
      #           base_req:
      #             $ref: "#/definitions/BaseReq"
      #           delegator_address:
      #             $ref: "#/definitions/Address"
      #           validator_address:
      #             $ref: "#/definitions/ValidatorAddress"
      #           shares:
      #             type: string
      #             example: "100"
      #   tags:
      #     - Staking
      #   consumes:
      #     - application/json
      #   produces:
      #     - application/json
      #   responses:
      #     200:
      #       description: OK
      #       schema:
      #         $ref: "#/definitions/BroadcastTxCommitResult"
      #     400:
      #       description: Invalid delegator address or unbonding delegation request body
      #     401:
      #       description: Key password is wrong
      #     500:
      #       description: Internal Server Error
    /staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}:
      parameters:
        - in: path
          name: delegatorAddr
          description: Bech32 AccAddress of Delegator
          required: true
          type: string
          x-example: sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c
        - in: path
          name: validatorAddr
          description: Bech32 OperatorAddress of validator
          required: true
          type: string
          x-example: sifvaloper1ffv7nhd3z6sych2qpqkk03ec6hzkmufyz4scd0
      get:
        summary: Query all unbonding delegations between a delegator and a validator
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              $ref: "#/definitions/UnbondingDelegationPair"
          400:
            description: Invalid delegator address or validator address
          500:
            description: Internal Server Error
    /staking/redelegations:
      parameters:
        - in: query
          name: delegator
          description: Bech32 AccAddress of Delegator
          required: false
          type: string
        - in: query
          name: validator_from
          description: Bech32 ValAddress of SrcValidator
          required: false
          type: string
        - in: query
          name: validator_to
          description: Bech32 ValAddress of DstValidator
          required: false
          type: string
      get:
        summary: Get all redelegations (filter by query params)
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                height:
                  type: string
                  example: "100"
                result:
                  items:
                    $ref: "#/definitions/Redelegation"
          500:
            description: Internal Server Error

    # THE BELOW ENDPOINT IS NOT IMPLEMENTED IN COSMOS, SEE:
    # https://github.com/cosmos/cosmos-sdk/blob/18de630d0ae1887113e266982b51c2bf1f662edb/x/staking/client/rest/query.go

    # /staking/delegators/{delegatorAddr}/redelegations:
    #   parameters:
    #     - in: path
    #       name: delegatorAddr
    #       description: Bech32 AccAddress of Delegator
    #       required: true
    #       type: string
    #       x-example: sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c
    #   post:
    #     summary: Submit a redelegation
    #     parameters:
    #       - in: body
    #         name: delegation
    #         description: The sender and tx information
    #         schema:
    #           type: object
    #           properties:
    #             base_req:
    #               $ref: "#/definitions/BaseReq"
    #             delegator_address:
    #               $ref: "#/definitions/Address"
    #             validator_src_addresses:
    #               $ref: "#/definitions/ValidatorAddress"
    #             validator_dst_address:
    #               $ref: "#/definitions/ValidatorAddress"
    #             shares:
    #               type: string
    #               example: "100"
    #     tags:
    #       - Staking
    #     consumes:
    #       - application/json
    #     produces:
    #       - application/json
    #     responses:
    #       200:
    #         description: Tx was successfully generated
    #         schema:
    #           $ref: "#/definitions/StdTx"
    #       400:
    #         description: Invalid delegator address or redelegation request body
    #       500:
    #         description: Internal Server Error
    /staking/delegators/{delegatorAddr}/validators:
      parameters:
        - in: path
          name: delegatorAddr
          description: Bech32 AccAddress of Delegator
          required: true
          type: string
          x-example: sif1q53rwutgpzx7szcrgzqguxyccjpzt9j4cyctn9
      get:
        summary: Query all validators that a delegator is bonded to
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                height:
                  type: string
                  example: "100"
                result:
                  items:
                    $ref: "#/definitions/Validator"
          400:
            description: Invalid delegator address
          500:
            description: Internal Server Error
    /staking/delegators/{delegatorAddr}/validators/{validatorAddr}:
      parameters:
        - in: path
          name: delegatorAddr
          description: Bech32 AccAddress of Delegator
          required: true
          type: string
          x-example: sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c
        - in: path
          name: validatorAddr
          description: Bech32 ValAddress of Delegator
          required: true
          type: string
          x-example: sifvaloper1ffv7nhd3z6sych2qpqkk03ec6hzkmufyz4scd0
      get:
        summary: Query a validator that a delegator is bonded to
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              $ref: "#/definitions/Validator"
          400:
            description: Invalid delegator address or validator address
          500:
            description: Internal Server Error
    /staking/validators:
      get:
        summary: Get all validator candidates. By default it returns only the bonded validators.
        parameters:
          - in: query
            name: status
            type: string
            description: The validator bond status. Must be either 'bonded', 'unbonded', or 'unbonding'.
            x-example: bonded
          - in: query
            name: page
            description: The page number.
            type: integer
            x-example: 1
          - in: query
            name: limit
            description: The maximum number of items per page.
            type: integer
            x-example: 1
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                height:
                  type: string
                  example: "100"
                result:
                  items:
                    $ref: "#/definitions/Validator"
          500:
            description: Internal Server Error
    /staking/validators/{validatorAddr}:
      parameters:
        - in: path
          name: validatorAddr
          description: Bech32 OperatorAddress of validator
          required: true
          type: string
          x-example: sifvaloper1ffv7nhd3z6sych2qpqkk03ec6hzkmufyz4scd0
      get:
        summary: Query the information from a single validator
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              $ref: '#/definitions/Validator'
          400:
            description: Invalid validator address
          500:
            description: Internal Server Error
    /staking/validators/{validatorAddr}/delegations:
      parameters:
        - in: path
          name: validatorAddr
          description: Bech32 OperatorAddress of validator
          required: true
          type: string
          x-example: sifvaloper1q53rwutgpzx7szcrgzqguxyccjpzt9j44jzrtj
      get:
        summary: Get all delegations from a validator
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                height:
                  type: string
                  example: "100"
                result:
                  items:
                    $ref: "#/definitions/Delegation"
          400:
            description: Invalid validator address
          500:
            description: Internal Server Error
    /staking/validators/{validatorAddr}/unbonding_delegations:
      parameters:
        - in: path
          name: validatorAddr
          description: Bech32 OperatorAddress of validator
          required: true
          type: string
          x-example: sifvaloper1q53rwutgpzx7szcrgzqguxyccjpzt9j44jzrtj
      get:
        summary: Get all unbonding delegations from a validator
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                height:
                  type: string
                  example: "100"
                result:
                  items:
                    $ref: "#/definitions/UnbondingDelegation"
          400:
            description: Invalid validator address
          500:
            description: Internal Server Error
    /staking/pool:
      get:
        summary: Get the current state of the staking pool
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                loose_tokens:
                  type: string
                bonded_tokens:
                  type: string
                inflation_last_time:
                  type: string
                inflation:
                  type: string
                date_last_commission_reset:
                  type: string
                prev_bonded_shares:
                  type: string
          500:
            description: Internal Server Error
    /staking/parameters:
      get:
        summary: Get the current staking parameter values
        tags:
          - Staking
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                inflation_rate_change:
                  type: string
                inflation_max:
                  type: string
                inflation_min:
                  type: string
                goal_bonded:
                  type: string
                unbonding_time:
                  type: string
                max_validators:
                  type: integer
                bond_denom:
                  type: string
          500:
            description: Internal Server Error
    # TODO: We need to either fix this route when the validator is not found or add a slashed validator in the contract tests
    #  /slashing/validators/{validatorPubKey}/signing_info:
    #    get:
    #      summary: Get sign info of given validator
    #      description: Get sign info of given validator
    #      produces:
    #        - application/json
    #      tags:
    #        - Slashing
    #      parameters:
    #        - type: string
    #          description: Bech32 validator public key
    #          name: validatorPubKey
    #          required: true
    #          in: path
    #          x-example: sifvalconspub1zcjduepq0vu2zgkgk49efa0nqwzndanq5m4c7pa3u4apz4g2r9gspqg6g9cs3k9cuf
    #      responses:
    #        200:
    #          description: OK
    #          schema:
    #            $ref: "#/definitions/SigningInfo"
    #        400:
    #          description: Invalid validator public key
    #        500:
    #          description: Internal Server Error
    /slashing/signing_infos:
      get:
        summary: Get sign info of given all validators
        description: Get sign info of all validators
        produces:
          - application/json
        tags:
          - Slashing
        parameters:
          - in: query
            name: page
            description: Page number
            type: integer
            required: true
            x-example: 1
          - in: query
            name: limit
            description: Maximum number of items per page
            type: integer
            required: true
            x-example: 5
        responses:
          200:
            description: OK
            schema:
              items:
                type: object
                properties:
                  height:
                    type: string
                  result:
                    items:
                      $ref: "#/definitions/SigningInfo"
          400:
            description: Invalid validator public key for one of the validators
          500:
            description: Internal Server Error
    /slashing/validators/{validatorAddr}/unjail:
      post:
        summary: Unjail a jailed validator
        description: Send transaction to unjail a jailed validator
        consumes:
          - application/json
        produces:
          - application/json
        tags:
          - Slashing
        parameters:
          - type: string
            description: Bech32 validator address
            name: validatorAddr
            required: true
            in: path
            x-example: sifvaloper1ffv7nhd3z6sych2qpqkk03ec6hzkmufyz4scd0
          - description: ""
            name: UnjailBody
            in: body
            required: true
            schema:
              type: object
              properties:
                base_req:
                  $ref: "#/definitions/BaseReq"
        responses:
          200:
            description: Tx was successfully generated
            schema:
              $ref: "#/definitions/BroadcastTxCommitResult"
          400:
            description: Invalid validator address or base_req
          500:
            description: Internal Server Error
    /slashing/parameters:
      get:
        summary: Get the current slashing parameters
        tags:
          - Slashing
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                max_evidence_age:
                  type: string
                signed_blocks_window:
                  type: string
                min_signed_per_window:
                  type: string
                double_sign_unbond_duration:
                  type: string
                downtime_unbond_duration:
                  type: string
                slash_fraction_double_sign:
                  type: string
                slash_fraction_downtime:
                  type: string
          500:
            description: Internal Server Error
    /sifdist/parameters:
      get:
        summary: Get the current sifdist parameter values
        tags:
          - sifdist
        produces:
          - application/json
        responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                active:
                  type: string
                periods:
                  type: array
                  items:
                    $ref: "#/definitions/sifdistPeriod"
          500:
            description: Internal Server Error

  definitions:
    CheckTxResult:
      type: object
      properties:
        code:
          type: integer
        data:
          type: string
        gas_used:
          type: integer
        gas_wanted:
          type: integer
        info:
          type: string
        log:
          type: string
        tags:
          type: array
          items:
            $ref: '#/definitions/KVPair'
      example:
        code: 0
        data: data
        log: log
        gas_used: 5000
        gas_wanted: 10000
        info: info
        tags:
          - ''
          - ''
    DeliverTxResult:
      type: object
      properties:
        code:
          type: integer
        data:
          type: string
        gas_used:
          type: integer
        gas_wanted:
          type: integer
        info:
          type: string
        log:
          type: string
        tags:
          type: array
          items:
            $ref: '#/definitions/KVPair'
      example:
        code: 5
        data: data
        log: log
        gas_used: 5000
        gas_wanted: 10000
        info: info
        tags:
          - ''
          - ''
    BroadcastTxCommitResult:
      type: object
      properties:
        check_tx:
          $ref: '#/definitions/CheckTxResult'
        deliver_tx:
          $ref: '#/definitions/DeliverTxResult'
        hash:
          $ref: '#/definitions/Hash'
        height:
          type: string
    KVPair:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Msg:
      type: object
      properties:
        type:
          type: string
          example: "cosmos-sdk/MsgSend"
        value:
          type: object
          properties:
            from_address:
              type: string
              example: sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c
            to_address:
              type: string
              example: sif1ls82zzghsx0exkpr52m8vht5jqs3un0ceysshz
            amount:
              type: array
              items:
                $ref: "#/definitions/Coin"
    Address:
      type: string
      description: bech32 encoded address
      example: sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c
    ValidatorAddress:
      type: string
      description: bech32 encoded address
      example: sifvaloper1ffv7nhd3z6sych2qpqkk03ec6hzkmufyz4scd0
    Coin:
      type: object
      properties:
        denom:
          type: string
          example: usif
        amount:
          type: string
          example: '50000'
    Hash:
      type: string
      example: EE5F3404034C524501629B56E0DDC38FAD651F04
    Signature:
      type: object
      properties:
        signature:
          type: string
          example: 'W1HfKcc4F0rCSoxheZ7fsrB5nGK58U4gKysuzsmUwhloVnCxmbCx289uVMMvQN6tOcQsz7hMVTJrXSA1xzevvw=='
        pubkey:
          type: object
          properties:
            type:
              type: string
              example: 'tendermint/PubKeySecp256k1'
            value:
              type: string
              example: 'Agey31h/NYpcy0sYm4liHMrXJMzbQUrgV4uHd/w09CXN'
    TxQuery:
      type: object
      properties:
        hash:
          type: string
          example: 'D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656'
        height:
          type: string
          example: "368"
        tx:
          $ref: '#/definitions/StdTx'
        result:
          type: object
          properties:
            log:
              type: string
            gas_wanted:
              type: string
              example: '200000'
            gas_used:
              type: string
              example: '26354'
            tags:
              type: array
              items:
                $ref: '#/definitions/KVPair'
    PaginatedQueryTxs:
      type: object
      properties:
        total_count:
          type: string
          example: "1"
        count:
          type: string
          example: "1"
        page_number:
          type: string
          example: "1"
        page_total:
          type: string
          example: "1"
        limit:
          type: string
          example: "30"
        txs:
          type: array
          items:
            $ref: '#/definitions/TxQuery'
    StdTx:
      type: object
      properties:
        msg:
          type: array
          items:
            $ref: "#/definitions/Msg"
        fee:
          type: object
          properties:
            gas:
              type: string
              example: "200000"
            amount:
              type: array
              items:
                $ref: "#/definitions/Coin"
        memo:
          type: string
        signatures:
          type: array
          items:
            $ref: '#/definitions/Signature'
    BlockID:
      type: object
      properties:
        hash:
          $ref: '#/definitions/Hash'
        parts:
          type: object
          properties:
            total:
              type: string
              example: "0"
            hash:
              $ref: '#/definitions/Hash'
    BlockHeader:
      type: object
      properties:
        chain_id:
          type: string
          example: testing
        height:
          type: string
          example: "1"
        time:
          type: string
          example: '2017-12-30T05:53:09.287+01:00'
        num_txs:
          type: string
          example: "0"
        last_block_id:
          $ref: '#/definitions/BlockID'
        total_txs:
          type: string
          example: "35"
        last_commit_hash:
          $ref: '#/definitions/Hash'
        data_hash:
          $ref: '#/definitions/Hash'
        validators_hash:
          $ref: '#/definitions/Hash'
        next_validators_hash:
          $ref: '#/definitions/Hash'
        consensus_hash:
          $ref: '#/definitions/Hash'
        app_hash:
          $ref: '#/definitions/Hash'
        last_results_hash:
          $ref: '#/definitions/Hash'
        evidence_hash:
          $ref: '#/definitions/Hash'
        proposer_address:
          $ref: '#/definitions/Address'
        version:
          type: object
          properties:
            block:
              type: string
              example: 10
            app:
              type: string
              example: 0
    Block:
      type: object
      properties:
        header:
          $ref: '#/definitions/BlockHeader'
        txs:
          type: array
          items:
            type: string
        evidence:
          type: object
          # type: array
          # items:
          #   type: string
        last_commit:
          type: object
          properties:
            block_id:
              $ref: '#/definitions/BlockID'
            precommits:
              type: array
              x-nullable: true
              items:
                type: object
                properties:
                  validator_address:
                    type: string
                  validator_index:
                    type: string
                    example: '0'
                  height:
                    type: string
                    example: '0'
                  round:
                    type: string
                    example: '0'
                  timestamp:
                    type: string
                    example: '2017-12-30T05:53:09.287+01:00'
                  type:
                    type: number
                    example: 2
                  block_id:
                    $ref: '#/definitions/BlockID'
                  signature:
                    type: string
                    example: '7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ=='
    BlockQuery:
      type: object
      properties:
        block_meta:
          type: object
          properties:
            header:
              $ref: '#/definitions/BlockHeader'
            block_id:
              $ref: '#/definitions/BlockID'
        block:
          $ref: '#/definitions/Block'
    BaseReq:
      type: object
      properties:
        from:
          type: string
          example: 'sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c'
          description: Sender address or Keybase name to generate a transaction
        memo:
          type: string
          example: 'a memo'
        chain_id:
          type: string
          example: 'testing'
        account_number:
          type: string
          example: '1'
        sequence:
          type: string
          example: '0'
        gas:
          type: string
          example: '200000'
        gas_adjustment:
          type: string
          example: '1.0'
        fees:
          type: array
          items:
            $ref: '#/definitions/Coin'
        simulate:
          type: boolean
          example: false
          description: Estimate gas for a transaction (cannot be used in conjunction with generate_only)
    TendermintValidator:
      type: object
      properties:
        address:
          $ref: '#/definitions/ValidatorAddress'
        pub_key:
          type: string
          example: sifvalconspub1zcjduepq0vu2zgkgk49efa0nqwzndanq5m4c7pa3u4apz4g2r9gspqg6g9cs3k9cuf
        voting_power:
          type: string
          example: '1000'
        proposer_priority:
          type: string
          example: '1000'
    Validator:
      type: object
      properties:
        operator_address:
          $ref: '#/definitions/ValidatorAddress'
        consensus_pubkey:
          type: string
          example: sifvalconspub1zcjduepq0vu2zgkgk49efa0nqwzndanq5m4c7pa3u4apz4g2r9gspqg6g9cs3k9cuf
        jailed:
          type: boolean
        status:
          type: integer
        tokens:
          type: string
        delegator_shares:
          type: string
        description:
          type: object
          properties:
            moniker:
              type: string
            identity:
              type: string
            website:
              type: string
            security_contact:
              type: string
            details:
              type: string
        bond_height:
          type: string
          example: '0'
        bond_intra_tx_counter:
          type: integer
          example: 0
        unbonding_height:
          type: string
          example: '0'
        unbonding_time:
          type: string
          example: '1970-01-01T00:00:00Z'
        commission:
          type: object
          properties:
            rate:
              type: string
              example: '0'
            max_rate:
              type: string
              example: '0'
            max_change_rate:
              type: string
              example: '0'
            update_time:
              type: string
              example: '1970-01-01T00:00:00Z'
    Delegation:
      type: object
      properties:
        delegator_address:
          type: string
        validator_address:
          type: string
        shares:
          type: string
        balance:
          $ref: '#/definitions/Coin'
    UnbondingDelegationPair:
      type: object
      properties:
        delegator_address:
          type: string
        validator_address:
          type: string
        entries:
          type: array
          items:
            $ref: '#/definitions/UnbondingEntries'
    UnbondingEntries:
      type: object
      properties:
        initial_balance:
          type: string
        balance:
          type: string
        creation_height:
          type: string
        min_time:
          type: string
    UnbondingDelegation:
      type: object
      properties:
        delegator_address:
          type: string
        validator_address:
          type: string
        initial_balance:
          type: string
        balance:
          type: string
        creation_height:
          type: integer
        min_time:
          type: integer
    Redelegation:
      type: object
      properties:
        delegator_address:
          type: string
        validator_src_address:
          type: string
        validator_dst_address:
          type: string
        entries:
          type: array
          items:
            $ref: '#/definitions/Redelegation'
    PublicKey:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    SigningInfo:
      type: object
      properties:
        start_height:
          type: string
        index_offset:
          type: string
        jailed_until:
          type: string
        missed_blocks_counter:
          type: string
    sifdistPeriod:
      type: object
      properties:
        start:
          type: string
          example: "2020-06-01:14:00:00Z"
        end:
          type: string
          example: "2020-06-01:14:00:00Z"
        inflation:
          type: string
          example: "1.000000001167363430"
    PostStdTx:
      type: object
      properties:
        msg:
          type: array
          items:
            $ref: "#/definitions/PostMsg"
        fee:
          type: object
          properties:
            gas:
              type: string
              example: "200000"
            amount:
              type: array
              items:
                $ref: "#/definitions/PostCoin2"
        memo:
          type: string
          example: ""
        signatures:
          type: array
          items:
            $ref: "#/definitions/PostSignature"

    PostMsg:
      type: object
      properties:
        type:
          type: string
          example: "cosmos-sdk/MsgSend"
        value:
          type: object
          properties:
            from_address:
              type: string
              example: sif1ffv7nhd3z6sych2qpqkk03ec6hzkmufy0r2s4c
            to_address:
              type: string
              example: sif1ls82zzghsx0exkpr52m8vht5jqs3un0ceysshz
            amount:
              type: array
              items:
                $ref: "#/definitions/PostCoin1"
    PostCoin1:
      type: object
      properties:
        denom:
          type: string
          example: stake
        amount:
          type: string
          example: "2000000"
    PostCoin2:
      type: object
      properties:
        denom:
          type: string
          example: stake
        amount:
          type: string
          example: "2000"
    PostSignature:
      type: object
      properties:
        signature:
          type: string
          example: "KzBeQp/2+47oiqc16BImnOYidSAesZ3kgR3S8Fy+baFlvDlDv7goU/+rm4c7+woudNte3uZAG0CuUeHsF+Ld8Q=="
        pubkey:
          type: object
          properties:
            type:
              type: string
              example: "tendermint/PubKeySecp256k1"
            value:
              type: string
              example: "AmWAim83Qp+kIcj3RT7i327b3l0EHwzCrGVGXusb70B7"
    EncodeTx:
      type: object
      properties:
        type:
          type: string
          example: "cosmos-sdk/StdTx"
        value:
          type: object
          $ref: "#/definitions/StdTx"
