#!/bin/python3

# THis is an executable command-line frontend that makes sure we are running with a suitable Python virtual environment.
# If the virtual environment does not exist yet, it is created on first use.

import os
import sys
import glob
import fcntl
import subprocess

base_dir = os.path.abspath(os.path.join(os.path.normpath(os.path.dirname(__file__))))
project_root = os.path.abspath(os.path.join(os.path.normpath(os.path.join(base_dir, *([os.path.pardir] * 3)))))
venv_dir = os.path.join(base_dir, "venv")
requirements_txt = os.path.join(base_dir, "requirements.txt")
lock_file = os.path.join(base_dir, ".lock")

def execst(args, cwd=None):
    return subprocess.run(args, cwd=cwd, check=True, capture_output=False)

def init_venv():
    execst(["python3", "-m", "venv", venv_dir])
    venv_pip = os.path.join(venv_dir, "bin", "pip3")
    execst([venv_pip, "install", "--upgrade", "pip"])
    execst([venv_pip, "install", "wheel"])
    execst([venv_pip, "install", "-r", requirements_txt])

def ensure_venv():
    with open(lock_file, "w") as f:
        fcntl.lockf(f.fileno(), fcntl.LOCK_EX)  # Blocks
        try:
            if not os.path.exists(venv_dir):
                print("Initializing Python virtual environment on first use in '{}'...".format(venv_dir))
                init_venv()
        finally:
            fcntl.lockf(f.fileno(), fcntl.F_UNLCK)


ensure_venv()
venv_lib_dir = glob.glob(os.path.join(venv_dir, "lib", "python3.*"))[0]
sys.path = sys.path + [
    os.path.join(venv_lib_dir, "site-packages"),
    os.path.join(project_root, "test", "integration"),
]
import main
main.main(sys.argv[1:])
