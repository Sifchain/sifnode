// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/margin/v1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Position int32

const (
	Position_UNSPECIFIED Position = 0
	Position_LONG        Position = 1
	Position_SHORT       Position = 2
)

var Position_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "LONG",
	2: "SHORT",
}

var Position_value = map[string]int32{
	"UNSPECIFIED": 0,
	"LONG":        1,
	"SHORT":       2,
}

func (x Position) String() string {
	return proto.EnumName(Position_name, int32(x))
}

func (Position) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b3994728d56e8650, []int{0}
}

type MTP struct {
	Address                  string                                  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CollateralAsset          string                                  `protobuf:"bytes,2,opt,name=collateral_asset,json=collateralAsset,proto3" json:"collateral_asset,omitempty"`
	CollateralAmount         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=collateral_amount,json=collateralAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"collateral_amount"`
	Liabilities              github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=liabilities,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"liabilities"`
	InterestPaidCollateral   github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=interest_paid_collateral,json=interestPaidCollateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"interest_paid_collateral"`
	InterestPaidCustody      github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,6,opt,name=interest_paid_custody,json=interestPaidCustody,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"interest_paid_custody"`
	InterestUnpaidCollateral github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,7,opt,name=interest_unpaid_collateral,json=interestUnpaidCollateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"interest_unpaid_collateral"`
	CustodyAsset             string                                  `protobuf:"bytes,8,opt,name=custody_asset,json=custodyAsset,proto3" json:"custody_asset,omitempty"`
	CustodyAmount            github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,9,opt,name=custody_amount,json=custodyAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"custody_amount"`
	Leverage                 github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,10,opt,name=leverage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"leverage"`
	MtpHealth                github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,11,opt,name=mtp_health,json=mtpHealth,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mtp_health"`
	Position                 Position                                `protobuf:"varint,12,opt,name=position,proto3,enum=sifnode.margin.v1.Position" json:"position,omitempty"`
	Id                       uint64                                  `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MTP) Reset()         { *m = MTP{} }
func (m *MTP) String() string { return proto.CompactTextString(m) }
func (*MTP) ProtoMessage()    {}
func (*MTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3994728d56e8650, []int{0}
}
func (m *MTP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MTP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTP.Merge(m, src)
}
func (m *MTP) XXX_Size() int {
	return m.Size()
}
func (m *MTP) XXX_DiscardUnknown() {
	xxx_messageInfo_MTP.DiscardUnknown(m)
}

var xxx_messageInfo_MTP proto.InternalMessageInfo

func (m *MTP) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MTP) GetCollateralAsset() string {
	if m != nil {
		return m.CollateralAsset
	}
	return ""
}

func (m *MTP) GetCustodyAsset() string {
	if m != nil {
		return m.CustodyAsset
	}
	return ""
}

func (m *MTP) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position_UNSPECIFIED
}

func (m *MTP) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterEnum("sifnode.margin.v1.Position", Position_name, Position_value)
	proto.RegisterType((*MTP)(nil), "sifnode.margin.v1.MTP")
}

func init() { proto.RegisterFile("sifnode/margin/v1/types.proto", fileDescriptor_b3994728d56e8650) }

var fileDescriptor_b3994728d56e8650 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0xed, 0x34, 0x6d, 0x9c, 0x9b, 0x36, 0x4d, 0x87, 0x1f, 0x8d, 0x8a, 0x70, 0x23, 0x90,
	0x20, 0x54, 0xc2, 0xa6, 0xb0, 0x60, 0xdd, 0x36, 0x85, 0x16, 0xd1, 0x36, 0x38, 0x0d, 0x0b, 0x84,
	0x14, 0x4d, 0xec, 0xa9, 0x33, 0xc2, 0xf6, 0x58, 0x9e, 0x49, 0x44, 0xdf, 0x82, 0x3d, 0x2f, 0xd4,
	0x65, 0x97, 0x88, 0x45, 0x85, 0x92, 0x17, 0x41, 0xf1, 0x5f, 0x4d, 0xd9, 0x54, 0x5e, 0xd9, 0xbe,
	0xf7, 0xf8, 0x3b, 0x3e, 0xd6, 0x9d, 0x0b, 0x8f, 0x05, 0x3b, 0x0f, 0xb8, 0x43, 0x4d, 0x9f, 0x44,
	0x2e, 0x0b, 0xcc, 0xe9, 0x8e, 0x29, 0x2f, 0x42, 0x2a, 0x8c, 0x30, 0xe2, 0x92, 0xa3, 0x8d, 0xb4,
	0x6d, 0x24, 0x6d, 0x63, 0xba, 0xb3, 0x79, 0xdf, 0xe5, 0x2e, 0x8f, 0xbb, 0xe6, 0xe2, 0x2e, 0x11,
	0x3e, 0xf9, 0x59, 0x83, 0xa5, 0xe3, 0xb3, 0x1e, 0xc2, 0x50, 0x23, 0x8e, 0x13, 0x51, 0x21, 0xb0,
	0xda, 0x56, 0x3b, 0x75, 0x2b, 0x7b, 0x44, 0x2f, 0xa0, 0x65, 0x73, 0xcf, 0x23, 0x92, 0x46, 0xc4,
	0x1b, 0x12, 0x21, 0xa8, 0xc4, 0x95, 0x58, 0xb2, 0x7e, 0x53, 0xdf, 0x5d, 0x94, 0xd1, 0x57, 0xd8,
	0x28, 0x4a, 0x7d, 0x3e, 0x09, 0x24, 0x5e, 0x5a, 0x68, 0xf7, 0xcc, 0xcb, 0xeb, 0x2d, 0xe5, 0xf7,
	0xf5, 0xd6, 0x73, 0x97, 0xc9, 0xf1, 0x64, 0x64, 0xd8, 0xdc, 0x37, 0x6d, 0x2e, 0x7c, 0x2e, 0xd2,
	0xcb, 0x4b, 0xe1, 0x7c, 0x4b, 0x23, 0x0c, 0x58, 0x20, 0xad, 0x82, 0xe9, 0x6e, 0x0c, 0x42, 0x9f,
	0xa0, 0xe1, 0x31, 0x32, 0x62, 0x1e, 0x93, 0x8c, 0x0a, 0x5c, 0x2d, 0xc7, 0x2d, 0x32, 0x10, 0x03,
	0xcc, 0x02, 0x49, 0x23, 0x2a, 0xe4, 0x30, 0x24, 0xcc, 0x19, 0xde, 0x98, 0xe2, 0xe5, 0x72, 0xfc,
	0x87, 0x19, 0xb0, 0x47, 0x98, 0xb3, 0x9f, 0xe3, 0x90, 0x0d, 0x0f, 0x6e, 0x59, 0x4d, 0x84, 0xe4,
	0xce, 0x05, 0x5e, 0x29, 0xe7, 0x73, 0xef, 0x1f, 0x9f, 0x84, 0x85, 0x7c, 0xd8, 0xcc, 0x4d, 0x26,
	0xc1, 0xed, 0x44, 0xb5, 0x72, 0x4e, 0xf9, 0x2f, 0x1a, 0xc4, 0xc4, 0x42, 0xa6, 0xa7, 0xb0, 0x96,
	0xa6, 0x48, 0xe7, 0x42, 0x8b, 0xe7, 0x62, 0x35, 0x2d, 0x26, 0x43, 0xf1, 0x19, 0x9a, 0xb9, 0x28,
	0x99, 0x88, 0x7a, 0xb9, 0xef, 0xc8, 0xbc, 0xd2, 0x71, 0xf8, 0x00, 0x9a, 0x47, 0xa7, 0x34, 0x22,
	0x2e, 0xc5, 0x10, 0x13, 0x8d, 0x94, 0xf8, 0xec, 0x0e, 0xc4, 0x2e, 0xb5, 0xad, 0xfc, 0x7d, 0x74,
	0x0c, 0xe0, 0xcb, 0x70, 0x38, 0xa6, 0xc4, 0x93, 0x63, 0xdc, 0x28, 0x45, 0xab, 0xfb, 0x32, 0x3c,
	0x8c, 0x01, 0xe8, 0x2d, 0x68, 0x21, 0x17, 0x4c, 0x32, 0x1e, 0xe0, 0xd5, 0xb6, 0xda, 0x69, 0xbe,
	0x7e, 0x64, 0xfc, 0x77, 0x20, 0x8d, 0x5e, 0x2a, 0xb1, 0x72, 0x31, 0x6a, 0x42, 0x85, 0x39, 0x78,
	0xad, 0xad, 0x76, 0xaa, 0x56, 0x85, 0x39, 0xdb, 0xaf, 0x40, 0xcb, 0x54, 0x68, 0x1d, 0x1a, 0x83,
	0x93, 0x7e, 0xef, 0x60, 0xff, 0xe8, 0xdd, 0xd1, 0x41, 0xb7, 0xa5, 0x20, 0x0d, 0xaa, 0x1f, 0x4f,
	0x4f, 0xde, 0xb7, 0x54, 0x54, 0x87, 0xe5, 0xfe, 0xe1, 0xa9, 0x75, 0xd6, 0xaa, 0xec, 0x75, 0x2f,
	0x67, 0xba, 0x7a, 0x35, 0xd3, 0xd5, 0x3f, 0x33, 0x5d, 0xfd, 0x31, 0xd7, 0x95, 0xab, 0xb9, 0xae,
	0xfc, 0x9a, 0xeb, 0xca, 0x97, 0xed, 0x42, 0x8e, 0x3e, 0x3b, 0xb7, 0xc7, 0x84, 0x05, 0x66, 0xb6,
	0x45, 0xbe, 0x67, 0x7b, 0x24, 0xce, 0x33, 0x5a, 0x89, 0x97, 0xc3, 0x9b, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xba, 0xae, 0xaa, 0xee, 0x66, 0x04, 0x00, 0x00,
}

func (m *MTP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MTP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MTP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x68
	}
	if m.Position != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.MtpHealth.Size()
		i -= size
		if _, err := m.MtpHealth.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.CustodyAmount.Size()
		i -= size
		if _, err := m.CustodyAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.CustodyAsset) > 0 {
		i -= len(m.CustodyAsset)
		copy(dAtA[i:], m.CustodyAsset)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustodyAsset)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.InterestUnpaidCollateral.Size()
		i -= size
		if _, err := m.InterestUnpaidCollateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.InterestPaidCustody.Size()
		i -= size
		if _, err := m.InterestPaidCustody.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.InterestPaidCollateral.Size()
		i -= size
		if _, err := m.InterestPaidCollateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Liabilities.Size()
		i -= size
		if _, err := m.Liabilities.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CollateralAmount.Size()
		i -= size
		if _, err := m.CollateralAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.CollateralAsset) > 0 {
		i -= len(m.CollateralAsset)
		copy(dAtA[i:], m.CollateralAsset)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CollateralAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MTP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CollateralAsset)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.CollateralAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Liabilities.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.InterestPaidCollateral.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.InterestPaidCustody.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.InterestUnpaidCollateral.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.CustodyAsset)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.CustodyAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Leverage.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MtpHealth.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Position != 0 {
		n += 1 + sovTypes(uint64(m.Position))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MTP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MTP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MTP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liabilities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestPaidCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestPaidCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestPaidCustody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestPaidCustody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestUnpaidCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestUnpaidCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodyAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustodyAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodyAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CustodyAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtpHealth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MtpHealth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= Position(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
