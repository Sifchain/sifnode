// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/clp/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_x_mint_types "github.com/cosmos/cosmos-sdk/x/mint/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateStakingRewardParams struct {
	Signer string                                           `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	Minter github_com_cosmos_cosmos_sdk_x_mint_types.Minter `protobuf:"bytes,2,opt,name=minter,proto3,customtype=github.com/cosmos/cosmos-sdk/x/mint/types.Minter" json:"minter"`
	Params github_com_cosmos_cosmos_sdk_x_mint_types.Params `protobuf:"bytes,3,opt,name=params,proto3,customtype=github.com/cosmos/cosmos-sdk/x/mint/types.Params" json:"params"`
}

func (m *MsgUpdateStakingRewardParams) Reset()         { *m = MsgUpdateStakingRewardParams{} }
func (m *MsgUpdateStakingRewardParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakingRewardParams) ProtoMessage()    {}
func (*MsgUpdateStakingRewardParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{0}
}
func (m *MsgUpdateStakingRewardParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakingRewardParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakingRewardParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakingRewardParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakingRewardParams.Merge(m, src)
}
func (m *MsgUpdateStakingRewardParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakingRewardParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakingRewardParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakingRewardParams proto.InternalMessageInfo

func (m *MsgUpdateStakingRewardParams) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type MsgUpdateStakingRewardParamsResponse struct {
}

func (m *MsgUpdateStakingRewardParamsResponse) Reset()         { *m = MsgUpdateStakingRewardParamsResponse{} }
func (m *MsgUpdateStakingRewardParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakingRewardParamsResponse) ProtoMessage()    {}
func (*MsgUpdateStakingRewardParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{1}
}
func (m *MsgUpdateStakingRewardParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakingRewardParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakingRewardParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakingRewardParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakingRewardParamsResponse.Merge(m, src)
}
func (m *MsgUpdateStakingRewardParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakingRewardParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakingRewardParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakingRewardParamsResponse proto.InternalMessageInfo

type MsgRemoveLiquidity struct {
	Signer        string                                 `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset *Asset                                 `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	WBasisPoints  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=w_basis_points,json=wBasisPoints,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"w_basis_points" yaml:"w_basis_points"`
	Asymmetry     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=asymmetry,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"asymmetry" yaml:"asymmetry"`
}

func (m *MsgRemoveLiquidity) Reset()         { *m = MsgRemoveLiquidity{} }
func (m *MsgRemoveLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidity) ProtoMessage()    {}
func (*MsgRemoveLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{2}
}
func (m *MsgRemoveLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidity.Merge(m, src)
}
func (m *MsgRemoveLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidity proto.InternalMessageInfo

func (m *MsgRemoveLiquidity) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveLiquidity) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgRemoveLiquidityResponse struct {
}

func (m *MsgRemoveLiquidityResponse) Reset()         { *m = MsgRemoveLiquidityResponse{} }
func (m *MsgRemoveLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidityResponse) ProtoMessage()    {}
func (*MsgRemoveLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{3}
}
func (m *MsgRemoveLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidityResponse.Merge(m, src)
}
func (m *MsgRemoveLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidityResponse proto.InternalMessageInfo

type MsgRemoveLiquidityUnits struct {
	Signer        string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset *Asset                                  `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	WithdrawUnits github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=withdraw_units,json=withdrawUnits,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"withdraw_units" yaml:"withdraw_units"`
}

func (m *MsgRemoveLiquidityUnits) Reset()         { *m = MsgRemoveLiquidityUnits{} }
func (m *MsgRemoveLiquidityUnits) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidityUnits) ProtoMessage()    {}
func (*MsgRemoveLiquidityUnits) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{4}
}
func (m *MsgRemoveLiquidityUnits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidityUnits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidityUnits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidityUnits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidityUnits.Merge(m, src)
}
func (m *MsgRemoveLiquidityUnits) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidityUnits) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidityUnits.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidityUnits proto.InternalMessageInfo

func (m *MsgRemoveLiquidityUnits) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveLiquidityUnits) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgRemoveLiquidityUnitsResponse struct {
}

func (m *MsgRemoveLiquidityUnitsResponse) Reset()         { *m = MsgRemoveLiquidityUnitsResponse{} }
func (m *MsgRemoveLiquidityUnitsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidityUnitsResponse) ProtoMessage()    {}
func (*MsgRemoveLiquidityUnitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{5}
}
func (m *MsgRemoveLiquidityUnitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidityUnitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidityUnitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidityUnitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidityUnitsResponse.Merge(m, src)
}
func (m *MsgRemoveLiquidityUnitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidityUnitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidityUnitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidityUnitsResponse proto.InternalMessageInfo

type MsgCreatePool struct {
	Signer              string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset       *Asset                                  `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	NativeAssetAmount   github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=native_asset_amount,json=nativeAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_asset_amount" yaml:"native_asset_amount"`
	ExternalAssetAmount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=external_asset_amount,json=externalAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_asset_amount" yaml:"external_asset_amount"`
}

func (m *MsgCreatePool) Reset()         { *m = MsgCreatePool{} }
func (m *MsgCreatePool) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePool) ProtoMessage()    {}
func (*MsgCreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{6}
}
func (m *MsgCreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePool.Merge(m, src)
}
func (m *MsgCreatePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePool proto.InternalMessageInfo

func (m *MsgCreatePool) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCreatePool) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgCreatePoolResponse struct {
}

func (m *MsgCreatePoolResponse) Reset()         { *m = MsgCreatePoolResponse{} }
func (m *MsgCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePoolResponse) ProtoMessage()    {}
func (*MsgCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{7}
}
func (m *MsgCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePoolResponse.Merge(m, src)
}
func (m *MsgCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePoolResponse proto.InternalMessageInfo

type MsgAddLiquidity struct {
	Signer              string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset       *Asset                                  `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	NativeAssetAmount   github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=native_asset_amount,json=nativeAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_asset_amount" yaml:"native_asset_amount"`
	ExternalAssetAmount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=external_asset_amount,json=externalAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_asset_amount" yaml:"external_asset_amount"`
}

func (m *MsgAddLiquidity) Reset()         { *m = MsgAddLiquidity{} }
func (m *MsgAddLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgAddLiquidity) ProtoMessage()    {}
func (*MsgAddLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{8}
}
func (m *MsgAddLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLiquidity.Merge(m, src)
}
func (m *MsgAddLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLiquidity proto.InternalMessageInfo

func (m *MsgAddLiquidity) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddLiquidity) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgAddLiquidityResponse struct {
}

func (m *MsgAddLiquidityResponse) Reset()         { *m = MsgAddLiquidityResponse{} }
func (m *MsgAddLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddLiquidityResponse) ProtoMessage()    {}
func (*MsgAddLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{9}
}
func (m *MsgAddLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLiquidityResponse.Merge(m, src)
}
func (m *MsgAddLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLiquidityResponse proto.InternalMessageInfo

type MsgModifyPmtpRates struct {
	Signer      string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	BlockRate   string `protobuf:"bytes,2,opt,name=block_rate,json=blockRate,proto3" json:"block_rate,omitempty"`
	RunningRate string `protobuf:"bytes,3,opt,name=running_rate,json=runningRate,proto3" json:"running_rate,omitempty"`
	EndPolicy   bool   `protobuf:"varint,4,opt,name=end_policy,json=endPolicy,proto3" json:"end_policy,omitempty"`
}

func (m *MsgModifyPmtpRates) Reset()         { *m = MsgModifyPmtpRates{} }
func (m *MsgModifyPmtpRates) String() string { return proto.CompactTextString(m) }
func (*MsgModifyPmtpRates) ProtoMessage()    {}
func (*MsgModifyPmtpRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{10}
}
func (m *MsgModifyPmtpRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyPmtpRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyPmtpRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyPmtpRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyPmtpRates.Merge(m, src)
}
func (m *MsgModifyPmtpRates) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyPmtpRates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyPmtpRates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyPmtpRates proto.InternalMessageInfo

func (m *MsgModifyPmtpRates) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgModifyPmtpRates) GetBlockRate() string {
	if m != nil {
		return m.BlockRate
	}
	return ""
}

func (m *MsgModifyPmtpRates) GetRunningRate() string {
	if m != nil {
		return m.RunningRate
	}
	return ""
}

func (m *MsgModifyPmtpRates) GetEndPolicy() bool {
	if m != nil {
		return m.EndPolicy
	}
	return false
}

type MsgModifyPmtpRatesResponse struct {
}

func (m *MsgModifyPmtpRatesResponse) Reset()         { *m = MsgModifyPmtpRatesResponse{} }
func (m *MsgModifyPmtpRatesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgModifyPmtpRatesResponse) ProtoMessage()    {}
func (*MsgModifyPmtpRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{11}
}
func (m *MsgModifyPmtpRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyPmtpRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyPmtpRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyPmtpRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyPmtpRatesResponse.Merge(m, src)
}
func (m *MsgModifyPmtpRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyPmtpRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyPmtpRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyPmtpRatesResponse proto.InternalMessageInfo

type MsgUpdatePmtpParams struct {
	Signer                   string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	PmtpPeriodGovernanceRate string `protobuf:"bytes,2,opt,name=pmtp_period_governance_rate,json=pmtpPeriodGovernanceRate,proto3" json:"pmtp_period_governance_rate,omitempty"`
	PmtpPeriodEpochLength    int64  `protobuf:"varint,3,opt,name=pmtp_period_epoch_length,json=pmtpPeriodEpochLength,proto3" json:"pmtp_period_epoch_length,omitempty"`
	PmtpPeriodStartBlock     int64  `protobuf:"varint,4,opt,name=pmtp_period_start_block,json=pmtpPeriodStartBlock,proto3" json:"pmtp_period_start_block,omitempty"`
	PmtpPeriodEndBlock       int64  `protobuf:"varint,5,opt,name=pmtp_period_end_block,json=pmtpPeriodEndBlock,proto3" json:"pmtp_period_end_block,omitempty"`
}

func (m *MsgUpdatePmtpParams) Reset()         { *m = MsgUpdatePmtpParams{} }
func (m *MsgUpdatePmtpParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePmtpParams) ProtoMessage()    {}
func (*MsgUpdatePmtpParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{12}
}
func (m *MsgUpdatePmtpParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePmtpParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePmtpParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePmtpParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePmtpParams.Merge(m, src)
}
func (m *MsgUpdatePmtpParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePmtpParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePmtpParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePmtpParams proto.InternalMessageInfo

func (m *MsgUpdatePmtpParams) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdatePmtpParams) GetPmtpPeriodGovernanceRate() string {
	if m != nil {
		return m.PmtpPeriodGovernanceRate
	}
	return ""
}

func (m *MsgUpdatePmtpParams) GetPmtpPeriodEpochLength() int64 {
	if m != nil {
		return m.PmtpPeriodEpochLength
	}
	return 0
}

func (m *MsgUpdatePmtpParams) GetPmtpPeriodStartBlock() int64 {
	if m != nil {
		return m.PmtpPeriodStartBlock
	}
	return 0
}

func (m *MsgUpdatePmtpParams) GetPmtpPeriodEndBlock() int64 {
	if m != nil {
		return m.PmtpPeriodEndBlock
	}
	return 0
}

type MsgUpdatePmtpParamsResponse struct {
}

func (m *MsgUpdatePmtpParamsResponse) Reset()         { *m = MsgUpdatePmtpParamsResponse{} }
func (m *MsgUpdatePmtpParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePmtpParamsResponse) ProtoMessage()    {}
func (*MsgUpdatePmtpParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{13}
}
func (m *MsgUpdatePmtpParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePmtpParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePmtpParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePmtpParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePmtpParamsResponse.Merge(m, src)
}
func (m *MsgUpdatePmtpParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePmtpParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePmtpParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePmtpParamsResponse proto.InternalMessageInfo

type MsgSwap struct {
	Signer             string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	SentAsset          *Asset                                  `protobuf:"bytes,2,opt,name=sent_asset,json=sentAsset,proto3" json:"sent_asset,omitempty" yaml:"sent_asset"`
	ReceivedAsset      *Asset                                  `protobuf:"bytes,3,opt,name=received_asset,json=receivedAsset,proto3" json:"received_asset,omitempty" yaml:"received_asset"`
	SentAmount         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=sent_amount,json=sentAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"sent_amount" yaml:"sent_amount"`
	MinReceivingAmount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=min_receiving_amount,json=minReceivingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"min_receiving_amount" yaml:"min_receiving_amount"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{14}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

func (m *MsgSwap) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgSwap) GetSentAsset() *Asset {
	if m != nil {
		return m.SentAsset
	}
	return nil
}

func (m *MsgSwap) GetReceivedAsset() *Asset {
	if m != nil {
		return m.ReceivedAsset
	}
	return nil
}

type MsgSwapResponse struct {
}

func (m *MsgSwapResponse) Reset()         { *m = MsgSwapResponse{} }
func (m *MsgSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapResponse) ProtoMessage()    {}
func (*MsgSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{15}
}
func (m *MsgSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapResponse.Merge(m, src)
}
func (m *MsgSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapResponse proto.InternalMessageInfo

type MsgDecommissionPool struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty" yaml:"symbol"`
}

func (m *MsgDecommissionPool) Reset()         { *m = MsgDecommissionPool{} }
func (m *MsgDecommissionPool) String() string { return proto.CompactTextString(m) }
func (*MsgDecommissionPool) ProtoMessage()    {}
func (*MsgDecommissionPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{16}
}
func (m *MsgDecommissionPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecommissionPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecommissionPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecommissionPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecommissionPool.Merge(m, src)
}
func (m *MsgDecommissionPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecommissionPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecommissionPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecommissionPool proto.InternalMessageInfo

func (m *MsgDecommissionPool) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgDecommissionPool) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type MsgDecommissionPoolResponse struct {
}

func (m *MsgDecommissionPoolResponse) Reset()         { *m = MsgDecommissionPoolResponse{} }
func (m *MsgDecommissionPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDecommissionPoolResponse) ProtoMessage()    {}
func (*MsgDecommissionPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{17}
}
func (m *MsgDecommissionPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecommissionPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecommissionPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecommissionPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecommissionPoolResponse.Merge(m, src)
}
func (m *MsgDecommissionPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecommissionPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecommissionPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecommissionPoolResponse proto.InternalMessageInfo

type MsgUnlockLiquidityRequest struct {
	Signer        string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset *Asset                                  `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	Units         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=units,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"units"`
}

func (m *MsgUnlockLiquidityRequest) Reset()         { *m = MsgUnlockLiquidityRequest{} }
func (m *MsgUnlockLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockLiquidityRequest) ProtoMessage()    {}
func (*MsgUnlockLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{18}
}
func (m *MsgUnlockLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockLiquidityRequest.Merge(m, src)
}
func (m *MsgUnlockLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockLiquidityRequest proto.InternalMessageInfo

func (m *MsgUnlockLiquidityRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUnlockLiquidityRequest) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgUnlockLiquidityResponse struct {
}

func (m *MsgUnlockLiquidityResponse) Reset()         { *m = MsgUnlockLiquidityResponse{} }
func (m *MsgUnlockLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockLiquidityResponse) ProtoMessage()    {}
func (*MsgUnlockLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{19}
}
func (m *MsgUnlockLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockLiquidityResponse.Merge(m, src)
}
func (m *MsgUnlockLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockLiquidityResponse proto.InternalMessageInfo

type MsgUpdateRewardsParamsRequest struct {
	Signer                       string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	LiquidityRemovalLockPeriod   uint64 `protobuf:"varint,2,opt,name=liquidity_removal_lock_period,json=liquidityRemovalLockPeriod,proto3" json:"liquidity_removal_lock_period,omitempty"`
	LiquidityRemovalCancelPeriod uint64 `protobuf:"varint,3,opt,name=liquidity_removal_cancel_period,json=liquidityRemovalCancelPeriod,proto3" json:"liquidity_removal_cancel_period,omitempty"`
}

func (m *MsgUpdateRewardsParamsRequest) Reset()         { *m = MsgUpdateRewardsParamsRequest{} }
func (m *MsgUpdateRewardsParamsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRewardsParamsRequest) ProtoMessage()    {}
func (*MsgUpdateRewardsParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{20}
}
func (m *MsgUpdateRewardsParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRewardsParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRewardsParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRewardsParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRewardsParamsRequest.Merge(m, src)
}
func (m *MsgUpdateRewardsParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRewardsParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRewardsParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRewardsParamsRequest proto.InternalMessageInfo

func (m *MsgUpdateRewardsParamsRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateRewardsParamsRequest) GetLiquidityRemovalLockPeriod() uint64 {
	if m != nil {
		return m.LiquidityRemovalLockPeriod
	}
	return 0
}

func (m *MsgUpdateRewardsParamsRequest) GetLiquidityRemovalCancelPeriod() uint64 {
	if m != nil {
		return m.LiquidityRemovalCancelPeriod
	}
	return 0
}

type MsgUpdateRewardsParamsResponse struct {
}

func (m *MsgUpdateRewardsParamsResponse) Reset()         { *m = MsgUpdateRewardsParamsResponse{} }
func (m *MsgUpdateRewardsParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRewardsParamsResponse) ProtoMessage()    {}
func (*MsgUpdateRewardsParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{21}
}
func (m *MsgUpdateRewardsParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRewardsParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRewardsParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRewardsParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRewardsParamsResponse.Merge(m, src)
}
func (m *MsgUpdateRewardsParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRewardsParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRewardsParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRewardsParamsResponse proto.InternalMessageInfo

type MsgAddRewardPeriodRequest struct {
	Signer        string          `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	RewardPeriods []*RewardPeriod `protobuf:"bytes,2,rep,name=reward_periods,json=rewardPeriods,proto3" json:"reward_periods,omitempty"`
}

func (m *MsgAddRewardPeriodRequest) Reset()         { *m = MsgAddRewardPeriodRequest{} }
func (m *MsgAddRewardPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardPeriodRequest) ProtoMessage()    {}
func (*MsgAddRewardPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{22}
}
func (m *MsgAddRewardPeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardPeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardPeriodRequest.Merge(m, src)
}
func (m *MsgAddRewardPeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardPeriodRequest proto.InternalMessageInfo

func (m *MsgAddRewardPeriodRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddRewardPeriodRequest) GetRewardPeriods() []*RewardPeriod {
	if m != nil {
		return m.RewardPeriods
	}
	return nil
}

type MsgAddRewardPeriodResponse struct {
}

func (m *MsgAddRewardPeriodResponse) Reset()         { *m = MsgAddRewardPeriodResponse{} }
func (m *MsgAddRewardPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardPeriodResponse) ProtoMessage()    {}
func (*MsgAddRewardPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{23}
}
func (m *MsgAddRewardPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardPeriodResponse.Merge(m, src)
}
func (m *MsgAddRewardPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardPeriodResponse proto.InternalMessageInfo

type MsgSetSymmetryThreshold struct {
	Signer    string                                 `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Threshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=threshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"threshold"`
	Ratio     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
}

func (m *MsgSetSymmetryThreshold) Reset()         { *m = MsgSetSymmetryThreshold{} }
func (m *MsgSetSymmetryThreshold) String() string { return proto.CompactTextString(m) }
func (*MsgSetSymmetryThreshold) ProtoMessage()    {}
func (*MsgSetSymmetryThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{24}
}
func (m *MsgSetSymmetryThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSymmetryThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSymmetryThreshold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSymmetryThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSymmetryThreshold.Merge(m, src)
}
func (m *MsgSetSymmetryThreshold) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSymmetryThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSymmetryThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSymmetryThreshold proto.InternalMessageInfo

func (m *MsgSetSymmetryThreshold) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type MsgSetSymmetryThresholdResponse struct {
}

func (m *MsgSetSymmetryThresholdResponse) Reset()         { *m = MsgSetSymmetryThresholdResponse{} }
func (m *MsgSetSymmetryThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetSymmetryThresholdResponse) ProtoMessage()    {}
func (*MsgSetSymmetryThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{25}
}
func (m *MsgSetSymmetryThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSymmetryThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSymmetryThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSymmetryThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSymmetryThresholdResponse.Merge(m, src)
}
func (m *MsgSetSymmetryThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSymmetryThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSymmetryThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSymmetryThresholdResponse proto.InternalMessageInfo

type MsgCancelUnlock struct {
	Signer        string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ExternalAsset *Asset                                  `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	Units         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=units,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"units"`
}

func (m *MsgCancelUnlock) Reset()         { *m = MsgCancelUnlock{} }
func (m *MsgCancelUnlock) String() string { return proto.CompactTextString(m) }
func (*MsgCancelUnlock) ProtoMessage()    {}
func (*MsgCancelUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{26}
}
func (m *MsgCancelUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelUnlock.Merge(m, src)
}
func (m *MsgCancelUnlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelUnlock proto.InternalMessageInfo

func (m *MsgCancelUnlock) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCancelUnlock) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgCancelUnlockResponse struct {
}

func (m *MsgCancelUnlockResponse) Reset()         { *m = MsgCancelUnlockResponse{} }
func (m *MsgCancelUnlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelUnlockResponse) ProtoMessage()    {}
func (*MsgCancelUnlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{27}
}
func (m *MsgCancelUnlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelUnlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelUnlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelUnlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelUnlockResponse.Merge(m, src)
}
func (m *MsgCancelUnlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelUnlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelUnlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelUnlockResponse proto.InternalMessageInfo

type RemovalRequest struct {
	Id    int64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"value"`
	Msg   *MsgRemoveLiquidity                     `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RemovalRequest) Reset()         { *m = RemovalRequest{} }
func (m *RemovalRequest) String() string { return proto.CompactTextString(m) }
func (*RemovalRequest) ProtoMessage()    {}
func (*RemovalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{28}
}
func (m *RemovalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovalRequest.Merge(m, src)
}
func (m *RemovalRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemovalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovalRequest proto.InternalMessageInfo

func (m *RemovalRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemovalRequest) GetMsg() *MsgRemoveLiquidity {
	if m != nil {
		return m.Msg
	}
	return nil
}

type MsgModifyLiquidityProtectionRates struct {
	Signer                         string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	CurrentRowanLiquidityThreshold github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=current_rowan_liquidity_threshold,json=currentRowanLiquidityThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"current_rowan_liquidity_threshold"`
}

func (m *MsgModifyLiquidityProtectionRates) Reset()         { *m = MsgModifyLiquidityProtectionRates{} }
func (m *MsgModifyLiquidityProtectionRates) String() string { return proto.CompactTextString(m) }
func (*MsgModifyLiquidityProtectionRates) ProtoMessage()    {}
func (*MsgModifyLiquidityProtectionRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{29}
}
func (m *MsgModifyLiquidityProtectionRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyLiquidityProtectionRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyLiquidityProtectionRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyLiquidityProtectionRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyLiquidityProtectionRates.Merge(m, src)
}
func (m *MsgModifyLiquidityProtectionRates) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyLiquidityProtectionRates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyLiquidityProtectionRates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyLiquidityProtectionRates proto.InternalMessageInfo

func (m *MsgModifyLiquidityProtectionRates) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type MsgModifyLiquidityProtectionRatesResponse struct {
}

func (m *MsgModifyLiquidityProtectionRatesResponse) Reset() {
	*m = MsgModifyLiquidityProtectionRatesResponse{}
}
func (m *MsgModifyLiquidityProtectionRatesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgModifyLiquidityProtectionRatesResponse) ProtoMessage() {}
func (*MsgModifyLiquidityProtectionRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{30}
}
func (m *MsgModifyLiquidityProtectionRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyLiquidityProtectionRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyLiquidityProtectionRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyLiquidityProtectionRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyLiquidityProtectionRatesResponse.Merge(m, src)
}
func (m *MsgModifyLiquidityProtectionRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyLiquidityProtectionRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyLiquidityProtectionRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyLiquidityProtectionRatesResponse proto.InternalMessageInfo

type MsgUpdateLiquidityProtectionParams struct {
	Signer                          string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	MaxRowanLiquidityThreshold      github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=max_rowan_liquidity_threshold,json=maxRowanLiquidityThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"max_rowan_liquidity_threshold"`
	MaxRowanLiquidityThresholdAsset string                                  `protobuf:"bytes,4,opt,name=max_rowan_liquidity_threshold_asset,json=maxRowanLiquidityThresholdAsset,proto3" json:"max_rowan_liquidity_threshold_asset,omitempty"`
	EpochLength                     uint64                                  `protobuf:"varint,3,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	IsActive                        bool                                    `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *MsgUpdateLiquidityProtectionParams) Reset()         { *m = MsgUpdateLiquidityProtectionParams{} }
func (m *MsgUpdateLiquidityProtectionParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLiquidityProtectionParams) ProtoMessage()    {}
func (*MsgUpdateLiquidityProtectionParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{31}
}
func (m *MsgUpdateLiquidityProtectionParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLiquidityProtectionParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLiquidityProtectionParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLiquidityProtectionParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLiquidityProtectionParams.Merge(m, src)
}
func (m *MsgUpdateLiquidityProtectionParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLiquidityProtectionParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLiquidityProtectionParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLiquidityProtectionParams proto.InternalMessageInfo

func (m *MsgUpdateLiquidityProtectionParams) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateLiquidityProtectionParams) GetMaxRowanLiquidityThresholdAsset() string {
	if m != nil {
		return m.MaxRowanLiquidityThresholdAsset
	}
	return ""
}

func (m *MsgUpdateLiquidityProtectionParams) GetEpochLength() uint64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

func (m *MsgUpdateLiquidityProtectionParams) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type MsgUpdateLiquidityProtectionParamsResponse struct {
}

func (m *MsgUpdateLiquidityProtectionParamsResponse) Reset() {
	*m = MsgUpdateLiquidityProtectionParamsResponse{}
}
func (m *MsgUpdateLiquidityProtectionParamsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateLiquidityProtectionParamsResponse) ProtoMessage() {}
func (*MsgUpdateLiquidityProtectionParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{32}
}
func (m *MsgUpdateLiquidityProtectionParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLiquidityProtectionParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLiquidityProtectionParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLiquidityProtectionParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLiquidityProtectionParamsResponse.Merge(m, src)
}
func (m *MsgUpdateLiquidityProtectionParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLiquidityProtectionParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLiquidityProtectionParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLiquidityProtectionParamsResponse proto.InternalMessageInfo

type MsgAddProviderDistributionPeriodRequest struct {
	Signer              string                        `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	DistributionPeriods []*ProviderDistributionPeriod `protobuf:"bytes,2,rep,name=distribution_periods,json=distributionPeriods,proto3" json:"distribution_periods,omitempty"`
}

func (m *MsgAddProviderDistributionPeriodRequest) Reset() {
	*m = MsgAddProviderDistributionPeriodRequest{}
}
func (m *MsgAddProviderDistributionPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddProviderDistributionPeriodRequest) ProtoMessage()    {}
func (*MsgAddProviderDistributionPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{33}
}
func (m *MsgAddProviderDistributionPeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddProviderDistributionPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddProviderDistributionPeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddProviderDistributionPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddProviderDistributionPeriodRequest.Merge(m, src)
}
func (m *MsgAddProviderDistributionPeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddProviderDistributionPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddProviderDistributionPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddProviderDistributionPeriodRequest proto.InternalMessageInfo

func (m *MsgAddProviderDistributionPeriodRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddProviderDistributionPeriodRequest) GetDistributionPeriods() []*ProviderDistributionPeriod {
	if m != nil {
		return m.DistributionPeriods
	}
	return nil
}

type MsgAddProviderDistributionPeriodResponse struct {
}

func (m *MsgAddProviderDistributionPeriodResponse) Reset() {
	*m = MsgAddProviderDistributionPeriodResponse{}
}
func (m *MsgAddProviderDistributionPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddProviderDistributionPeriodResponse) ProtoMessage()    {}
func (*MsgAddProviderDistributionPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{34}
}
func (m *MsgAddProviderDistributionPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddProviderDistributionPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddProviderDistributionPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddProviderDistributionPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddProviderDistributionPeriodResponse.Merge(m, src)
}
func (m *MsgAddProviderDistributionPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddProviderDistributionPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddProviderDistributionPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddProviderDistributionPeriodResponse proto.InternalMessageInfo

type MsgUpdateSwapFeeParamsRequest struct {
	Signer             string                                 `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	DefaultSwapFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=default_swap_fee_rate,json=defaultSwapFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_swap_fee_rate"`
	TokenParams        []*SwapFeeTokenParams                  `protobuf:"bytes,3,rep,name=token_params,json=tokenParams,proto3" json:"token_params,omitempty"`
}

func (m *MsgUpdateSwapFeeParamsRequest) Reset()         { *m = MsgUpdateSwapFeeParamsRequest{} }
func (m *MsgUpdateSwapFeeParamsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSwapFeeParamsRequest) ProtoMessage()    {}
func (*MsgUpdateSwapFeeParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{35}
}
func (m *MsgUpdateSwapFeeParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSwapFeeParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSwapFeeParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSwapFeeParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSwapFeeParamsRequest.Merge(m, src)
}
func (m *MsgUpdateSwapFeeParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSwapFeeParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSwapFeeParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSwapFeeParamsRequest proto.InternalMessageInfo

func (m *MsgUpdateSwapFeeParamsRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateSwapFeeParamsRequest) GetTokenParams() []*SwapFeeTokenParams {
	if m != nil {
		return m.TokenParams
	}
	return nil
}

type MsgUpdateSwapFeeParamsResponse struct {
}

func (m *MsgUpdateSwapFeeParamsResponse) Reset()         { *m = MsgUpdateSwapFeeParamsResponse{} }
func (m *MsgUpdateSwapFeeParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSwapFeeParamsResponse) ProtoMessage()    {}
func (*MsgUpdateSwapFeeParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{36}
}
func (m *MsgUpdateSwapFeeParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSwapFeeParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSwapFeeParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSwapFeeParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSwapFeeParamsResponse.Merge(m, src)
}
func (m *MsgUpdateSwapFeeParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSwapFeeParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSwapFeeParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSwapFeeParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateStakingRewardParams)(nil), "sifnode.clp.v1.MsgUpdateStakingRewardParams")
	proto.RegisterType((*MsgUpdateStakingRewardParamsResponse)(nil), "sifnode.clp.v1.MsgUpdateStakingRewardParamsResponse")
	proto.RegisterType((*MsgRemoveLiquidity)(nil), "sifnode.clp.v1.MsgRemoveLiquidity")
	proto.RegisterType((*MsgRemoveLiquidityResponse)(nil), "sifnode.clp.v1.MsgRemoveLiquidityResponse")
	proto.RegisterType((*MsgRemoveLiquidityUnits)(nil), "sifnode.clp.v1.MsgRemoveLiquidityUnits")
	proto.RegisterType((*MsgRemoveLiquidityUnitsResponse)(nil), "sifnode.clp.v1.MsgRemoveLiquidityUnitsResponse")
	proto.RegisterType((*MsgCreatePool)(nil), "sifnode.clp.v1.MsgCreatePool")
	proto.RegisterType((*MsgCreatePoolResponse)(nil), "sifnode.clp.v1.MsgCreatePoolResponse")
	proto.RegisterType((*MsgAddLiquidity)(nil), "sifnode.clp.v1.MsgAddLiquidity")
	proto.RegisterType((*MsgAddLiquidityResponse)(nil), "sifnode.clp.v1.MsgAddLiquidityResponse")
	proto.RegisterType((*MsgModifyPmtpRates)(nil), "sifnode.clp.v1.MsgModifyPmtpRates")
	proto.RegisterType((*MsgModifyPmtpRatesResponse)(nil), "sifnode.clp.v1.MsgModifyPmtpRatesResponse")
	proto.RegisterType((*MsgUpdatePmtpParams)(nil), "sifnode.clp.v1.MsgUpdatePmtpParams")
	proto.RegisterType((*MsgUpdatePmtpParamsResponse)(nil), "sifnode.clp.v1.MsgUpdatePmtpParamsResponse")
	proto.RegisterType((*MsgSwap)(nil), "sifnode.clp.v1.MsgSwap")
	proto.RegisterType((*MsgSwapResponse)(nil), "sifnode.clp.v1.MsgSwapResponse")
	proto.RegisterType((*MsgDecommissionPool)(nil), "sifnode.clp.v1.MsgDecommissionPool")
	proto.RegisterType((*MsgDecommissionPoolResponse)(nil), "sifnode.clp.v1.MsgDecommissionPoolResponse")
	proto.RegisterType((*MsgUnlockLiquidityRequest)(nil), "sifnode.clp.v1.MsgUnlockLiquidityRequest")
	proto.RegisterType((*MsgUnlockLiquidityResponse)(nil), "sifnode.clp.v1.MsgUnlockLiquidityResponse")
	proto.RegisterType((*MsgUpdateRewardsParamsRequest)(nil), "sifnode.clp.v1.MsgUpdateRewardsParamsRequest")
	proto.RegisterType((*MsgUpdateRewardsParamsResponse)(nil), "sifnode.clp.v1.MsgUpdateRewardsParamsResponse")
	proto.RegisterType((*MsgAddRewardPeriodRequest)(nil), "sifnode.clp.v1.MsgAddRewardPeriodRequest")
	proto.RegisterType((*MsgAddRewardPeriodResponse)(nil), "sifnode.clp.v1.MsgAddRewardPeriodResponse")
	proto.RegisterType((*MsgSetSymmetryThreshold)(nil), "sifnode.clp.v1.MsgSetSymmetryThreshold")
	proto.RegisterType((*MsgSetSymmetryThresholdResponse)(nil), "sifnode.clp.v1.MsgSetSymmetryThresholdResponse")
	proto.RegisterType((*MsgCancelUnlock)(nil), "sifnode.clp.v1.MsgCancelUnlock")
	proto.RegisterType((*MsgCancelUnlockResponse)(nil), "sifnode.clp.v1.MsgCancelUnlockResponse")
	proto.RegisterType((*RemovalRequest)(nil), "sifnode.clp.v1.RemovalRequest")
	proto.RegisterType((*MsgModifyLiquidityProtectionRates)(nil), "sifnode.clp.v1.MsgModifyLiquidityProtectionRates")
	proto.RegisterType((*MsgModifyLiquidityProtectionRatesResponse)(nil), "sifnode.clp.v1.MsgModifyLiquidityProtectionRatesResponse")
	proto.RegisterType((*MsgUpdateLiquidityProtectionParams)(nil), "sifnode.clp.v1.MsgUpdateLiquidityProtectionParams")
	proto.RegisterType((*MsgUpdateLiquidityProtectionParamsResponse)(nil), "sifnode.clp.v1.MsgUpdateLiquidityProtectionParamsResponse")
	proto.RegisterType((*MsgAddProviderDistributionPeriodRequest)(nil), "sifnode.clp.v1.MsgAddProviderDistributionPeriodRequest")
	proto.RegisterType((*MsgAddProviderDistributionPeriodResponse)(nil), "sifnode.clp.v1.MsgAddProviderDistributionPeriodResponse")
	proto.RegisterType((*MsgUpdateSwapFeeParamsRequest)(nil), "sifnode.clp.v1.MsgUpdateSwapFeeParamsRequest")
	proto.RegisterType((*MsgUpdateSwapFeeParamsResponse)(nil), "sifnode.clp.v1.MsgUpdateSwapFeeParamsResponse")
}

func init() { proto.RegisterFile("sifnode/clp/v1/tx.proto", fileDescriptor_a3bff5b30808c4f3) }

var fileDescriptor_a3bff5b30808c4f3 = []byte{
	// 1830 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6f, 0xe4, 0x48,
	0x15, 0x1f, 0xa7, 0x27, 0xc3, 0xe4, 0xe5, 0x63, 0x76, 0x9c, 0x84, 0x64, 0x9c, 0xa4, 0x7b, 0xe2,
	0x81, 0x9d, 0x8f, 0xdd, 0x4d, 0x33, 0xc3, 0xa2, 0x5d, 0x56, 0x42, 0x22, 0x99, 0x09, 0x0b, 0x22,
	0x0d, 0x2d, 0x67, 0x47, 0x8b, 0x90, 0x90, 0x71, 0xec, 0x4a, 0xa7, 0x94, 0xb6, 0xcb, 0xeb, 0xaa,
	0xce, 0x07, 0x12, 0x02, 0x89, 0x23, 0xd2, 0x0a, 0x38, 0x21, 0x24, 0x24, 0xc4, 0xbf, 0xc0, 0xdf,
	0x80, 0xb4, 0xcb, 0x69, 0x91, 0x38, 0x20, 0x0e, 0x11, 0x9a, 0x91, 0x90, 0x38, 0x70, 0x19, 0xf1,
	0x07, 0xa0, 0xfa, 0xe8, 0x6a, 0xb7, 0xbb, 0xdc, 0x89, 0x23, 0x0e, 0x39, 0xec, 0x29, 0x71, 0xd5,
	0x7b, 0xbf, 0xf7, 0x55, 0xef, 0xd5, 0xcf, 0x6e, 0x58, 0xa2, 0x78, 0x3f, 0x21, 0x11, 0x6a, 0x86,
	0xdd, 0xb4, 0x79, 0xf4, 0xb8, 0xc9, 0x4e, 0x36, 0xd2, 0x8c, 0x30, 0x62, 0xcf, 0xa9, 0x8d, 0x8d,
	0xb0, 0x9b, 0x6e, 0x1c, 0x3d, 0x76, 0x16, 0x3a, 0xa4, 0x43, 0xc4, 0x56, 0x93, 0xff, 0x27, 0xa5,
	0x1c, 0xa7, 0xa8, 0x7e, 0x9a, 0x22, 0xaa, 0xf6, 0x56, 0x0a, 0x7b, 0x69, 0x90, 0x05, 0xb1, 0xda,
	0x74, 0xff, 0x63, 0xc1, 0x6a, 0x8b, 0x76, 0x9e, 0xa7, 0x51, 0xc0, 0xd0, 0x2e, 0x0b, 0x0e, 0x71,
	0xd2, 0xf1, 0xd0, 0x71, 0x90, 0x45, 0x6d, 0x21, 0x66, 0x3f, 0x84, 0x1b, 0x14, 0x77, 0x12, 0x94,
	0x2d, 0x5b, 0x77, 0xad, 0x07, 0x53, 0x5b, 0xb7, 0x5f, 0x9d, 0x35, 0x66, 0x4f, 0x83, 0xb8, 0xfb,
	0x9e, 0x2b, 0xd7, 0x5d, 0x4f, 0x09, 0xd8, 0x6d, 0xb8, 0x11, 0xe3, 0x84, 0xa1, 0x6c, 0x79, 0x42,
	0x88, 0xbe, 0xfb, 0xc9, 0x59, 0xe3, 0xda, 0x3f, 0xce, 0x1a, 0x5f, 0xe9, 0x60, 0x76, 0xd0, 0xdb,
	0xdb, 0x08, 0x49, 0xdc, 0x0c, 0x09, 0x8d, 0x09, 0x55, 0x7f, 0xde, 0xa2, 0xd1, 0x61, 0xf3, 0xa4,
	0xc9, 0x95, 0x94, 0xc7, 0x2d, 0xa1, 0xef, 0x29, 0x1c, 0x8e, 0x28, 0xbd, 0x5d, 0xae, 0x5d, 0x16,
	0x51, 0x86, 0xe1, 0x29, 0x1c, 0xf7, 0x75, 0xf8, 0xd2, 0xb8, 0x70, 0x3d, 0x44, 0x53, 0x92, 0x50,
	0xe4, 0xfe, 0x7b, 0x02, 0xec, 0x16, 0xed, 0x78, 0x28, 0x26, 0x47, 0x68, 0x07, 0x7f, 0xd4, 0xc3,
	0x11, 0x66, 0xa7, 0x55, 0xb2, 0xf1, 0x21, 0xcc, 0xa1, 0x13, 0x86, 0xb2, 0x24, 0xe8, 0xfa, 0x01,
	0xa5, 0x88, 0x89, 0xac, 0x4c, 0x3f, 0x59, 0xdc, 0x18, 0xae, 0xe8, 0xc6, 0x26, 0xdf, 0xdc, 0xba,
	0xf3, 0xea, 0xac, 0xb1, 0x28, 0x91, 0x86, 0xd5, 0x5c, 0x6f, 0xb6, 0xbf, 0x20, 0x24, 0xed, 0x18,
	0xe6, 0x8e, 0xfd, 0xbd, 0x80, 0x62, 0xea, 0xa7, 0x04, 0x27, 0xac, 0x9f, 0x9c, 0xf7, 0x55, 0x72,
	0x5e, 0x1f, 0x9b, 0x1c, 0x99, 0x95, 0xef, 0x24, 0x6c, 0x60, 0x6f, 0x18, 0xcd, 0xf5, 0x66, 0x8e,
	0xb7, 0xf8, 0x73, 0x5b, 0x3c, 0xda, 0x3f, 0x86, 0xa9, 0x80, 0x9e, 0xc6, 0x31, 0x62, 0xd9, 0xe9,
	0xf2, 0x75, 0x61, 0x69, 0xab, 0xb2, 0xa5, 0xd7, 0xa4, 0x25, 0x0d, 0xe4, 0x7a, 0x03, 0x50, 0x77,
	0x15, 0x9c, 0xd1, 0x54, 0xeb, 0x4a, 0x7c, 0x3c, 0x01, 0x4b, 0xa3, 0xdb, 0xcf, 0x13, 0xcc, 0xe8,
	0x95, 0x28, 0x07, 0x81, 0xb9, 0x63, 0xcc, 0x0e, 0xa2, 0x2c, 0x38, 0xf6, 0x7b, 0xdc, 0x2b, 0x55,
	0x8e, 0x6f, 0xab, 0x24, 0xdd, 0xbf, 0x40, 0x92, 0x9e, 0xe3, 0xa1, 0x7a, 0x0c, 0xc1, 0xb9, 0xde,
	0x6c, 0x7f, 0x41, 0x04, 0xed, 0xae, 0x43, 0xa3, 0x24, 0x1f, 0x3a, 0x67, 0xbf, 0xad, 0xc1, 0x6c,
	0x8b, 0x76, 0x9e, 0x66, 0x28, 0x60, 0xa8, 0x4d, 0x48, 0xf7, 0x4a, 0x64, 0xea, 0xa7, 0x30, 0x9f,
	0x04, 0x0c, 0x1f, 0x21, 0xb9, 0xef, 0x07, 0x31, 0xe9, 0x25, 0x4c, 0xa5, 0xab, 0x55, 0x3d, 0x5d,
	0x8e, 0xb4, 0x6a, 0xc0, 0x74, 0xbd, 0xdb, 0x72, 0x55, 0x18, 0xde, 0x14, 0x6b, 0xf6, 0x2f, 0x2c,
	0x58, 0x1c, 0xf6, 0xb0, 0xef, 0x81, 0x3c, 0xd5, 0xdf, 0xaf, 0xee, 0xc1, 0xaa, 0x29, 0x6e, 0xed,
	0xc3, 0xfc, 0x50, 0xf8, 0xd2, 0x0b, 0x77, 0x09, 0x16, 0x87, 0x2a, 0xa3, 0x6b, 0xf6, 0xbb, 0x1a,
	0xdc, 0x6a, 0xd1, 0xce, 0x66, 0x14, 0x5d, 0xad, 0x71, 0xf3, 0x79, 0xd5, 0x12, 0xe6, 0xde, 0x11,
	0x33, 0x28, 0x5f, 0x1b, 0x5d, 0xb7, 0x3f, 0x58, 0xe2, 0xa6, 0x68, 0x91, 0x08, 0xef, 0x9f, 0xb6,
	0x63, 0x96, 0x7a, 0x01, 0x43, 0x95, 0x46, 0xd3, 0x1a, 0xc0, 0x5e, 0x97, 0x84, 0x87, 0x7e, 0x16,
	0x30, 0x24, 0xef, 0x4e, 0x6f, 0x4a, 0xac, 0x70, 0x28, 0x7b, 0x1d, 0x66, 0xb2, 0x5e, 0x92, 0xe0,
	0xa4, 0x23, 0x05, 0x44, 0xe6, 0xbd, 0x69, 0xb5, 0x26, 0x44, 0xd6, 0x00, 0x50, 0x12, 0xf9, 0x29,
	0xe9, 0xe2, 0x50, 0x0e, 0xe9, 0x9b, 0xde, 0x14, 0x4a, 0xa2, 0xb6, 0x58, 0x50, 0x03, 0xb6, 0xe0,
	0xa1, 0x0e, 0xe0, 0x8f, 0x13, 0x30, 0xaf, 0xef, 0x44, 0xbe, 0x5d, 0xfd, 0xe6, 0xff, 0x06, 0xac,
	0xa4, 0x31, 0x4b, 0xfd, 0x14, 0x65, 0x98, 0x44, 0x7e, 0x87, 0x1c, 0xf1, 0x0c, 0x26, 0x21, 0xca,
	0x87, 0xb4, 0xcc, 0x45, 0xda, 0x42, 0xe2, 0x7d, 0x2d, 0x20, 0xdc, 0x7f, 0x07, 0x96, 0xf3, 0xea,
	0x28, 0x25, 0xe1, 0x81, 0xdf, 0x45, 0x49, 0x87, 0x1d, 0x88, 0x68, 0x6b, 0xde, 0xe2, 0x40, 0x77,
	0x9b, 0xef, 0xee, 0x88, 0x4d, 0xfb, 0x6b, 0xb0, 0x94, 0x57, 0xa4, 0x2c, 0xc8, 0x98, 0x2f, 0x32,
	0x27, 0x92, 0x50, 0xf3, 0x16, 0x06, 0x7a, 0xbb, 0x7c, 0x73, 0x8b, 0xef, 0xd9, 0x8f, 0x61, 0x71,
	0xc8, 0x5e, 0x12, 0x29, 0xa5, 0x49, 0xa1, 0x64, 0xe7, 0x8c, 0x25, 0x91, 0x50, 0x71, 0xd7, 0x60,
	0xc5, 0x90, 0x23, 0x9d, 0xc3, 0x3f, 0xd7, 0xe0, 0x0b, 0x2d, 0xda, 0xd9, 0x3d, 0x0e, 0xd2, 0x2a,
	0x79, 0xfb, 0x2e, 0x00, 0x45, 0x09, 0xbb, 0x48, 0xc3, 0x2e, 0xbe, 0x3a, 0x6b, 0xdc, 0x56, 0x28,
	0x5a, 0xc5, 0xf5, 0xa6, 0xf8, 0x83, 0x6c, 0xd4, 0x0f, 0x61, 0x2e, 0x43, 0x21, 0xc2, 0x47, 0x28,
	0x52, 0x80, 0xb5, 0x0b, 0x4e, 0x80, 0x61, 0x35, 0xd7, 0x9b, 0xed, 0x2f, 0x48, 0xe0, 0x7d, 0x98,
	0x96, 0x26, 0xf3, 0x7d, 0xb7, 0x5d, 0xbd, 0xef, 0xec, 0xbc, 0xfb, 0xaa, 0xdb, 0x44, 0xfc, 0xaa,
	0xd5, 0x7f, 0x6e, 0xc1, 0x42, 0x8c, 0x13, 0x5f, 0x5a, 0xe7, 0xe7, 0x5d, 0x59, 0x9c, 0x14, 0x16,
	0xbf, 0x57, 0xdd, 0xe2, 0x8a, 0xb4, 0x68, 0x02, 0x75, 0x3d, 0x3b, 0xc6, 0x89, 0xd7, 0x5f, 0x55,
	0x7d, 0x7e, 0x5b, 0xcc, 0x60, 0x5e, 0x46, 0x5d, 0xda, 0x43, 0xd1, 0x1d, 0xcf, 0x50, 0x48, 0xe2,
	0x18, 0x53, 0x8a, 0x49, 0x52, 0xf5, 0x42, 0xe5, 0xa2, 0xa7, 0xf1, 0x1e, 0xe9, 0x2a, 0x5e, 0x9c,
	0x17, 0x15, 0xeb, 0x5c, 0x54, 0xfe, 0x23, 0x8f, 0x59, 0xd1, 0x98, 0xf6, 0xe5, 0x5f, 0x16, 0xdc,
	0xe1, 0xc7, 0x30, 0xe1, 0x67, 0x32, 0x37, 0x8a, 0x3e, 0xea, 0x21, 0xca, 0xae, 0xc4, 0x6d, 0xb1,
	0x0d, 0x93, 0x79, 0x12, 0xd4, 0xac, 0x58, 0x33, 0x4f, 0x6a, 0xab, 0x89, 0x35, 0x12, 0xa7, 0x4a,
	0xc3, 0xdf, 0x2c, 0x58, 0xd3, 0xdd, 0x28, 0xe9, 0x3b, 0xed, 0x37, 0x64, 0xe5, 0x54, 0x6c, 0xc2,
	0x5a, 0xb7, 0x6f, 0xc1, 0xcf, 0x38, 0xab, 0x0a, 0xba, 0xbe, 0x18, 0xc7, 0x72, 0x3c, 0x88, 0xcc,
	0x5c, 0xf7, 0x9c, 0xee, 0xc0, 0x0d, 0x21, 0xb3, 0x43, 0xc2, 0x43, 0x39, 0x24, 0xec, 0x6d, 0x68,
	0x8c, 0x42, 0x84, 0x7c, 0xbc, 0x75, 0xfb, 0x20, 0x35, 0x01, 0xb2, 0x5a, 0x04, 0x79, 0x2a, 0x84,
	0x24, 0x8c, 0x7b, 0x17, 0xea, 0x65, 0x51, 0xa9, 0xc0, 0x7f, 0x29, 0xeb, 0xbf, 0x19, 0x45, 0xea,
	0xa5, 0x45, 0x28, 0x5e, 0x22, 0xe8, 0xa7, 0x7c, 0x56, 0x70, 0x04, 0xe5, 0x1f, 0x5d, 0x9e, 0xb8,
	0x5b, 0x7b, 0x30, 0xfd, 0x64, 0xb5, 0x58, 0xff, 0x21, 0x3b, 0xb3, 0x59, 0xee, 0xa9, 0x5f, 0xa4,
	0x11, 0x67, 0xfa, 0x23, 0xd1, 0x12, 0x77, 0xe6, 0x2e, 0x62, 0xbb, 0x8a, 0xe8, 0x7f, 0x70, 0x90,
	0x21, 0x7a, 0x40, 0xba, 0x91, 0xfd, 0xc5, 0x61, 0x4f, 0xb5, 0x5b, 0x3b, 0x30, 0xc5, 0xfa, 0x42,
	0xaa, 0x59, 0x36, 0x2a, 0xbc, 0x6b, 0x3c, 0x43, 0xa1, 0x37, 0x00, 0xb0, 0x9f, 0xc1, 0x64, 0x16,
	0x30, 0x4c, 0xd4, 0x59, 0xac, 0x8a, 0x24, 0x95, 0x15, 0xdd, 0x36, 0x85, 0xa1, 0x43, 0xfd, 0xd4,
	0x12, 0x63, 0x43, 0x16, 0x53, 0x1e, 0xda, 0xd2, 0x10, 0xaf, 0x7a, 0xe7, 0x49, 0xa6, 0x93, 0x0f,
	0x45, 0x87, 0xf9, 0x7b, 0x0b, 0xe6, 0xd4, 0xb9, 0xed, 0x1f, 0xb9, 0x39, 0x98, 0xc0, 0x91, 0x88,
	0xb0, 0xe6, 0x4d, 0x60, 0xde, 0x09, 0x93, 0x47, 0x41, 0xb7, 0xa7, 0xae, 0xfc, 0x4b, 0x38, 0x21,
	0xb4, 0xed, 0xb7, 0xa1, 0x16, 0xd3, 0x8e, 0xba, 0xbf, 0xdc, 0x62, 0x66, 0x0c, 0x2f, 0x8b, 0x5c,
	0xdc, 0xfd, 0x8b, 0x05, 0xeb, 0x9a, 0xe7, 0xe8, 0xbd, 0x76, 0x46, 0x18, 0x0a, 0x19, 0x26, 0x49,
	0x65, 0x62, 0xf6, 0x13, 0x58, 0x0f, 0x7b, 0x59, 0xc6, 0xef, 0xab, 0x8c, 0x1c, 0x07, 0x89, 0x3f,
	0xe8, 0xf2, 0xe2, 0x31, 0xad, 0x1c, 0x69, 0x5d, 0x21, 0x7b, 0x1c, 0x58, 0x3b, 0xab, 0xcf, 0x96,
	0xfb, 0x06, 0x3c, 0x3c, 0x37, 0x16, 0x5d, 0x99, 0xbf, 0x4e, 0x80, 0xab, 0x47, 0x87, 0x41, 0xba,
	0x3a, 0xa3, 0xcb, 0x60, 0x2d, 0x0e, 0x4e, 0xfe, 0xff, 0x61, 0x3b, 0x71, 0x70, 0x52, 0x12, 0xb2,
	0xbd, 0x03, 0xf7, 0xc6, 0xda, 0x54, 0xfd, 0x22, 0xf8, 0x87, 0xd7, 0x28, 0x07, 0x92, 0xfd, 0xb0,
	0x0e, 0x33, 0x23, 0x44, 0xf2, 0xba, 0x37, 0x8d, 0x72, 0xf4, 0x71, 0x05, 0xa6, 0x30, 0xf5, 0x83,
	0x90, 0xbf, 0x73, 0x08, 0x92, 0x71, 0xd3, 0xbb, 0x89, 0xe9, 0xa6, 0x78, 0x76, 0xdf, 0x84, 0x47,
	0xe7, 0xa7, 0x54, 0x57, 0xe0, 0x4f, 0x16, 0xdc, 0x97, 0xc3, 0xb0, 0x9d, 0x91, 0x23, 0x1c, 0xa1,
	0xec, 0x19, 0xa6, 0x2c, 0xc3, 0x7b, 0x3d, 0x21, 0x7c, 0xd9, 0x39, 0xfd, 0x23, 0x58, 0x88, 0x72,
	0x38, 0x85, 0x69, 0xfd, 0xa8, 0xd8, 0x19, 0x63, 0x6c, 0xcf, 0x47, 0x23, 0x6b, 0xd4, 0x7d, 0x04,
	0x0f, 0xce, 0x77, 0x5a, 0x45, 0xf8, 0xdf, 0xfc, 0xa5, 0xcb, 0x19, 0xd2, 0xb7, 0x10, 0xba, 0xf4,
	0xa5, 0x1b, 0xc0, 0x62, 0x84, 0xf6, 0x83, 0x5e, 0x97, 0xf9, 0xf4, 0x38, 0x48, 0xfd, 0x7d, 0x94,
	0x7f, 0x55, 0xa8, 0x3c, 0xaa, 0x6d, 0x05, 0xa6, 0xdc, 0x12, 0x2f, 0x15, 0xdb, 0x30, 0xc3, 0xc8,
	0x21, 0x4a, 0x7c, 0xfd, 0x05, 0xb1, 0x66, 0x1a, 0x26, 0x4a, 0xe5, 0x03, 0x2e, 0xaa, 0xc2, 0x99,
	0x66, 0x83, 0x87, 0xa1, 0x4b, 0xb9, 0x10, 0xb5, 0x4c, 0xcc, 0x93, 0x4f, 0x6f, 0x41, 0xad, 0x45,
	0x3b, 0x76, 0x00, 0xb7, 0x8a, 0x9f, 0x0b, 0x2f, 0x30, 0xba, 0x9c, 0x47, 0x17, 0x18, 0x6f, 0xca,
	0x94, 0x9d, 0xc2, 0x82, 0xf1, 0x3b, 0xd8, 0xfd, 0xf3, 0x31, 0x84, 0xa0, 0xd3, 0xbc, 0xa0, 0xa0,
	0xb6, 0xe8, 0x01, 0xe4, 0xbe, 0x22, 0xad, 0x19, 0xd4, 0x07, 0xdb, 0xce, 0x97, 0xc7, 0x6e, 0x6b,
	0xcc, 0x1f, 0xc0, 0xcc, 0xd0, 0x57, 0x8e, 0x86, 0x41, 0x2d, 0x2f, 0xe0, 0xdc, 0x3f, 0x47, 0x40,
	0x23, 0x7f, 0x13, 0xae, 0x8b, 0x57, 0xb0, 0x25, 0x83, 0x02, 0xdf, 0x70, 0x1a, 0x25, 0x1b, 0x1a,
	0x21, 0x82, 0xd7, 0x46, 0xa8, 0xfe, 0x3d, 0x83, 0x52, 0x51, 0xc8, 0x79, 0xe3, 0x02, 0x42, 0xda,
	0xca, 0x01, 0xdc, 0x2a, 0x70, 0x5b, 0xfb, 0xa1, 0x41, 0xdf, 0xcc, 0xf3, 0x8d, 0x27, 0xa6, 0x84,
	0x2a, 0xdb, 0x0c, 0xe6, 0x0d, 0x84, 0xd2, 0x7e, 0xcb, 0x04, 0x51, 0x4a, 0xa7, 0x9d, 0x8d, 0x8b,
	0x8a, 0x0f, 0xe2, 0x2b, 0xd0, 0x42, 0x63, 0x7c, 0x66, 0x1e, 0x6b, 0x8c, 0xaf, 0x84, 0x65, 0xf2,
	0xa6, 0x2b, 0x7e, 0x79, 0x31, 0x35, 0x5d, 0x41, 0xc6, 0x68, 0xa2, 0xe4, 0xfb, 0x08, 0x3f, 0x12,
	0x23, 0xdf, 0x46, 0xee, 0x95, 0x26, 0x64, 0x20, 0x64, 0x3c, 0x12, 0x65, 0x5f, 0x10, 0xec, 0x9f,
	0xc1, 0x9d, 0xf2, 0x1f, 0x61, 0xde, 0x2c, 0x45, 0x32, 0x48, 0x3b, 0x6f, 0x57, 0x91, 0xce, 0xcf,
	0x16, 0x23, 0x57, 0x37, 0x35, 0x9f, 0x49, 0xd0, 0x38, 0x5b, 0xc6, 0xd1, 0x66, 0x7e, 0x09, 0xe4,
	0x79, 0xe6, 0xf8, 0x81, 0x90, 0x97, 0x34, 0x0e, 0x04, 0x13, 0x65, 0xb5, 0x7f, 0x6d, 0x41, 0xe3,
	0x3c, 0x56, 0xf4, 0xa4, 0x34, 0x5d, 0xa5, 0x3a, 0xce, 0x7b, 0xd5, 0x75, 0xb4, 0x4f, 0x1f, 0x5b,
	0x50, 0x3f, 0x87, 0xa3, 0x3e, 0x2e, 0x3d, 0x9e, 0x65, 0x2a, 0xce, 0xd7, 0x2b, 0xab, 0x68, 0x87,
	0x7e, 0x63, 0xc1, 0xda, 0x58, 0x0e, 0x60, 0xbf, 0x63, 0xee, 0xc8, 0x73, 0xa9, 0x8e, 0xf3, 0x6e,
	0x75, 0xc5, 0xe2, 0xe0, 0x1a, 0xba, 0x74, 0xc7, 0x0c, 0x2e, 0x13, 0x25, 0x19, 0x33, 0xb8, 0x8c,
	0x77, 0xf9, 0xd6, 0xe6, 0x27, 0x2f, 0xea, 0xd6, 0x67, 0x2f, 0xea, 0xd6, 0x3f, 0x5f, 0xd4, 0xad,
	0x5f, 0xbd, 0xac, 0x5f, 0xfb, 0xec, 0x65, 0xfd, 0xda, 0xdf, 0x5f, 0xd6, 0xaf, 0xfd, 0x30, 0xcf,
	0x70, 0x77, 0xf1, 0x7e, 0x78, 0x10, 0xe0, 0xa4, 0xd9, 0xff, 0x65, 0xf5, 0x44, 0xfc, 0xb6, 0x2a,
	0xf8, 0xc8, 0xde, 0x0d, 0xf1, 0xc3, 0xea, 0x57, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x02, 0xb9,
	0xb5, 0x24, 0xd2, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RemoveLiquidity(ctx context.Context, in *MsgRemoveLiquidity, opts ...grpc.CallOption) (*MsgRemoveLiquidityResponse, error)
	RemoveLiquidityUnits(ctx context.Context, in *MsgRemoveLiquidityUnits, opts ...grpc.CallOption) (*MsgRemoveLiquidityUnitsResponse, error)
	CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error)
	AddLiquidity(ctx context.Context, in *MsgAddLiquidity, opts ...grpc.CallOption) (*MsgAddLiquidityResponse, error)
	Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error)
	DecommissionPool(ctx context.Context, in *MsgDecommissionPool, opts ...grpc.CallOption) (*MsgDecommissionPoolResponse, error)
	UnlockLiquidity(ctx context.Context, in *MsgUnlockLiquidityRequest, opts ...grpc.CallOption) (*MsgUnlockLiquidityResponse, error)
	UpdateRewardsParams(ctx context.Context, in *MsgUpdateRewardsParamsRequest, opts ...grpc.CallOption) (*MsgUpdateRewardsParamsResponse, error)
	AddRewardPeriod(ctx context.Context, in *MsgAddRewardPeriodRequest, opts ...grpc.CallOption) (*MsgAddRewardPeriodResponse, error)
	ModifyPmtpRates(ctx context.Context, in *MsgModifyPmtpRates, opts ...grpc.CallOption) (*MsgModifyPmtpRatesResponse, error)
	UpdatePmtpParams(ctx context.Context, in *MsgUpdatePmtpParams, opts ...grpc.CallOption) (*MsgUpdatePmtpParamsResponse, error)
	UpdateStakingRewardParams(ctx context.Context, in *MsgUpdateStakingRewardParams, opts ...grpc.CallOption) (*MsgUpdateStakingRewardParamsResponse, error)
	SetSymmetryThreshold(ctx context.Context, in *MsgSetSymmetryThreshold, opts ...grpc.CallOption) (*MsgSetSymmetryThresholdResponse, error)
	CancelUnlockLiquidity(ctx context.Context, in *MsgCancelUnlock, opts ...grpc.CallOption) (*MsgCancelUnlockResponse, error)
	UpdateLiquidityProtectionParams(ctx context.Context, in *MsgUpdateLiquidityProtectionParams, opts ...grpc.CallOption) (*MsgUpdateLiquidityProtectionParamsResponse, error)
	ModifyLiquidityProtectionRates(ctx context.Context, in *MsgModifyLiquidityProtectionRates, opts ...grpc.CallOption) (*MsgModifyLiquidityProtectionRatesResponse, error)
	AddProviderDistributionPeriod(ctx context.Context, in *MsgAddProviderDistributionPeriodRequest, opts ...grpc.CallOption) (*MsgAddProviderDistributionPeriodResponse, error)
	UpdateSwapFeeParams(ctx context.Context, in *MsgUpdateSwapFeeParamsRequest, opts ...grpc.CallOption) (*MsgUpdateSwapFeeParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RemoveLiquidity(ctx context.Context, in *MsgRemoveLiquidity, opts ...grpc.CallOption) (*MsgRemoveLiquidityResponse, error) {
	out := new(MsgRemoveLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/RemoveLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveLiquidityUnits(ctx context.Context, in *MsgRemoveLiquidityUnits, opts ...grpc.CallOption) (*MsgRemoveLiquidityUnitsResponse, error) {
	out := new(MsgRemoveLiquidityUnitsResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/RemoveLiquidityUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error) {
	out := new(MsgCreatePoolResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/CreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddLiquidity(ctx context.Context, in *MsgAddLiquidity, opts ...grpc.CallOption) (*MsgAddLiquidityResponse, error) {
	out := new(MsgAddLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/AddLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DecommissionPool(ctx context.Context, in *MsgDecommissionPool, opts ...grpc.CallOption) (*MsgDecommissionPoolResponse, error) {
	out := new(MsgDecommissionPoolResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/DecommissionPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnlockLiquidity(ctx context.Context, in *MsgUnlockLiquidityRequest, opts ...grpc.CallOption) (*MsgUnlockLiquidityResponse, error) {
	out := new(MsgUnlockLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/UnlockLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRewardsParams(ctx context.Context, in *MsgUpdateRewardsParamsRequest, opts ...grpc.CallOption) (*MsgUpdateRewardsParamsResponse, error) {
	out := new(MsgUpdateRewardsParamsResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/UpdateRewardsParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRewardPeriod(ctx context.Context, in *MsgAddRewardPeriodRequest, opts ...grpc.CallOption) (*MsgAddRewardPeriodResponse, error) {
	out := new(MsgAddRewardPeriodResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/AddRewardPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModifyPmtpRates(ctx context.Context, in *MsgModifyPmtpRates, opts ...grpc.CallOption) (*MsgModifyPmtpRatesResponse, error) {
	out := new(MsgModifyPmtpRatesResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/ModifyPmtpRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePmtpParams(ctx context.Context, in *MsgUpdatePmtpParams, opts ...grpc.CallOption) (*MsgUpdatePmtpParamsResponse, error) {
	out := new(MsgUpdatePmtpParamsResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/UpdatePmtpParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStakingRewardParams(ctx context.Context, in *MsgUpdateStakingRewardParams, opts ...grpc.CallOption) (*MsgUpdateStakingRewardParamsResponse, error) {
	out := new(MsgUpdateStakingRewardParamsResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/UpdateStakingRewardParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetSymmetryThreshold(ctx context.Context, in *MsgSetSymmetryThreshold, opts ...grpc.CallOption) (*MsgSetSymmetryThresholdResponse, error) {
	out := new(MsgSetSymmetryThresholdResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/SetSymmetryThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelUnlockLiquidity(ctx context.Context, in *MsgCancelUnlock, opts ...grpc.CallOption) (*MsgCancelUnlockResponse, error) {
	out := new(MsgCancelUnlockResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/CancelUnlockLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLiquidityProtectionParams(ctx context.Context, in *MsgUpdateLiquidityProtectionParams, opts ...grpc.CallOption) (*MsgUpdateLiquidityProtectionParamsResponse, error) {
	out := new(MsgUpdateLiquidityProtectionParamsResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/UpdateLiquidityProtectionParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModifyLiquidityProtectionRates(ctx context.Context, in *MsgModifyLiquidityProtectionRates, opts ...grpc.CallOption) (*MsgModifyLiquidityProtectionRatesResponse, error) {
	out := new(MsgModifyLiquidityProtectionRatesResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/ModifyLiquidityProtectionRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddProviderDistributionPeriod(ctx context.Context, in *MsgAddProviderDistributionPeriodRequest, opts ...grpc.CallOption) (*MsgAddProviderDistributionPeriodResponse, error) {
	out := new(MsgAddProviderDistributionPeriodResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/AddProviderDistributionPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSwapFeeParams(ctx context.Context, in *MsgUpdateSwapFeeParamsRequest, opts ...grpc.CallOption) (*MsgUpdateSwapFeeParamsResponse, error) {
	out := new(MsgUpdateSwapFeeParamsResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/UpdateSwapFeeParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RemoveLiquidity(context.Context, *MsgRemoveLiquidity) (*MsgRemoveLiquidityResponse, error)
	RemoveLiquidityUnits(context.Context, *MsgRemoveLiquidityUnits) (*MsgRemoveLiquidityUnitsResponse, error)
	CreatePool(context.Context, *MsgCreatePool) (*MsgCreatePoolResponse, error)
	AddLiquidity(context.Context, *MsgAddLiquidity) (*MsgAddLiquidityResponse, error)
	Swap(context.Context, *MsgSwap) (*MsgSwapResponse, error)
	DecommissionPool(context.Context, *MsgDecommissionPool) (*MsgDecommissionPoolResponse, error)
	UnlockLiquidity(context.Context, *MsgUnlockLiquidityRequest) (*MsgUnlockLiquidityResponse, error)
	UpdateRewardsParams(context.Context, *MsgUpdateRewardsParamsRequest) (*MsgUpdateRewardsParamsResponse, error)
	AddRewardPeriod(context.Context, *MsgAddRewardPeriodRequest) (*MsgAddRewardPeriodResponse, error)
	ModifyPmtpRates(context.Context, *MsgModifyPmtpRates) (*MsgModifyPmtpRatesResponse, error)
	UpdatePmtpParams(context.Context, *MsgUpdatePmtpParams) (*MsgUpdatePmtpParamsResponse, error)
	UpdateStakingRewardParams(context.Context, *MsgUpdateStakingRewardParams) (*MsgUpdateStakingRewardParamsResponse, error)
	SetSymmetryThreshold(context.Context, *MsgSetSymmetryThreshold) (*MsgSetSymmetryThresholdResponse, error)
	CancelUnlockLiquidity(context.Context, *MsgCancelUnlock) (*MsgCancelUnlockResponse, error)
	UpdateLiquidityProtectionParams(context.Context, *MsgUpdateLiquidityProtectionParams) (*MsgUpdateLiquidityProtectionParamsResponse, error)
	ModifyLiquidityProtectionRates(context.Context, *MsgModifyLiquidityProtectionRates) (*MsgModifyLiquidityProtectionRatesResponse, error)
	AddProviderDistributionPeriod(context.Context, *MsgAddProviderDistributionPeriodRequest) (*MsgAddProviderDistributionPeriodResponse, error)
	UpdateSwapFeeParams(context.Context, *MsgUpdateSwapFeeParamsRequest) (*MsgUpdateSwapFeeParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RemoveLiquidity(ctx context.Context, req *MsgRemoveLiquidity) (*MsgRemoveLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLiquidity not implemented")
}
func (*UnimplementedMsgServer) RemoveLiquidityUnits(ctx context.Context, req *MsgRemoveLiquidityUnits) (*MsgRemoveLiquidityUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLiquidityUnits not implemented")
}
func (*UnimplementedMsgServer) CreatePool(ctx context.Context, req *MsgCreatePool) (*MsgCreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (*UnimplementedMsgServer) AddLiquidity(ctx context.Context, req *MsgAddLiquidity) (*MsgAddLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiquidity not implemented")
}
func (*UnimplementedMsgServer) Swap(ctx context.Context, req *MsgSwap) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (*UnimplementedMsgServer) DecommissionPool(ctx context.Context, req *MsgDecommissionPool) (*MsgDecommissionPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecommissionPool not implemented")
}
func (*UnimplementedMsgServer) UnlockLiquidity(ctx context.Context, req *MsgUnlockLiquidityRequest) (*MsgUnlockLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockLiquidity not implemented")
}
func (*UnimplementedMsgServer) UpdateRewardsParams(ctx context.Context, req *MsgUpdateRewardsParamsRequest) (*MsgUpdateRewardsParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRewardsParams not implemented")
}
func (*UnimplementedMsgServer) AddRewardPeriod(ctx context.Context, req *MsgAddRewardPeriodRequest) (*MsgAddRewardPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRewardPeriod not implemented")
}
func (*UnimplementedMsgServer) ModifyPmtpRates(ctx context.Context, req *MsgModifyPmtpRates) (*MsgModifyPmtpRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPmtpRates not implemented")
}
func (*UnimplementedMsgServer) UpdatePmtpParams(ctx context.Context, req *MsgUpdatePmtpParams) (*MsgUpdatePmtpParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePmtpParams not implemented")
}
func (*UnimplementedMsgServer) UpdateStakingRewardParams(ctx context.Context, req *MsgUpdateStakingRewardParams) (*MsgUpdateStakingRewardParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStakingRewardParams not implemented")
}
func (*UnimplementedMsgServer) SetSymmetryThreshold(ctx context.Context, req *MsgSetSymmetryThreshold) (*MsgSetSymmetryThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSymmetryThreshold not implemented")
}
func (*UnimplementedMsgServer) CancelUnlockLiquidity(ctx context.Context, req *MsgCancelUnlock) (*MsgCancelUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUnlockLiquidity not implemented")
}
func (*UnimplementedMsgServer) UpdateLiquidityProtectionParams(ctx context.Context, req *MsgUpdateLiquidityProtectionParams) (*MsgUpdateLiquidityProtectionParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLiquidityProtectionParams not implemented")
}
func (*UnimplementedMsgServer) ModifyLiquidityProtectionRates(ctx context.Context, req *MsgModifyLiquidityProtectionRates) (*MsgModifyLiquidityProtectionRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyLiquidityProtectionRates not implemented")
}
func (*UnimplementedMsgServer) AddProviderDistributionPeriod(ctx context.Context, req *MsgAddProviderDistributionPeriodRequest) (*MsgAddProviderDistributionPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProviderDistributionPeriod not implemented")
}
func (*UnimplementedMsgServer) UpdateSwapFeeParams(ctx context.Context, req *MsgUpdateSwapFeeParamsRequest) (*MsgUpdateSwapFeeParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwapFeeParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RemoveLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/RemoveLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveLiquidity(ctx, req.(*MsgRemoveLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveLiquidityUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveLiquidityUnits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveLiquidityUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/RemoveLiquidityUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveLiquidityUnits(ctx, req.(*MsgRemoveLiquidityUnits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePool(ctx, req.(*MsgCreatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/AddLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLiquidity(ctx, req.(*MsgAddLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Swap(ctx, req.(*MsgSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DecommissionPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDecommissionPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DecommissionPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/DecommissionPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DecommissionPool(ctx, req.(*MsgDecommissionPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnlockLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlockLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlockLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/UnlockLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlockLiquidity(ctx, req.(*MsgUnlockLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRewardsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRewardsParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRewardsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/UpdateRewardsParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRewardsParams(ctx, req.(*MsgUpdateRewardsParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRewardPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRewardPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRewardPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/AddRewardPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRewardPeriod(ctx, req.(*MsgAddRewardPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModifyPmtpRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModifyPmtpRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModifyPmtpRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/ModifyPmtpRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModifyPmtpRates(ctx, req.(*MsgModifyPmtpRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePmtpParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePmtpParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePmtpParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/UpdatePmtpParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePmtpParams(ctx, req.(*MsgUpdatePmtpParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStakingRewardParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStakingRewardParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStakingRewardParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/UpdateStakingRewardParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStakingRewardParams(ctx, req.(*MsgUpdateStakingRewardParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetSymmetryThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetSymmetryThreshold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetSymmetryThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/SetSymmetryThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetSymmetryThreshold(ctx, req.(*MsgSetSymmetryThreshold))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelUnlockLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelUnlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelUnlockLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/CancelUnlockLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelUnlockLiquidity(ctx, req.(*MsgCancelUnlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLiquidityProtectionParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLiquidityProtectionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLiquidityProtectionParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/UpdateLiquidityProtectionParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLiquidityProtectionParams(ctx, req.(*MsgUpdateLiquidityProtectionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModifyLiquidityProtectionRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModifyLiquidityProtectionRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModifyLiquidityProtectionRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/ModifyLiquidityProtectionRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModifyLiquidityProtectionRates(ctx, req.(*MsgModifyLiquidityProtectionRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddProviderDistributionPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddProviderDistributionPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddProviderDistributionPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/AddProviderDistributionPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddProviderDistributionPeriod(ctx, req.(*MsgAddProviderDistributionPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSwapFeeParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSwapFeeParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSwapFeeParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/UpdateSwapFeeParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSwapFeeParams(ctx, req.(*MsgUpdateSwapFeeParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sifnode.clp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveLiquidity",
			Handler:    _Msg_RemoveLiquidity_Handler,
		},
		{
			MethodName: "RemoveLiquidityUnits",
			Handler:    _Msg_RemoveLiquidityUnits_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _Msg_CreatePool_Handler,
		},
		{
			MethodName: "AddLiquidity",
			Handler:    _Msg_AddLiquidity_Handler,
		},
		{
			MethodName: "Swap",
			Handler:    _Msg_Swap_Handler,
		},
		{
			MethodName: "DecommissionPool",
			Handler:    _Msg_DecommissionPool_Handler,
		},
		{
			MethodName: "UnlockLiquidity",
			Handler:    _Msg_UnlockLiquidity_Handler,
		},
		{
			MethodName: "UpdateRewardsParams",
			Handler:    _Msg_UpdateRewardsParams_Handler,
		},
		{
			MethodName: "AddRewardPeriod",
			Handler:    _Msg_AddRewardPeriod_Handler,
		},
		{
			MethodName: "ModifyPmtpRates",
			Handler:    _Msg_ModifyPmtpRates_Handler,
		},
		{
			MethodName: "UpdatePmtpParams",
			Handler:    _Msg_UpdatePmtpParams_Handler,
		},
		{
			MethodName: "UpdateStakingRewardParams",
			Handler:    _Msg_UpdateStakingRewardParams_Handler,
		},
		{
			MethodName: "SetSymmetryThreshold",
			Handler:    _Msg_SetSymmetryThreshold_Handler,
		},
		{
			MethodName: "CancelUnlockLiquidity",
			Handler:    _Msg_CancelUnlockLiquidity_Handler,
		},
		{
			MethodName: "UpdateLiquidityProtectionParams",
			Handler:    _Msg_UpdateLiquidityProtectionParams_Handler,
		},
		{
			MethodName: "ModifyLiquidityProtectionRates",
			Handler:    _Msg_ModifyLiquidityProtectionRates_Handler,
		},
		{
			MethodName: "AddProviderDistributionPeriod",
			Handler:    _Msg_AddProviderDistributionPeriod_Handler,
		},
		{
			MethodName: "UpdateSwapFeeParams",
			Handler:    _Msg_UpdateSwapFeeParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sifnode/clp/v1/tx.proto",
}

func (m *MsgUpdateStakingRewardParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakingRewardParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakingRewardParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Params.Size()
		i -= size
		if _, err := m.Params.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Minter.Size()
		i -= size
		if _, err := m.Minter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakingRewardParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakingRewardParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakingRewardParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Asymmetry.Size()
		i -= size
		if _, err := m.Asymmetry.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.WBasisPoints.Size()
		i -= size
		if _, err := m.WBasisPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveLiquidityUnits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidityUnits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidityUnits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WithdrawUnits.Size()
		i -= size
		if _, err := m.WithdrawUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveLiquidityUnitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidityUnitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidityUnitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExternalAssetAmount.Size()
		i -= size
		if _, err := m.ExternalAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NativeAssetAmount.Size()
		i -= size
		if _, err := m.NativeAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExternalAssetAmount.Size()
		i -= size
		if _, err := m.ExternalAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NativeAssetAmount.Size()
		i -= size
		if _, err := m.NativeAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgModifyPmtpRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyPmtpRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyPmtpRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndPolicy {
		i--
		if m.EndPolicy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunningRate) > 0 {
		i -= len(m.RunningRate)
		copy(dAtA[i:], m.RunningRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunningRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockRate) > 0 {
		i -= len(m.BlockRate)
		copy(dAtA[i:], m.BlockRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockRate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgModifyPmtpRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyPmtpRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyPmtpRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePmtpParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePmtpParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePmtpParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PmtpPeriodEndBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PmtpPeriodEndBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.PmtpPeriodStartBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PmtpPeriodStartBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.PmtpPeriodEpochLength != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PmtpPeriodEpochLength))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PmtpPeriodGovernanceRate) > 0 {
		i -= len(m.PmtpPeriodGovernanceRate)
		copy(dAtA[i:], m.PmtpPeriodGovernanceRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PmtpPeriodGovernanceRate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePmtpParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePmtpParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePmtpParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinReceivingAmount.Size()
		i -= size
		if _, err := m.MinReceivingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.SentAmount.Size()
		i -= size
		if _, err := m.SentAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ReceivedAsset != nil {
		{
			size, err := m.ReceivedAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SentAsset != nil {
		{
			size, err := m.SentAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDecommissionPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecommissionPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecommissionPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDecommissionPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecommissionPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecommissionPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnlockLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Units.Size()
		i -= size
		if _, err := m.Units.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnlockLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRewardsParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRewardsParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRewardsParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiquidityRemovalCancelPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LiquidityRemovalCancelPeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidityRemovalLockPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LiquidityRemovalLockPeriod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRewardsParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRewardsParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRewardsParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardPeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardPeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardPeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPeriods) > 0 {
		for iNdEx := len(m.RewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetSymmetryThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSymmetryThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSymmetryThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Threshold.Size()
		i -= size
		if _, err := m.Threshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetSymmetryThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSymmetryThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSymmetryThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Units.Size()
		i -= size
		if _, err := m.Units.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelUnlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelUnlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelUnlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemovalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgModifyLiquidityProtectionRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyLiquidityProtectionRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyLiquidityProtectionRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CurrentRowanLiquidityThreshold.Size()
		i -= size
		if _, err := m.CurrentRowanLiquidityThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgModifyLiquidityProtectionRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyLiquidityProtectionRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyLiquidityProtectionRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLiquidityProtectionParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLiquidityProtectionParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLiquidityProtectionParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.MaxRowanLiquidityThresholdAsset) > 0 {
		i -= len(m.MaxRowanLiquidityThresholdAsset)
		copy(dAtA[i:], m.MaxRowanLiquidityThresholdAsset)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxRowanLiquidityThresholdAsset)))
		i--
		dAtA[i] = 0x22
	}
	if m.EpochLength != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MaxRowanLiquidityThreshold.Size()
		i -= size
		if _, err := m.MaxRowanLiquidityThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLiquidityProtectionParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLiquidityProtectionParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLiquidityProtectionParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddProviderDistributionPeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddProviderDistributionPeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddProviderDistributionPeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributionPeriods) > 0 {
		for iNdEx := len(m.DistributionPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributionPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddProviderDistributionPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddProviderDistributionPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddProviderDistributionPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSwapFeeParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSwapFeeParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSwapFeeParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenParams) > 0 {
		for iNdEx := len(m.TokenParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.DefaultSwapFeeRate.Size()
		i -= size
		if _, err := m.DefaultSwapFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSwapFeeParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSwapFeeParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSwapFeeParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateStakingRewardParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Minter.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateStakingRewardParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.WBasisPoints.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Asymmetry.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRemoveLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveLiquidityUnits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.WithdrawUnits.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRemoveLiquidityUnitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.NativeAssetAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ExternalAssetAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.NativeAssetAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ExternalAssetAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgModifyPmtpRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunningRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EndPolicy {
		n += 2
	}
	return n
}

func (m *MsgModifyPmtpRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePmtpParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PmtpPeriodGovernanceRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PmtpPeriodEpochLength != 0 {
		n += 1 + sovTx(uint64(m.PmtpPeriodEpochLength))
	}
	if m.PmtpPeriodStartBlock != 0 {
		n += 1 + sovTx(uint64(m.PmtpPeriodStartBlock))
	}
	if m.PmtpPeriodEndBlock != 0 {
		n += 1 + sovTx(uint64(m.PmtpPeriodEndBlock))
	}
	return n
}

func (m *MsgUpdatePmtpParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SentAsset != nil {
		l = m.SentAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReceivedAsset != nil {
		l = m.ReceivedAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SentAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinReceivingAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDecommissionPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDecommissionPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnlockLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Units.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUnlockLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRewardsParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LiquidityRemovalLockPeriod != 0 {
		n += 1 + sovTx(uint64(m.LiquidityRemovalLockPeriod))
	}
	if m.LiquidityRemovalCancelPeriod != 0 {
		n += 1 + sovTx(uint64(m.LiquidityRemovalCancelPeriod))
	}
	return n
}

func (m *MsgUpdateRewardsParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRewardPeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RewardPeriods) > 0 {
		for _, e := range m.RewardPeriods {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddRewardPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetSymmetryThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Threshold.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Ratio.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetSymmetryThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Units.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCancelUnlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemovalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgModifyLiquidityProtectionRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CurrentRowanLiquidityThreshold.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgModifyLiquidityProtectionRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateLiquidityProtectionParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxRowanLiquidityThreshold.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.EpochLength != 0 {
		n += 1 + sovTx(uint64(m.EpochLength))
	}
	l = len(m.MaxRowanLiquidityThresholdAsset)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *MsgUpdateLiquidityProtectionParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddProviderDistributionPeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DistributionPeriods) > 0 {
		for _, e := range m.DistributionPeriods {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddProviderDistributionPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSwapFeeParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.DefaultSwapFeeRate.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TokenParams) > 0 {
		for _, e := range m.TokenParams {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateSwapFeeParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateStakingRewardParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakingRewardParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakingRewardParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Minter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakingRewardParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakingRewardParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakingRewardParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WBasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WBasisPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asymmetry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asymmetry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveLiquidityUnits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidityUnits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidityUnits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveLiquidityUnitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidityUnitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidityUnitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyPmtpRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyPmtpRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyPmtpRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunningRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPolicy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndPolicy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyPmtpRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyPmtpRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyPmtpRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePmtpParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePmtpParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePmtpParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodGovernanceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PmtpPeriodGovernanceRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodEpochLength", wireType)
			}
			m.PmtpPeriodEpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodEpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodStartBlock", wireType)
			}
			m.PmtpPeriodStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodEndBlock", wireType)
			}
			m.PmtpPeriodEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodEndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePmtpParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePmtpParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePmtpParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SentAsset == nil {
				m.SentAsset = &Asset{}
			}
			if err := m.SentAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceivedAsset == nil {
				m.ReceivedAsset = &Asset{}
			}
			if err := m.ReceivedAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReceivingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinReceivingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecommissionPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecommissionPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecommissionPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecommissionPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecommissionPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecommissionPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Units.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRewardsParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRewardsParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRewardsParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityRemovalLockPeriod", wireType)
			}
			m.LiquidityRemovalLockPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityRemovalLockPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityRemovalCancelPeriod", wireType)
			}
			m.LiquidityRemovalCancelPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityRemovalCancelPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRewardsParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRewardsParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRewardsParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardPeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardPeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardPeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPeriods = append(m.RewardPeriods, &RewardPeriod{})
			if err := m.RewardPeriods[len(m.RewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSymmetryThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSymmetryThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSymmetryThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSymmetryThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSymmetryThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSymmetryThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Units.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelUnlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelUnlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelUnlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgRemoveLiquidity{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyLiquidityProtectionRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyLiquidityProtectionRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyLiquidityProtectionRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRowanLiquidityThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRowanLiquidityThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyLiquidityProtectionRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyLiquidityProtectionRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyLiquidityProtectionRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLiquidityProtectionParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLiquidityProtectionParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLiquidityProtectionParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRowanLiquidityThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRowanLiquidityThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRowanLiquidityThresholdAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxRowanLiquidityThresholdAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLiquidityProtectionParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLiquidityProtectionParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLiquidityProtectionParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddProviderDistributionPeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddProviderDistributionPeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddProviderDistributionPeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionPeriods = append(m.DistributionPeriods, &ProviderDistributionPeriod{})
			if err := m.DistributionPeriods[len(m.DistributionPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddProviderDistributionPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddProviderDistributionPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddProviderDistributionPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSwapFeeParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSwapFeeParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSwapFeeParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSwapFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultSwapFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenParams = append(m.TokenParams, &SwapFeeTokenParams{})
			if err := m.TokenParams[len(m.TokenParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSwapFeeParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSwapFeeParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSwapFeeParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
