// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/clp/v1/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolReq struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *PoolReq) Reset()         { *m = PoolReq{} }
func (m *PoolReq) String() string { return proto.CompactTextString(m) }
func (*PoolReq) ProtoMessage()    {}
func (*PoolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{0}
}
func (m *PoolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolReq.Merge(m, src)
}
func (m *PoolReq) XXX_Size() int {
	return m.Size()
}
func (m *PoolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolReq.DiscardUnknown(m)
}

var xxx_messageInfo_PoolReq proto.InternalMessageInfo

type PoolRes struct {
	Pool             *Pool  `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	ClpModuleAddress string `protobuf:"bytes,2,opt,name=clp_module_address,json=clpModuleAddress,proto3" json:"clp_module_address,omitempty"`
	Height           int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *PoolRes) Reset()         { *m = PoolRes{} }
func (m *PoolRes) String() string { return proto.CompactTextString(m) }
func (*PoolRes) ProtoMessage()    {}
func (*PoolRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{1}
}
func (m *PoolRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolRes.Merge(m, src)
}
func (m *PoolRes) XXX_Size() int {
	return m.Size()
}
func (m *PoolRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolRes.DiscardUnknown(m)
}

var xxx_messageInfo_PoolRes proto.InternalMessageInfo

func (m *PoolRes) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *PoolRes) GetClpModuleAddress() string {
	if m != nil {
		return m.ClpModuleAddress
	}
	return ""
}

func (m *PoolRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type PoolsReq struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *PoolsReq) Reset()         { *m = PoolsReq{} }
func (m *PoolsReq) String() string { return proto.CompactTextString(m) }
func (*PoolsReq) ProtoMessage()    {}
func (*PoolsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{2}
}
func (m *PoolsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsReq.Merge(m, src)
}
func (m *PoolsReq) XXX_Size() int {
	return m.Size()
}
func (m *PoolsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsReq.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsReq proto.InternalMessageInfo

func (m *PoolsReq) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type PoolsRes struct {
	Pools            []*Pool             `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	ClpModuleAddress string              `protobuf:"bytes,2,opt,name=clp_module_address,json=clpModuleAddress,proto3" json:"clp_module_address,omitempty"`
	Height           int64               `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Pagination       *query.PageResponse `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *PoolsRes) Reset()         { *m = PoolsRes{} }
func (m *PoolsRes) String() string { return proto.CompactTextString(m) }
func (*PoolsRes) ProtoMessage()    {}
func (*PoolsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{3}
}
func (m *PoolsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsRes.Merge(m, src)
}
func (m *PoolsRes) XXX_Size() int {
	return m.Size()
}
func (m *PoolsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsRes.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsRes proto.InternalMessageInfo

func (m *PoolsRes) GetPools() []*Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *PoolsRes) GetClpModuleAddress() string {
	if m != nil {
		return m.ClpModuleAddress
	}
	return ""
}

func (m *PoolsRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PoolsRes) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type LiquidityProviderReq struct {
	Symbol    string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	LpAddress string `protobuf:"bytes,2,opt,name=lp_address,json=lpAddress,proto3" json:"lp_address,omitempty"`
}

func (m *LiquidityProviderReq) Reset()         { *m = LiquidityProviderReq{} }
func (m *LiquidityProviderReq) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderReq) ProtoMessage()    {}
func (*LiquidityProviderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{4}
}
func (m *LiquidityProviderReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderReq.Merge(m, src)
}
func (m *LiquidityProviderReq) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderReq proto.InternalMessageInfo

type LiquidityProviderRes struct {
	LiquidityProvider    *LiquidityProvider `protobuf:"bytes,1,opt,name=liquidity_provider,json=liquidityProvider,proto3" json:"liquidity_provider,omitempty"`
	NativeAssetBalance   string             `protobuf:"bytes,2,opt,name=native_asset_balance,json=nativeAssetBalance,proto3" json:"native_asset_balance,omitempty"`
	ExternalAssetBalance string             `protobuf:"bytes,3,opt,name=external_asset_balance,json=externalAssetBalance,proto3" json:"external_asset_balance,omitempty"`
	Height               int64              `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *LiquidityProviderRes) Reset()         { *m = LiquidityProviderRes{} }
func (m *LiquidityProviderRes) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderRes) ProtoMessage()    {}
func (*LiquidityProviderRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{5}
}
func (m *LiquidityProviderRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderRes.Merge(m, src)
}
func (m *LiquidityProviderRes) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderRes) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderRes.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderRes proto.InternalMessageInfo

func (m *LiquidityProviderRes) GetLiquidityProvider() *LiquidityProvider {
	if m != nil {
		return m.LiquidityProvider
	}
	return nil
}

func (m *LiquidityProviderRes) GetNativeAssetBalance() string {
	if m != nil {
		return m.NativeAssetBalance
	}
	return ""
}

func (m *LiquidityProviderRes) GetExternalAssetBalance() string {
	if m != nil {
		return m.ExternalAssetBalance
	}
	return ""
}

func (m *LiquidityProviderRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type AssetListReq struct {
	LpAddress  string             `protobuf:"bytes,1,opt,name=lp_address,json=lpAddress,proto3" json:"lp_address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *AssetListReq) Reset()         { *m = AssetListReq{} }
func (m *AssetListReq) String() string { return proto.CompactTextString(m) }
func (*AssetListReq) ProtoMessage()    {}
func (*AssetListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{6}
}
func (m *AssetListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetListReq.Merge(m, src)
}
func (m *AssetListReq) XXX_Size() int {
	return m.Size()
}
func (m *AssetListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetListReq.DiscardUnknown(m)
}

var xxx_messageInfo_AssetListReq proto.InternalMessageInfo

type AssetListRes struct {
	Assets     []*Asset            `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	Height     int64               `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *AssetListRes) Reset()         { *m = AssetListRes{} }
func (m *AssetListRes) String() string { return proto.CompactTextString(m) }
func (*AssetListRes) ProtoMessage()    {}
func (*AssetListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{7}
}
func (m *AssetListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetListRes.Merge(m, src)
}
func (m *AssetListRes) XXX_Size() int {
	return m.Size()
}
func (m *AssetListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetListRes.DiscardUnknown(m)
}

var xxx_messageInfo_AssetListRes proto.InternalMessageInfo

func (m *AssetListRes) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *AssetListRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *AssetListRes) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type LiquidityProviderDataReq struct {
	LpAddress  string             `protobuf:"bytes,1,opt,name=lp_address,json=lpAddress,proto3" json:"lp_address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *LiquidityProviderDataReq) Reset()         { *m = LiquidityProviderDataReq{} }
func (m *LiquidityProviderDataReq) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderDataReq) ProtoMessage()    {}
func (*LiquidityProviderDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{8}
}
func (m *LiquidityProviderDataReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderDataReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderDataReq.Merge(m, src)
}
func (m *LiquidityProviderDataReq) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderDataReq proto.InternalMessageInfo

type LiquidityProviderDataRes struct {
	LiquidityProviderData []*LiquidityProviderData `protobuf:"bytes,1,rep,name=liquidity_provider_data,json=liquidityProviderData,proto3" json:"liquidity_provider_data,omitempty"`
	Height                int64                    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Pagination            *query.PageRequest       `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *LiquidityProviderDataRes) Reset()         { *m = LiquidityProviderDataRes{} }
func (m *LiquidityProviderDataRes) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderDataRes) ProtoMessage()    {}
func (*LiquidityProviderDataRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{9}
}
func (m *LiquidityProviderDataRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderDataRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderDataRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderDataRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderDataRes.Merge(m, src)
}
func (m *LiquidityProviderDataRes) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderDataRes) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderDataRes.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderDataRes proto.InternalMessageInfo

func (m *LiquidityProviderDataRes) GetLiquidityProviderData() []*LiquidityProviderData {
	if m != nil {
		return m.LiquidityProviderData
	}
	return nil
}

func (m *LiquidityProviderDataRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LiquidityProviderDataRes) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type LiquidityProviderListReq struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *LiquidityProviderListReq) Reset()         { *m = LiquidityProviderListReq{} }
func (m *LiquidityProviderListReq) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderListReq) ProtoMessage()    {}
func (*LiquidityProviderListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{10}
}
func (m *LiquidityProviderListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderListReq.Merge(m, src)
}
func (m *LiquidityProviderListReq) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderListReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderListReq proto.InternalMessageInfo

type LiquidityProviderListRes struct {
	LiquidityProviders []*LiquidityProvider `protobuf:"bytes,1,rep,name=liquidity_providers,json=liquidityProviders,proto3" json:"liquidity_providers,omitempty"`
	Height             int64                `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *LiquidityProviderListRes) Reset()         { *m = LiquidityProviderListRes{} }
func (m *LiquidityProviderListRes) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderListRes) ProtoMessage()    {}
func (*LiquidityProviderListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{11}
}
func (m *LiquidityProviderListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderListRes.Merge(m, src)
}
func (m *LiquidityProviderListRes) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderListRes.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderListRes proto.InternalMessageInfo

func (m *LiquidityProviderListRes) GetLiquidityProviders() []*LiquidityProvider {
	if m != nil {
		return m.LiquidityProviders
	}
	return nil
}

func (m *LiquidityProviderListRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LiquidityProviderListRes) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type LiquidityProvidersReq struct {
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *LiquidityProvidersReq) Reset()         { *m = LiquidityProvidersReq{} }
func (m *LiquidityProvidersReq) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvidersReq) ProtoMessage()    {}
func (*LiquidityProvidersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{12}
}
func (m *LiquidityProvidersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProvidersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProvidersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProvidersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvidersReq.Merge(m, src)
}
func (m *LiquidityProvidersReq) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProvidersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvidersReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvidersReq proto.InternalMessageInfo

type LiquidityProvidersRes struct {
	LiquidityProviders []*LiquidityProvider `protobuf:"bytes,1,rep,name=liquidity_providers,json=liquidityProviders,proto3" json:"liquidity_providers,omitempty"`
	Height             int64                `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Pagination         *query.PageResponse  `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *LiquidityProvidersRes) Reset()         { *m = LiquidityProvidersRes{} }
func (m *LiquidityProvidersRes) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvidersRes) ProtoMessage()    {}
func (*LiquidityProvidersRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{13}
}
func (m *LiquidityProvidersRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProvidersRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProvidersRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProvidersRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvidersRes.Merge(m, src)
}
func (m *LiquidityProvidersRes) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProvidersRes) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvidersRes.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvidersRes proto.InternalMessageInfo

func (m *LiquidityProvidersRes) GetLiquidityProviders() []*LiquidityProvider {
	if m != nil {
		return m.LiquidityProviders
	}
	return nil
}

func (m *LiquidityProvidersRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LiquidityProvidersRes) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ParamsReq struct {
}

func (m *ParamsReq) Reset()         { *m = ParamsReq{} }
func (m *ParamsReq) String() string { return proto.CompactTextString(m) }
func (*ParamsReq) ProtoMessage()    {}
func (*ParamsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{14}
}
func (m *ParamsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsReq.Merge(m, src)
}
func (m *ParamsReq) XXX_Size() int {
	return m.Size()
}
func (m *ParamsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsReq proto.InternalMessageInfo

type ParamsRes struct {
	Params                 *Params                                `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	SymmetryThreshold      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=symmetry_threshold,json=symmetryThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"symmetry_threshold"`
	SymmetryRatioThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=symmetry_ratio_threshold,json=symmetryRatioThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"symmetry_ratio_threshold"`
}

func (m *ParamsRes) Reset()         { *m = ParamsRes{} }
func (m *ParamsRes) String() string { return proto.CompactTextString(m) }
func (*ParamsRes) ProtoMessage()    {}
func (*ParamsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{15}
}
func (m *ParamsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsRes.Merge(m, src)
}
func (m *ParamsRes) XXX_Size() int {
	return m.Size()
}
func (m *ParamsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsRes proto.InternalMessageInfo

func (m *ParamsRes) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

type RewardParamsReq struct {
}

func (m *RewardParamsReq) Reset()         { *m = RewardParamsReq{} }
func (m *RewardParamsReq) String() string { return proto.CompactTextString(m) }
func (*RewardParamsReq) ProtoMessage()    {}
func (*RewardParamsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{16}
}
func (m *RewardParamsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardParamsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardParamsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardParamsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardParamsReq.Merge(m, src)
}
func (m *RewardParamsReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardParamsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardParamsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardParamsReq proto.InternalMessageInfo

type RewardParamsRes struct {
	Params *RewardParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *RewardParamsRes) Reset()         { *m = RewardParamsRes{} }
func (m *RewardParamsRes) String() string { return proto.CompactTextString(m) }
func (*RewardParamsRes) ProtoMessage()    {}
func (*RewardParamsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{17}
}
func (m *RewardParamsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardParamsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardParamsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardParamsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardParamsRes.Merge(m, src)
}
func (m *RewardParamsRes) XXX_Size() int {
	return m.Size()
}
func (m *RewardParamsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardParamsRes.DiscardUnknown(m)
}

var xxx_messageInfo_RewardParamsRes proto.InternalMessageInfo

func (m *RewardParamsRes) GetParams() *RewardParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type PmtpParamsReq struct {
}

func (m *PmtpParamsReq) Reset()         { *m = PmtpParamsReq{} }
func (m *PmtpParamsReq) String() string { return proto.CompactTextString(m) }
func (*PmtpParamsReq) ProtoMessage()    {}
func (*PmtpParamsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{18}
}
func (m *PmtpParamsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PmtpParamsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PmtpParamsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PmtpParamsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PmtpParamsReq.Merge(m, src)
}
func (m *PmtpParamsReq) XXX_Size() int {
	return m.Size()
}
func (m *PmtpParamsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PmtpParamsReq.DiscardUnknown(m)
}

var xxx_messageInfo_PmtpParamsReq proto.InternalMessageInfo

type PmtpParamsRes struct {
	Params         *PmtpParams     `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	PmtpRateParams *PmtpRateParams `protobuf:"bytes,2,opt,name=pmtp_rate_params,json=pmtpRateParams,proto3" json:"pmtp_rate_params,omitempty"`
	PmtpEpoch      *PmtpEpoch      `protobuf:"bytes,3,opt,name=pmtp_epoch,json=pmtpEpoch,proto3" json:"pmtp_epoch,omitempty"`
	Height         int64           `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *PmtpParamsRes) Reset()         { *m = PmtpParamsRes{} }
func (m *PmtpParamsRes) String() string { return proto.CompactTextString(m) }
func (*PmtpParamsRes) ProtoMessage()    {}
func (*PmtpParamsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{19}
}
func (m *PmtpParamsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PmtpParamsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PmtpParamsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PmtpParamsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PmtpParamsRes.Merge(m, src)
}
func (m *PmtpParamsRes) XXX_Size() int {
	return m.Size()
}
func (m *PmtpParamsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PmtpParamsRes.DiscardUnknown(m)
}

var xxx_messageInfo_PmtpParamsRes proto.InternalMessageInfo

func (m *PmtpParamsRes) GetParams() *PmtpParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *PmtpParamsRes) GetPmtpRateParams() *PmtpRateParams {
	if m != nil {
		return m.PmtpRateParams
	}
	return nil
}

func (m *PmtpParamsRes) GetPmtpEpoch() *PmtpEpoch {
	if m != nil {
		return m.PmtpEpoch
	}
	return nil
}

func (m *PmtpParamsRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type LiquidityProtectionParamsReq struct {
}

func (m *LiquidityProtectionParamsReq) Reset()         { *m = LiquidityProtectionParamsReq{} }
func (m *LiquidityProtectionParamsReq) String() string { return proto.CompactTextString(m) }
func (*LiquidityProtectionParamsReq) ProtoMessage()    {}
func (*LiquidityProtectionParamsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{20}
}
func (m *LiquidityProtectionParamsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProtectionParamsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProtectionParamsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProtectionParamsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProtectionParamsReq.Merge(m, src)
}
func (m *LiquidityProtectionParamsReq) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProtectionParamsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProtectionParamsReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProtectionParamsReq proto.InternalMessageInfo

type LiquidityProtectionParamsRes struct {
	Params     *LiquidityProtectionParams     `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	RateParams *LiquidityProtectionRateParams `protobuf:"bytes,2,opt,name=rate_params,json=rateParams,proto3" json:"rate_params,omitempty"`
	Height     int64                          `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *LiquidityProtectionParamsRes) Reset()         { *m = LiquidityProtectionParamsRes{} }
func (m *LiquidityProtectionParamsRes) String() string { return proto.CompactTextString(m) }
func (*LiquidityProtectionParamsRes) ProtoMessage()    {}
func (*LiquidityProtectionParamsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{21}
}
func (m *LiquidityProtectionParamsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProtectionParamsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProtectionParamsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProtectionParamsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProtectionParamsRes.Merge(m, src)
}
func (m *LiquidityProtectionParamsRes) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProtectionParamsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProtectionParamsRes.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProtectionParamsRes proto.InternalMessageInfo

func (m *LiquidityProtectionParamsRes) GetParams() *LiquidityProtectionParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *LiquidityProtectionParamsRes) GetRateParams() *LiquidityProtectionRateParams {
	if m != nil {
		return m.RateParams
	}
	return nil
}

func (m *LiquidityProtectionParamsRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ProviderDistributionParamsReq struct {
}

func (m *ProviderDistributionParamsReq) Reset()         { *m = ProviderDistributionParamsReq{} }
func (m *ProviderDistributionParamsReq) String() string { return proto.CompactTextString(m) }
func (*ProviderDistributionParamsReq) ProtoMessage()    {}
func (*ProviderDistributionParamsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{22}
}
func (m *ProviderDistributionParamsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderDistributionParamsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderDistributionParamsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderDistributionParamsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderDistributionParamsReq.Merge(m, src)
}
func (m *ProviderDistributionParamsReq) XXX_Size() int {
	return m.Size()
}
func (m *ProviderDistributionParamsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderDistributionParamsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderDistributionParamsReq proto.InternalMessageInfo

type ProviderDistributionParamsRes struct {
	Params *ProviderDistributionParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *ProviderDistributionParamsRes) Reset()         { *m = ProviderDistributionParamsRes{} }
func (m *ProviderDistributionParamsRes) String() string { return proto.CompactTextString(m) }
func (*ProviderDistributionParamsRes) ProtoMessage()    {}
func (*ProviderDistributionParamsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{23}
}
func (m *ProviderDistributionParamsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderDistributionParamsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderDistributionParamsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderDistributionParamsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderDistributionParamsRes.Merge(m, src)
}
func (m *ProviderDistributionParamsRes) XXX_Size() int {
	return m.Size()
}
func (m *ProviderDistributionParamsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderDistributionParamsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderDistributionParamsRes proto.InternalMessageInfo

func (m *ProviderDistributionParamsRes) GetParams() *ProviderDistributionParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*PoolReq)(nil), "sifnode.clp.v1.PoolReq")
	proto.RegisterType((*PoolRes)(nil), "sifnode.clp.v1.PoolRes")
	proto.RegisterType((*PoolsReq)(nil), "sifnode.clp.v1.PoolsReq")
	proto.RegisterType((*PoolsRes)(nil), "sifnode.clp.v1.PoolsRes")
	proto.RegisterType((*LiquidityProviderReq)(nil), "sifnode.clp.v1.LiquidityProviderReq")
	proto.RegisterType((*LiquidityProviderRes)(nil), "sifnode.clp.v1.LiquidityProviderRes")
	proto.RegisterType((*AssetListReq)(nil), "sifnode.clp.v1.AssetListReq")
	proto.RegisterType((*AssetListRes)(nil), "sifnode.clp.v1.AssetListRes")
	proto.RegisterType((*LiquidityProviderDataReq)(nil), "sifnode.clp.v1.LiquidityProviderDataReq")
	proto.RegisterType((*LiquidityProviderDataRes)(nil), "sifnode.clp.v1.LiquidityProviderDataRes")
	proto.RegisterType((*LiquidityProviderListReq)(nil), "sifnode.clp.v1.LiquidityProviderListReq")
	proto.RegisterType((*LiquidityProviderListRes)(nil), "sifnode.clp.v1.LiquidityProviderListRes")
	proto.RegisterType((*LiquidityProvidersReq)(nil), "sifnode.clp.v1.LiquidityProvidersReq")
	proto.RegisterType((*LiquidityProvidersRes)(nil), "sifnode.clp.v1.LiquidityProvidersRes")
	proto.RegisterType((*ParamsReq)(nil), "sifnode.clp.v1.ParamsReq")
	proto.RegisterType((*ParamsRes)(nil), "sifnode.clp.v1.ParamsRes")
	proto.RegisterType((*RewardParamsReq)(nil), "sifnode.clp.v1.RewardParamsReq")
	proto.RegisterType((*RewardParamsRes)(nil), "sifnode.clp.v1.RewardParamsRes")
	proto.RegisterType((*PmtpParamsReq)(nil), "sifnode.clp.v1.PmtpParamsReq")
	proto.RegisterType((*PmtpParamsRes)(nil), "sifnode.clp.v1.PmtpParamsRes")
	proto.RegisterType((*LiquidityProtectionParamsReq)(nil), "sifnode.clp.v1.LiquidityProtectionParamsReq")
	proto.RegisterType((*LiquidityProtectionParamsRes)(nil), "sifnode.clp.v1.LiquidityProtectionParamsRes")
	proto.RegisterType((*ProviderDistributionParamsReq)(nil), "sifnode.clp.v1.ProviderDistributionParamsReq")
	proto.RegisterType((*ProviderDistributionParamsRes)(nil), "sifnode.clp.v1.ProviderDistributionParamsRes")
}

func init() { proto.RegisterFile("sifnode/clp/v1/querier.proto", fileDescriptor_5f4edede314ca3fd) }

var fileDescriptor_5f4edede314ca3fd = []byte{
	// 1349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcb, 0x6f, 0x1b, 0xd5,
	0x17, 0xce, 0x24, 0x6d, 0xda, 0xdc, 0xbe, 0xcf, 0x2f, 0x49, 0x9d, 0xf9, 0x39, 0x76, 0x18, 0x95,
	0x34, 0x84, 0x64, 0xa6, 0xe9, 0x43, 0x50, 0x10, 0x8b, 0x44, 0xa5, 0x61, 0x51, 0x50, 0x18, 0x90,
	0x90, 0x90, 0x8a, 0x35, 0x1e, 0xdf, 0xda, 0x23, 0xc6, 0x9e, 0xc7, 0xb9, 0x09, 0xb5, 0x4a, 0x85,
	0x84, 0xba, 0x40, 0x62, 0x83, 0xd4, 0x3d, 0xea, 0x02, 0x16, 0x2c, 0x90, 0x58, 0xf0, 0x2f, 0x20,
	0x15, 0x09, 0x89, 0x4a, 0x6c, 0x80, 0x45, 0x41, 0x2d, 0x8b, 0xfe, 0x19, 0xe8, 0xde, 0xb9, 0x63,
	0x7b, 0x5e, 0xb6, 0x1b, 0x55, 0x20, 0x56, 0xcd, 0xcc, 0xf9, 0xce, 0x39, 0xdf, 0xf9, 0xee, 0x99,
	0x7b, 0x4e, 0x4d, 0xca, 0xe8, 0xdc, 0xe8, 0x78, 0x0d, 0x6a, 0xd8, 0xae, 0x6f, 0xec, 0x6d, 0x18,
	0xc1, 0x2e, 0x0d, 0x1d, 0x1a, 0xea, 0x7e, 0xe8, 0x31, 0x0f, 0x8e, 0x4b, 0xab, 0x6e, 0xbb, 0xbe,
	0xbe, 0xb7, 0xa1, 0xce, 0x36, 0xbd, 0xa6, 0x27, 0x4c, 0x06, 0xff, 0x2b, 0x42, 0xa9, 0x6a, 0x2a,
	0x06, 0xeb, 0xfa, 0x14, 0xa5, 0x6d, 0x21, 0x65, 0xf3, 0x3d, 0xcf, 0x95, 0xa6, 0xff, 0xa7, 0x4d,
	0x56, 0x68, 0xb5, 0x63, 0xbf, 0x55, 0xdb, 0xc3, 0xb6, 0x87, 0x46, 0xdd, 0x42, 0x2a, 0x48, 0x75,
	0x8d, 0xbd, 0x8d, 0x3a, 0x65, 0x16, 0xc7, 0x35, 0x9d, 0x8e, 0xc5, 0x1c, 0xaf, 0x23, 0xb1, 0xe5,
	0xa6, 0xe7, 0x35, 0x5d, 0x6a, 0x58, 0xbe, 0x63, 0x58, 0x9d, 0x8e, 0xc7, 0x84, 0x51, 0x46, 0xd2,
	0x5e, 0x24, 0x87, 0x76, 0x3c, 0xcf, 0x35, 0x69, 0x00, 0xf3, 0x64, 0x1a, 0xbb, 0xed, 0xba, 0xe7,
	0x96, 0x94, 0x25, 0x65, 0x65, 0xc6, 0x94, 0x4f, 0xaf, 0x1c, 0xfe, 0xec, 0x5e, 0x75, 0xe2, 0xc9,
	0xbd, 0xea, 0x84, 0xd6, 0x8d, 0xc1, 0x08, 0x2b, 0xe4, 0x00, 0x27, 0x2b, 0xa0, 0x47, 0xce, 0xcf,
	0xea, 0x49, 0x29, 0x74, 0x01, 0x13, 0x08, 0x58, 0x23, 0x60, 0xbb, 0x7e, 0xad, 0xed, 0x35, 0x76,
	0x5d, 0x5a, 0xb3, 0x1a, 0x8d, 0x90, 0x22, 0x96, 0x26, 0x45, 0x8a, 0x93, 0xb6, 0xeb, 0xbf, 0x29,
	0x0c, 0x9b, 0xd1, 0x7b, 0x4e, 0xa2, 0x45, 0x9d, 0x66, 0x8b, 0x95, 0xa6, 0x96, 0x94, 0x95, 0x29,
	0x53, 0x3e, 0x69, 0x26, 0x39, 0xcc, 0x63, 0x22, 0x27, 0x7a, 0x95, 0x90, 0x7e, 0x95, 0x92, 0xc1,
	0xb2, 0x1e, 0x49, 0xa2, 0x73, 0x49, 0x74, 0x21, 0x89, 0x2e, 0x25, 0xd1, 0x77, 0xac, 0x26, 0x35,
	0x69, 0xb0, 0x4b, 0x91, 0x99, 0x03, 0x9e, 0xda, 0x0f, 0x4a, 0x2f, 0x28, 0xc2, 0x2a, 0x39, 0xc8,
	0xe9, 0x62, 0x49, 0x59, 0x9a, 0x2a, 0xac, 0x28, 0x82, 0x3c, 0x9b, 0x92, 0x60, 0x3b, 0x51, 0xc6,
	0x01, 0x51, 0xc6, 0xd9, 0x91, 0x65, 0xa0, 0xef, 0x75, 0x90, 0x26, 0xea, 0x78, 0x8f, 0xcc, 0x5e,
	0x73, 0x82, 0x5d, 0xa7, 0xe1, 0xb0, 0xee, 0x4e, 0xe8, 0xed, 0x39, 0x0d, 0x1a, 0x0e, 0x39, 0x50,
	0x58, 0x24, 0xc4, 0xf5, 0x53, 0xb4, 0x67, 0x5c, 0x5f, 0xf2, 0x1d, 0x38, 0xef, 0x27, 0x4a, 0x6e,
	0x64, 0x84, 0x1d, 0x02, 0x6e, 0xfc, 0xbe, 0xe6, 0x4b, 0x83, 0x3c, 0x89, 0xe7, 0xd2, 0xca, 0x65,
	0x23, 0x9c, 0x72, 0xd3, 0xaf, 0xe0, 0x1c, 0x99, 0xe5, 0xd5, 0xec, 0xd1, 0x9a, 0x85, 0x48, 0x59,
	0xad, 0x6e, 0xb9, 0x56, 0xc7, 0xa6, 0x92, 0x1d, 0x44, 0xb6, 0x4d, 0x6e, 0xda, 0x8a, 0x2c, 0x70,
	0x91, 0xcc, 0xd3, 0x9b, 0x8c, 0x86, 0x1d, 0xcb, 0x4d, 0xf9, 0x4c, 0x09, 0x9f, 0xd9, 0xd8, 0x9a,
	0xf0, 0xea, 0x1f, 0xc6, 0x81, 0x44, 0x7f, 0x7d, 0x42, 0x8e, 0x0a, 0xdc, 0x35, 0x07, 0x19, 0xd7,
	0x2e, 0xa9, 0x91, 0x92, 0xd2, 0x28, 0xd5, 0x82, 0x93, 0xfb, 0x6d, 0xc1, 0x01, 0xad, 0xbf, 0x54,
	0x12, 0x0c, 0x10, 0xd6, 0xc9, 0xb4, 0x28, 0x2b, 0xee, 0xc8, 0xb9, 0xb4, 0xae, 0x02, 0x6d, 0x4a,
	0xd0, 0x40, 0x61, 0x93, 0x43, 0xba, 0x6c, 0x6a, 0xff, 0x5d, 0xf6, 0xb9, 0x42, 0x4a, 0x99, 0xa3,
	0xbc, 0x62, 0x31, 0xeb, 0x5f, 0x91, 0xeb, 0xb7, 0x62, 0x36, 0x08, 0xd7, 0xc9, 0xe9, 0x6c, 0x7b,
	0xd6, 0x1a, 0x16, 0xb3, 0xa4, 0x96, 0xcf, 0x8f, 0xec, 0x51, 0x11, 0x6a, 0xce, 0xcd, 0x7b, 0x5d,
	0x28, 0xf5, 0xd5, 0x1c, 0xa9, 0xf7, 0x73, 0x2f, 0xdd, 0xc9, 0xab, 0x2d, 0x6e, 0xcc, 0xa2, 0x8f,
	0xfa, 0xd9, 0x4b, 0xfc, 0x73, 0x31, 0x0d, 0x04, 0x93, 0xfc, 0x2f, 0x2b, 0x71, 0xdc, 0xaa, 0x63,
	0x5c, 0x01, 0x90, 0x91, 0xf6, 0x1f, 0x68, 0x61, 0x87, 0xcc, 0x65, 0x98, 0xe4, 0x4c, 0x94, 0x67,
	0x21, 0xde, 0x4f, 0x4a, 0x7e, 0xae, 0xff, 0xa8, 0x72, 0x47, 0xc8, 0xcc, 0x8e, 0x58, 0x40, 0x4c,
	0x1a, 0x68, 0x77, 0x26, 0xfb, 0x4f, 0x08, 0x3a, 0x99, 0x8e, 0x76, 0x13, 0x79, 0xff, 0xcf, 0x67,
	0x26, 0x67, 0x04, 0x95, 0x28, 0xb8, 0x4e, 0x00, 0xbb, 0xed, 0x36, 0x65, 0x61, 0xb7, 0xc6, 0x5a,
	0x21, 0xc5, 0x96, 0xe7, 0x36, 0xa2, 0x7b, 0x7e, 0x4b, 0xbf, 0xff, 0xb0, 0x3a, 0xf1, 0xfb, 0xc3,
	0xea, 0x72, 0xd3, 0x61, 0xad, 0xdd, 0xba, 0x6e, 0x7b, 0x6d, 0x43, 0xae, 0x3a, 0xd1, 0x3f, 0xeb,
	0xd8, 0xf8, 0x50, 0x6e, 0x50, 0x57, 0xa8, 0x6d, 0x9e, 0x8a, 0x23, 0xbd, 0x1b, 0x07, 0x82, 0x16,
	0x29, 0xf5, 0xc2, 0x87, 0x9c, 0xfc, 0x40, 0x92, 0xa9, 0x7d, 0x25, 0x99, 0x8f, 0xe3, 0x99, 0x3c,
	0x5c, 0x2f, 0x93, 0x76, 0x8a, 0x9c, 0x30, 0xe9, 0x47, 0x56, 0xd8, 0xe8, 0x2b, 0xb3, 0x9d, 0x7e,
	0x85, 0x70, 0x31, 0x25, 0x4f, 0x39, 0x2d, 0x4f, 0xc2, 0x41, 0x62, 0xb5, 0x13, 0xe4, 0xd8, 0x4e,
	0x9b, 0xf9, 0xfd, 0xc8, 0x7f, 0x28, 0xc9, 0x37, 0x08, 0xe7, 0x53, 0x81, 0xd5, 0x8c, 0xee, 0x7d,
	0x78, 0xac, 0xfd, 0x1b, 0xe4, 0xa4, 0xdf, 0x66, 0x3e, 0x17, 0x86, 0xd6, 0xa4, 0x77, 0xd4, 0xed,
	0x95, 0x3c, 0x6f, 0xd3, 0x62, 0x54, 0x46, 0x38, 0xee, 0x27, 0x9e, 0xe1, 0x65, 0x42, 0x44, 0x24,
	0xea, 0x7b, 0x76, 0x4b, 0x76, 0xd6, 0x42, 0x5e, 0x8c, 0xd7, 0x39, 0xc0, 0x9c, 0xf1, 0xe3, 0x3f,
	0x0b, 0x27, 0x70, 0x85, 0x94, 0x07, 0x9b, 0x9d, 0x51, 0x9b, 0x77, 0x5e, 0x5f, 0x81, 0x1f, 0x95,
	0xa1, 0x00, 0x84, 0xcd, 0x94, 0x20, 0x2f, 0x0c, 0xfb, 0x96, 0x92, 0xde, 0xb1, 0x3e, 0x6f, 0x91,
	0x23, 0x59, 0x69, 0xd6, 0xc7, 0x88, 0x33, 0xa0, 0x14, 0x09, 0xfb, 0x2a, 0x15, 0x6d, 0xb3, 0x55,
	0xb2, 0xd8, 0x9b, 0x28, 0x0e, 0xb2, 0xd0, 0xa9, 0xef, 0x26, 0x8b, 0xb5, 0x87, 0x03, 0x10, 0xb6,
	0x52, 0xc5, 0xae, 0x66, 0xb4, 0x2f, 0x76, 0x97, 0x9e, 0xe7, 0xbf, 0x3a, 0x46, 0x0e, 0xbe, 0xcd,
	0xbf, 0x7f, 0xb0, 0xc9, 0xa1, 0x6d, 0xca, 0xf8, 0x8a, 0x0b, 0xa7, 0x73, 0x17, 0x5f, 0x1a, 0xa8,
	0x05, 0x06, 0xd4, 0x96, 0x3f, 0xfd, 0xe5, 0xaf, 0xbb, 0x93, 0x4b, 0x50, 0x31, 0xd0, 0xb9, 0x61,
	0xb7, 0x2c, 0xa7, 0x33, 0xf8, 0xdf, 0x19, 0xe3, 0x56, 0x34, 0xa0, 0x6e, 0xc3, 0x07, 0xe4, 0xb0,
	0x4c, 0x82, 0x50, 0xca, 0x0b, 0xc6, 0x2b, 0x57, 0x8b, 0x2c, 0xa8, 0x55, 0x44, 0x9e, 0x12, 0xcc,
	0xe7, 0xe6, 0x41, 0xf8, 0x5a, 0x21, 0xb3, 0xdb, 0x7c, 0x7f, 0x4a, 0xef, 0x96, 0x67, 0x46, 0x5f,
	0xaa, 0x34, 0x50, 0xc7, 0x41, 0xa1, 0xb6, 0x29, 0x48, 0xbc, 0x0a, 0x97, 0x33, 0x24, 0xb2, 0x97,
	0x7a, 0xaf, 0x74, 0xe3, 0x56, 0x7f, 0x39, 0xba, 0x0d, 0xdf, 0x2a, 0xa4, 0x94, 0xc7, 0x53, 0xec,
	0x16, 0x2b, 0xe3, 0x6d, 0x26, 0x34, 0x50, 0xc7, 0x45, 0xa2, 0xf6, 0x9a, 0xe0, 0xfc, 0x12, 0x5c,
	0x1a, 0x83, 0xb3, 0xd8, 0x92, 0x92, 0x7c, 0x3f, 0x26, 0x47, 0xb7, 0x29, 0xeb, 0xed, 0xa6, 0x50,
	0xce, 0x5d, 0x44, 0xe5, 0x7e, 0xa2, 0x0e, 0xb3, 0xa2, 0x76, 0x4e, 0x50, 0x59, 0x85, 0x95, 0x0c,
	0x95, 0x68, 0x85, 0x77, 0x1d, 0x64, 0xc9, 0xec, 0x77, 0x15, 0x32, 0x97, 0xa7, 0x16, 0xc2, 0xe8,
	0x25, 0x4e, 0x34, 0xd4, 0x58, 0x30, 0xd4, 0xd6, 0x04, 0xb3, 0x65, 0x38, 0x33, 0x86, 0x48, 0x08,
	0xdf, 0x14, 0x9c, 0xa1, 0x10, 0x68, 0xf4, 0xc9, 0xc4, 0x62, 0x8d, 0x8b, 0x44, 0xed, 0xb2, 0xa0,
	0x77, 0x01, 0x36, 0xc6, 0x39, 0xc3, 0x48, 0xc5, 0xf8, 0xbb, 0xab, 0x93, 0x19, 0xfe, 0xdd, 0x45,
	0x37, 0xd2, 0x42, 0xc1, 0x74, 0xa6, 0x81, 0x5a, 0x68, 0x42, 0xad, 0x2a, 0xb2, 0x2f, 0xc0, 0xe9,
	0xec, 0xa7, 0x17, 0x85, 0xbd, 0x45, 0x4e, 0x6c, 0x53, 0x36, 0x38, 0xca, 0xa0, 0x3a, 0x74, 0xd0,
	0xd1, 0x40, 0x1d, 0x01, 0x18, 0x76, 0xb1, 0x84, 0x02, 0x29, 0xaf, 0x69, 0x40, 0x72, 0x8c, 0x17,
	0xd8, 0x1b, 0x77, 0xb0, 0x38, 0x64, 0x14, 0xd2, 0x40, 0x1d, 0x6a, 0x46, 0xed, 0x8c, 0x48, 0x5b,
	0x81, 0x72, 0xb6, 0x58, 0x3e, 0xf1, 0x64, 0xd2, 0xef, 0x14, 0x52, 0x4e, 0x75, 0x40, 0x62, 0xa6,
	0xc0, 0xda, 0xf8, 0xe3, 0x87, 0x06, 0xea, 0xd3, 0xa0, 0x51, 0xbb, 0x28, 0x28, 0xea, 0xb0, 0x36,
	0xbc, 0x1b, 0xa4, 0x5f, 0x4c, 0xf9, 0x7b, 0x85, 0x2c, 0x72, 0xa1, 0x0a, 0x27, 0x03, 0xac, 0x3f,
	0xc5, 0x14, 0xa1, 0x81, 0xfa, 0x54, 0x70, 0xd4, 0x2e, 0x09, 0xd6, 0x06, 0xac, 0x67, 0x85, 0xed,
	0xdd, 0x3e, 0x03, 0x8e, 0x92, 0xf6, 0xd6, 0xe6, 0xfd, 0x47, 0x15, 0xe5, 0xc1, 0xa3, 0x8a, 0xf2,
	0xe7, 0xa3, 0x8a, 0xf2, 0xc5, 0xe3, 0xca, 0xc4, 0x83, 0xc7, 0x95, 0x89, 0x5f, 0x1f, 0x57, 0x26,
	0xde, 0x3f, 0x3b, 0xb0, 0xc1, 0xbd, 0x13, 0x87, 0x8c, 0x7f, 0x37, 0xbb, 0x29, 0x82, 0x8b, 0x35,
	0xae, 0x3e, 0x2d, 0x7e, 0xec, 0xba, 0xf0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xc0, 0x01,
	0x15, 0xd0, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetPool(ctx context.Context, in *PoolReq, opts ...grpc.CallOption) (*PoolRes, error)
	GetPools(ctx context.Context, in *PoolsReq, opts ...grpc.CallOption) (*PoolsRes, error)
	GetLiquidityProvider(ctx context.Context, in *LiquidityProviderReq, opts ...grpc.CallOption) (*LiquidityProviderRes, error)
	GetLiquidityProviderData(ctx context.Context, in *LiquidityProviderDataReq, opts ...grpc.CallOption) (*LiquidityProviderDataRes, error)
	GetAssetList(ctx context.Context, in *AssetListReq, opts ...grpc.CallOption) (*AssetListRes, error)
	GetLiquidityProviders(ctx context.Context, in *LiquidityProvidersReq, opts ...grpc.CallOption) (*LiquidityProvidersRes, error)
	GetLiquidityProviderList(ctx context.Context, in *LiquidityProviderListReq, opts ...grpc.CallOption) (*LiquidityProviderListRes, error)
	GetParams(ctx context.Context, in *ParamsReq, opts ...grpc.CallOption) (*ParamsRes, error)
	GetRewardParams(ctx context.Context, in *RewardParamsReq, opts ...grpc.CallOption) (*RewardParamsRes, error)
	GetPmtpParams(ctx context.Context, in *PmtpParamsReq, opts ...grpc.CallOption) (*PmtpParamsRes, error)
	GetLiquidityProtectionParams(ctx context.Context, in *LiquidityProtectionParamsReq, opts ...grpc.CallOption) (*LiquidityProtectionParamsRes, error)
	GetProviderDistributionParams(ctx context.Context, in *ProviderDistributionParamsReq, opts ...grpc.CallOption) (*ProviderDistributionParamsRes, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetPool(ctx context.Context, in *PoolReq, opts ...grpc.CallOption) (*PoolRes, error) {
	out := new(PoolRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPools(ctx context.Context, in *PoolsReq, opts ...grpc.CallOption) (*PoolsRes, error) {
	out := new(PoolsRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLiquidityProvider(ctx context.Context, in *LiquidityProviderReq, opts ...grpc.CallOption) (*LiquidityProviderRes, error) {
	out := new(LiquidityProviderRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetLiquidityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLiquidityProviderData(ctx context.Context, in *LiquidityProviderDataReq, opts ...grpc.CallOption) (*LiquidityProviderDataRes, error) {
	out := new(LiquidityProviderDataRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetLiquidityProviderData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAssetList(ctx context.Context, in *AssetListReq, opts ...grpc.CallOption) (*AssetListRes, error) {
	out := new(AssetListRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetAssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLiquidityProviders(ctx context.Context, in *LiquidityProvidersReq, opts ...grpc.CallOption) (*LiquidityProvidersRes, error) {
	out := new(LiquidityProvidersRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetLiquidityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLiquidityProviderList(ctx context.Context, in *LiquidityProviderListReq, opts ...grpc.CallOption) (*LiquidityProviderListRes, error) {
	out := new(LiquidityProviderListRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetLiquidityProviderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetParams(ctx context.Context, in *ParamsReq, opts ...grpc.CallOption) (*ParamsRes, error) {
	out := new(ParamsRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRewardParams(ctx context.Context, in *RewardParamsReq, opts ...grpc.CallOption) (*RewardParamsRes, error) {
	out := new(RewardParamsRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetRewardParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPmtpParams(ctx context.Context, in *PmtpParamsReq, opts ...grpc.CallOption) (*PmtpParamsRes, error) {
	out := new(PmtpParamsRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetPmtpParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLiquidityProtectionParams(ctx context.Context, in *LiquidityProtectionParamsReq, opts ...grpc.CallOption) (*LiquidityProtectionParamsRes, error) {
	out := new(LiquidityProtectionParamsRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetLiquidityProtectionParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProviderDistributionParams(ctx context.Context, in *ProviderDistributionParamsReq, opts ...grpc.CallOption) (*ProviderDistributionParamsRes, error) {
	out := new(ProviderDistributionParamsRes)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetProviderDistributionParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetPool(context.Context, *PoolReq) (*PoolRes, error)
	GetPools(context.Context, *PoolsReq) (*PoolsRes, error)
	GetLiquidityProvider(context.Context, *LiquidityProviderReq) (*LiquidityProviderRes, error)
	GetLiquidityProviderData(context.Context, *LiquidityProviderDataReq) (*LiquidityProviderDataRes, error)
	GetAssetList(context.Context, *AssetListReq) (*AssetListRes, error)
	GetLiquidityProviders(context.Context, *LiquidityProvidersReq) (*LiquidityProvidersRes, error)
	GetLiquidityProviderList(context.Context, *LiquidityProviderListReq) (*LiquidityProviderListRes, error)
	GetParams(context.Context, *ParamsReq) (*ParamsRes, error)
	GetRewardParams(context.Context, *RewardParamsReq) (*RewardParamsRes, error)
	GetPmtpParams(context.Context, *PmtpParamsReq) (*PmtpParamsRes, error)
	GetLiquidityProtectionParams(context.Context, *LiquidityProtectionParamsReq) (*LiquidityProtectionParamsRes, error)
	GetProviderDistributionParams(context.Context, *ProviderDistributionParamsReq) (*ProviderDistributionParamsRes, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetPool(ctx context.Context, req *PoolReq) (*PoolRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool not implemented")
}
func (*UnimplementedQueryServer) GetPools(ctx context.Context, req *PoolsReq) (*PoolsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPools not implemented")
}
func (*UnimplementedQueryServer) GetLiquidityProvider(ctx context.Context, req *LiquidityProviderReq) (*LiquidityProviderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityProvider not implemented")
}
func (*UnimplementedQueryServer) GetLiquidityProviderData(ctx context.Context, req *LiquidityProviderDataReq) (*LiquidityProviderDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityProviderData not implemented")
}
func (*UnimplementedQueryServer) GetAssetList(ctx context.Context, req *AssetListReq) (*AssetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetList not implemented")
}
func (*UnimplementedQueryServer) GetLiquidityProviders(ctx context.Context, req *LiquidityProvidersReq) (*LiquidityProvidersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityProviders not implemented")
}
func (*UnimplementedQueryServer) GetLiquidityProviderList(ctx context.Context, req *LiquidityProviderListReq) (*LiquidityProviderListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityProviderList not implemented")
}
func (*UnimplementedQueryServer) GetParams(ctx context.Context, req *ParamsReq) (*ParamsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (*UnimplementedQueryServer) GetRewardParams(ctx context.Context, req *RewardParamsReq) (*RewardParamsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardParams not implemented")
}
func (*UnimplementedQueryServer) GetPmtpParams(ctx context.Context, req *PmtpParamsReq) (*PmtpParamsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPmtpParams not implemented")
}
func (*UnimplementedQueryServer) GetLiquidityProtectionParams(ctx context.Context, req *LiquidityProtectionParamsReq) (*LiquidityProtectionParamsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityProtectionParams not implemented")
}
func (*UnimplementedQueryServer) GetProviderDistributionParams(ctx context.Context, req *ProviderDistributionParamsReq) (*ProviderDistributionParamsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderDistributionParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPool(ctx, req.(*PoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPools(ctx, req.(*PoolsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLiquidityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLiquidityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetLiquidityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLiquidityProvider(ctx, req.(*LiquidityProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLiquidityProviderData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProviderDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLiquidityProviderData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetLiquidityProviderData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLiquidityProviderData(ctx, req.(*LiquidityProviderDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetAssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAssetList(ctx, req.(*AssetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLiquidityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProvidersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLiquidityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetLiquidityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLiquidityProviders(ctx, req.(*LiquidityProvidersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLiquidityProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProviderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLiquidityProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetLiquidityProviderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLiquidityProviderList(ctx, req.(*LiquidityProviderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetParams(ctx, req.(*ParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRewardParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRewardParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetRewardParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRewardParams(ctx, req.(*RewardParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPmtpParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PmtpParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPmtpParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetPmtpParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPmtpParams(ctx, req.(*PmtpParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLiquidityProtectionParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProtectionParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLiquidityProtectionParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetLiquidityProtectionParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLiquidityProtectionParams(ctx, req.(*LiquidityProtectionParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProviderDistributionParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderDistributionParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProviderDistributionParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetProviderDistributionParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProviderDistributionParams(ctx, req.(*ProviderDistributionParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sifnode.clp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPool",
			Handler:    _Query_GetPool_Handler,
		},
		{
			MethodName: "GetPools",
			Handler:    _Query_GetPools_Handler,
		},
		{
			MethodName: "GetLiquidityProvider",
			Handler:    _Query_GetLiquidityProvider_Handler,
		},
		{
			MethodName: "GetLiquidityProviderData",
			Handler:    _Query_GetLiquidityProviderData_Handler,
		},
		{
			MethodName: "GetAssetList",
			Handler:    _Query_GetAssetList_Handler,
		},
		{
			MethodName: "GetLiquidityProviders",
			Handler:    _Query_GetLiquidityProviders_Handler,
		},
		{
			MethodName: "GetLiquidityProviderList",
			Handler:    _Query_GetLiquidityProviderList_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _Query_GetParams_Handler,
		},
		{
			MethodName: "GetRewardParams",
			Handler:    _Query_GetRewardParams_Handler,
		},
		{
			MethodName: "GetPmtpParams",
			Handler:    _Query_GetPmtpParams_Handler,
		},
		{
			MethodName: "GetLiquidityProtectionParams",
			Handler:    _Query_GetLiquidityProtectionParams_Handler,
		},
		{
			MethodName: "GetProviderDistributionParams",
			Handler:    _Query_GetProviderDistributionParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sifnode/clp/v1/querier.proto",
}

func (m *PoolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClpModuleAddress) > 0 {
		i -= len(m.ClpModuleAddress)
		copy(dAtA[i:], m.ClpModuleAddress)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.ClpModuleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClpModuleAddress) > 0 {
		i -= len(m.ClpModuleAddress)
		copy(dAtA[i:], m.ClpModuleAddress)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.ClpModuleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LpAddress) > 0 {
		i -= len(m.LpAddress)
		copy(dAtA[i:], m.LpAddress)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.LpAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ExternalAssetBalance) > 0 {
		i -= len(m.ExternalAssetBalance)
		copy(dAtA[i:], m.ExternalAssetBalance)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.ExternalAssetBalance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NativeAssetBalance) > 0 {
		i -= len(m.NativeAssetBalance)
		copy(dAtA[i:], m.NativeAssetBalance)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.NativeAssetBalance)))
		i--
		dAtA[i] = 0x12
	}
	if m.LiquidityProvider != nil {
		{
			size, err := m.LiquidityProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LpAddress) > 0 {
		i -= len(m.LpAddress)
		copy(dAtA[i:], m.LpAddress)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.LpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderDataReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderDataReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LpAddress) > 0 {
		i -= len(m.LpAddress)
		copy(dAtA[i:], m.LpAddress)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.LpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderDataRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderDataRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderDataRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LiquidityProviderData) > 0 {
		for iNdEx := len(m.LiquidityProviderData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityProviderData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LiquidityProviders) > 0 {
		for iNdEx := len(m.LiquidityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProvidersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProvidersReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProvidersReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProvidersRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProvidersRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProvidersRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LiquidityProviders) > 0 {
		for iNdEx := len(m.LiquidityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParamsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ParamsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SymmetryRatioThreshold.Size()
		i -= size
		if _, err := m.SymmetryRatioThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SymmetryThreshold.Size()
		i -= size
		if _, err := m.SymmetryThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardParamsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardParamsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardParamsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RewardParamsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardParamsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardParamsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PmtpParamsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PmtpParamsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PmtpParamsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PmtpParamsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PmtpParamsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PmtpParamsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.PmtpEpoch != nil {
		{
			size, err := m.PmtpEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PmtpRateParams != nil {
		{
			size, err := m.PmtpRateParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProtectionParamsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProtectionParamsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProtectionParamsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LiquidityProtectionParamsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProtectionParamsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProtectionParamsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.RateParams != nil {
		{
			size, err := m.RateParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProviderDistributionParamsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderDistributionParamsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderDistributionParamsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ProviderDistributionParamsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderDistributionParamsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderDistributionParamsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *PoolRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.ClpModuleAddress)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	return n
}

func (m *PoolsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *PoolsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	l = len(m.ClpModuleAddress)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProviderReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.LpAddress)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProviderRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidityProvider != nil {
		l = m.LiquidityProvider.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.NativeAssetBalance)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.ExternalAssetBalance)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	return n
}

func (m *AssetListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LpAddress)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *AssetListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProviderDataReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LpAddress)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProviderDataRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityProviderData) > 0 {
		for _, e := range m.LiquidityProviderData {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProviderListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProviderListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityProviders) > 0 {
		for _, e := range m.LiquidityProviders {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProvidersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProvidersRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityProviders) > 0 {
		for _, e := range m.LiquidityProviders {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *ParamsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ParamsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = m.SymmetryThreshold.Size()
	n += 1 + l + sovQuerier(uint64(l))
	l = m.SymmetryRatioThreshold.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *RewardParamsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RewardParamsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *PmtpParamsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PmtpParamsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.PmtpRateParams != nil {
		l = m.PmtpRateParams.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.PmtpEpoch != nil {
		l = m.PmtpEpoch.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	return n
}

func (m *LiquidityProtectionParamsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LiquidityProtectionParamsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.RateParams != nil {
		l = m.RateParams.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	return n
}

func (m *ProviderDistributionParamsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ProviderDistributionParamsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClpModuleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClpModuleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClpModuleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClpModuleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidityProvider == nil {
				m.LiquidityProvider = &LiquidityProvider{}
			}
			if err := m.LiquidityProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeAssetBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAssetBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderDataRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderDataRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderDataRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviderData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviderData = append(m.LiquidityProviderData, &LiquidityProviderData{})
			if err := m.LiquidityProviderData[len(m.LiquidityProviderData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviders = append(m.LiquidityProviders, &LiquidityProvider{})
			if err := m.LiquidityProviders[len(m.LiquidityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProvidersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProvidersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProvidersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProvidersRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProvidersRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProvidersRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviders = append(m.LiquidityProviders, &LiquidityProvider{})
			if err := m.LiquidityProviders[len(m.LiquidityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymmetryThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SymmetryThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymmetryRatioThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SymmetryRatioThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardParamsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardParamsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardParamsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardParamsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardParamsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardParamsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &RewardParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PmtpParamsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PmtpParamsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PmtpParamsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PmtpParamsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PmtpParamsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PmtpParamsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &PmtpParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpRateParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PmtpRateParams == nil {
				m.PmtpRateParams = &PmtpRateParams{}
			}
			if err := m.PmtpRateParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PmtpEpoch == nil {
				m.PmtpEpoch = &PmtpEpoch{}
			}
			if err := m.PmtpEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProtectionParamsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProtectionParamsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProtectionParamsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProtectionParamsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProtectionParamsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProtectionParamsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &LiquidityProtectionParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateParams == nil {
				m.RateParams = &LiquidityProtectionRateParams{}
			}
			if err := m.RateParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderDistributionParamsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderDistributionParamsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderDistributionParamsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderDistributionParamsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderDistributionParamsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderDistributionParamsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &ProviderDistributionParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
