//go:build FEATURE_TOGGLE_MARGIN_CLI_ALPHA
// +build FEATURE_TOGGLE_MARGIN_CLI_ALPHA


// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/clp/v1/pool.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pool struct {
	ExternalAsset                  *Asset                                  `protobuf:"bytes,1,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty"`
	NativeAssetBalance             github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=native_asset_balance,json=nativeAssetBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_asset_balance" yaml:"native_asset_balance"`
	ExternalAssetBalance           github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=external_asset_balance,json=externalAssetBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_asset_balance" yaml:"external_asset_balance"`
	PoolUnits                      github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=pool_units,json=poolUnits,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"pool_units" yaml:"pool_units"`
	SwapPriceNative                *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=swap_price_native,json=swapPriceNative,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_price_native,omitempty" yaml:"swap_price_native "`
	SwapPriceExternal              *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=swap_price_external,json=swapPriceExternal,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_price_external,omitempty" yaml:"swap_price_external "`
	RewardPeriodNativeDistributed  github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,7,opt,name=reward_period_native_distributed,json=rewardPeriodNativeDistributed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"reward_period_native_distributed" yaml:"reward_period_native_distributed"`
	ExternalLiabilities            github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,8,opt,name=external_liabilities,json=externalLiabilities,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_liabilities"`
	ExternalCustody                github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,9,opt,name=external_custody,json=externalCustody,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_custody"`
	NativeLiabilities              github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,10,opt,name=native_liabilities,json=nativeLiabilities,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_liabilities"`
	NativeCustody                  github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,11,opt,name=native_custody,json=nativeCustody,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_custody"`
	Health                         github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,12,opt,name=health,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"health"`
	InterestRate                   github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,13,opt,name=interest_rate,json=interestRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"interest_rate"`
	LastHeightInterestRateComputed int64                                   `protobuf:"varint,14,opt,name=last_height_interest_rate_computed,json=lastHeightInterestRateComputed,proto3" json:"last_height_interest_rate_computed,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf43b9338450af59, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

func (m *Pool) GetLastHeightInterestRateComputed() int64 {
	if m != nil {
		return m.LastHeightInterestRateComputed
	}
	return 0
}

func init() {
	proto.RegisterType((*Pool)(nil), "sifnode.clp.v1.Pool")
}

func init() { proto.RegisterFile("sifnode/clp/v1/pool.proto", fileDescriptor_cf43b9338450af59) }

var fileDescriptor_cf43b9338450af59 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4d, 0x4f, 0xdb, 0x30,
	0x18, 0xc7, 0x9b, 0xc1, 0xd8, 0x30, 0xb4, 0xac, 0x86, 0x4d, 0x01, 0x44, 0x1a, 0xe5, 0x30, 0xb8,
	0x2c, 0x11, 0xdb, 0x6d, 0xda, 0x85, 0x97, 0xbd, 0x30, 0x4d, 0xa8, 0x0a, 0x62, 0x87, 0x1e, 0x66,
	0x39, 0x89, 0x69, 0xac, 0xa5, 0x71, 0x14, 0xbb, 0x85, 0xde, 0x76, 0xda, 0x79, 0xdf, 0x61, 0xd7,
	0x7d, 0x10, 0x8e, 0x1c, 0x27, 0x0e, 0xd5, 0xd4, 0x7e, 0x03, 0x3e, 0xc1, 0x14, 0x3b, 0xe9, 0xcb,
	0x40, 0x1a, 0xed, 0xa9, 0xc9, 0xf3, 0xfc, 0xfd, 0xfb, 0xff, 0xfd, 0xd4, 0x31, 0x58, 0xe7, 0xf4,
	0x2c, 0x66, 0x01, 0x71, 0xfc, 0x28, 0x71, 0x3a, 0xbb, 0x4e, 0xc2, 0x58, 0x64, 0x27, 0x29, 0x13,
	0x0c, 0x56, 0xf2, 0x96, 0xed, 0x47, 0x89, 0xdd, 0xd9, 0xdd, 0x58, 0x6b, 0xb2, 0x26, 0x93, 0x2d,
	0x27, 0x7b, 0x52, 0xaa, 0x8d, 0x8d, 0x7f, 0x00, 0xa2, 0x9b, 0x10, 0xae, 0x7a, 0xd6, 0xaf, 0x25,
	0x30, 0x5f, 0x67, 0x2c, 0x82, 0x6f, 0x40, 0x85, 0x5c, 0x08, 0x92, 0xc6, 0x38, 0x42, 0x98, 0x73,
	0x22, 0x74, 0xcd, 0xd4, 0x76, 0x96, 0x5e, 0x3e, 0xb5, 0x27, 0x3d, 0xec, 0xbd, 0xac, 0xe9, 0x96,
	0x0b, 0xb1, 0x7c, 0x85, 0xdf, 0x34, 0xb0, 0x16, 0x63, 0x41, 0x3b, 0x44, 0x2d, 0x46, 0x1e, 0x8e,
	0x70, 0xec, 0x13, 0xfd, 0x81, 0xa9, 0xed, 0x2c, 0xee, 0x1f, 0x5f, 0xf6, 0x6a, 0xa5, 0xeb, 0x5e,
	0x6d, 0xbb, 0x49, 0x45, 0xd8, 0xf6, 0x6c, 0x9f, 0xb5, 0x1c, 0x9f, 0xf1, 0x16, 0xe3, 0xf9, 0xcf,
	0x0b, 0x1e, 0x7c, 0xcd, 0x73, 0x9d, 0xd2, 0x58, 0xdc, 0xf4, 0x6a, 0x9b, 0x5d, 0xdc, 0x8a, 0x5e,
	0x5b, 0x77, 0x41, 0x2d, 0x17, 0xaa, 0xb2, 0xf4, 0xde, 0x57, 0x45, 0xf8, 0x5d, 0x03, 0xcf, 0x26,
	0x77, 0x30, 0x0c, 0x31, 0x27, 0x43, 0xd4, 0xa7, 0x0f, 0xb1, 0xa5, 0x42, 0xdc, 0x8d, 0xb5, 0xdc,
	0xb5, 0x89, 0x21, 0x14, 0x41, 0x7c, 0x00, 0xb2, 0xbf, 0x08, 0xb5, 0x63, 0x2a, 0xb8, 0x3e, 0x2f,
	0xbd, 0x0f, 0xa7, 0xf7, 0xae, 0x2a, 0xef, 0x11, 0xca, 0x72, 0x17, 0xb3, 0x97, 0xd3, 0xec, 0x19,
	0x72, 0x50, 0xe5, 0xe7, 0x38, 0x41, 0x49, 0x4a, 0x7d, 0x82, 0xd4, 0x38, 0xf4, 0x87, 0xd2, 0xeb,
	0xfd, 0x75, 0xaf, 0xf6, 0xfc, 0x1e, 0x3e, 0x87, 0xc4, 0xbf, 0xe9, 0xd5, 0xd6, 0x95, 0xcd, 0x2d,
	0x98, 0x69, 0xb9, 0x2b, 0x59, 0xb1, 0x9e, 0xd5, 0x8e, 0x65, 0x09, 0x76, 0xc1, 0xea, 0x98, 0xae,
	0xd8, 0xbc, 0xbe, 0x20, 0x6d, 0x8f, 0xa6, 0xb2, 0xdd, 0xbc, 0x65, 0x5b, 0xe0, 0x4c, 0xcb, 0xad,
	0x0e, 0x8d, 0xdf, 0xe6, 0x45, 0xf8, 0x53, 0x03, 0x66, 0x4a, 0xce, 0x71, 0x1a, 0xa0, 0x84, 0xa4,
	0x94, 0x05, 0x79, 0x4c, 0x14, 0x50, 0x2e, 0x52, 0xea, 0xb5, 0x05, 0x09, 0xf4, 0x47, 0x32, 0x48,
	0x63, 0xfa, 0x59, 0x6f, 0xab, 0x34, 0xff, 0x33, 0xb0, 0xdc, 0x2d, 0x25, 0xa9, 0x4b, 0x85, 0x9a,
	0xca, 0xe1, 0xa8, 0x0f, 0x3d, 0x30, 0x3c, 0x12, 0x28, 0xa2, 0xd8, 0xa3, 0x11, 0x15, 0x94, 0x70,
	0xfd, 0xb1, 0x0c, 0xe6, 0x4c, 0x19, 0xcc, 0x5d, 0x2d, 0x60, 0x9f, 0x46, 0x2c, 0xd8, 0x00, 0x4f,
	0x86, 0x1e, 0x7e, 0x9b, 0x0b, 0x16, 0x74, 0xf5, 0xc5, 0xd9, 0xf8, 0x2b, 0x05, 0xe8, 0x40, 0x71,
	0xe0, 0x17, 0x90, 0x7f, 0x59, 0x13, 0xe9, 0xc1, 0x6c, 0xf4, 0xaa, 0x42, 0x8d, 0x67, 0xff, 0x0c,
	0x2a, 0x39, 0xbf, 0x48, 0xbe, 0x34, 0x1b, 0xbb, 0xac, 0x30, 0x45, 0xee, 0x77, 0x60, 0x21, 0x24,
	0x38, 0x12, 0xa1, 0xbe, 0x2c, 0x79, 0x76, 0xce, 0xbb, 0xe7, 0x79, 0x74, 0xf3, 0xd5, 0xf0, 0x04,
	0x94, 0x69, 0x2c, 0x48, 0x4a, 0xb8, 0x40, 0x29, 0x16, 0x44, 0x2f, 0xcf, 0x84, 0x5b, 0x2e, 0x20,
	0x2e, 0x16, 0x04, 0x7e, 0x04, 0x56, 0x84, 0xb9, 0x40, 0x21, 0xa1, 0xcd, 0x50, 0xa0, 0x09, 0x03,
	0xe4, 0xb3, 0x56, 0x22, 0xcf, 0x6e, 0xc5, 0xd4, 0x76, 0xe6, 0x5c, 0x23, 0x53, 0x7e, 0x90, 0xc2,
	0xa3, 0x31, 0xc6, 0x41, 0xae, 0xda, 0xdf, 0xbb, 0xec, 0x1b, 0xda, 0x55, 0xdf, 0xd0, 0xfe, 0xf4,
	0x0d, 0xed, 0xc7, 0xc0, 0x28, 0x5d, 0x0d, 0x8c, 0xd2, 0xef, 0x81, 0x51, 0x6a, 0x8c, 0x8f, 0xee,
	0x84, 0x9e, 0xf9, 0x21, 0xa6, 0xb1, 0x53, 0x5c, 0xfc, 0x17, 0xf2, 0xea, 0x97, 0x01, 0xbd, 0x05,
	0x79, 0xf1, 0xbf, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x90, 0x59, 0x80, 0x57, 0x06, 0x00,
	0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightInterestRateComputed != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastHeightInterestRateComputed))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.InterestRate.Size()
		i -= size
		if _, err := m.InterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.Health.Size()
		i -= size
		if _, err := m.Health.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.NativeCustody.Size()
		i -= size
		if _, err := m.NativeCustody.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.NativeLiabilities.Size()
		i -= size
		if _, err := m.NativeLiabilities.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.ExternalCustody.Size()
		i -= size
		if _, err := m.ExternalCustody.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.ExternalLiabilities.Size()
		i -= size
		if _, err := m.ExternalLiabilities.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.RewardPeriodNativeDistributed.Size()
		i -= size
		if _, err := m.RewardPeriodNativeDistributed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.SwapPriceExternal != nil {
		{
			size := m.SwapPriceExternal.Size()
			i -= size
			if _, err := m.SwapPriceExternal.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SwapPriceNative != nil {
		{
			size := m.SwapPriceNative.Size()
			i -= size
			if _, err := m.SwapPriceNative.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.PoolUnits.Size()
		i -= size
		if _, err := m.PoolUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ExternalAssetBalance.Size()
		i -= size
		if _, err := m.ExternalAssetBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.NativeAssetBalance.Size()
		i -= size
		if _, err := m.NativeAssetBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.NativeAssetBalance.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.ExternalAssetBalance.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.PoolUnits.Size()
	n += 1 + l + sovPool(uint64(l))
	if m.SwapPriceNative != nil {
		l = m.SwapPriceNative.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.SwapPriceExternal != nil {
		l = m.SwapPriceExternal.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.RewardPeriodNativeDistributed.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.ExternalLiabilities.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.ExternalCustody.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.NativeLiabilities.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.NativeCustody.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.Health.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.InterestRate.Size()
	n += 1 + l + sovPool(uint64(l))
	if m.LastHeightInterestRateComputed != 0 {
		n += 1 + sovPool(uint64(m.LastHeightInterestRateComputed))
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeAssetBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalAssetBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapPriceNative", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.SwapPriceNative = &v
			if err := m.SwapPriceNative.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapPriceExternal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.SwapPriceExternal = &v
			if err := m.SwapPriceExternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodNativeDistributed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPeriodNativeDistributed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalLiabilities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalLiabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalCustody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalCustody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeLiabilities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeLiabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeCustody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeCustody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Health.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightInterestRateComputed", wireType)
			}
			m.LastHeightInterestRateComputed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightInterestRateComputed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
