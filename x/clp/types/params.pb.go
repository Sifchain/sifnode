// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/clp/v1/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params - used for initializing default parameter for clp at genesis
type Params struct {
	MinCreatePoolThreshold uint64 `protobuf:"varint,1,opt,name=min_create_pool_threshold,json=minCreatePoolThreshold,proto3" json:"min_create_pool_threshold,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinCreatePoolThreshold() uint64 {
	if m != nil {
		return m.MinCreatePoolThreshold
	}
	return 0
}

type RewardParams struct {
	LiquidityRemovalLockPeriod   uint64          `protobuf:"varint,1,opt,name=liquidity_removal_lock_period,json=liquidityRemovalLockPeriod,proto3" json:"liquidity_removal_lock_period,omitempty"`
	LiquidityRemovalCancelPeriod uint64          `protobuf:"varint,2,opt,name=liquidity_removal_cancel_period,json=liquidityRemovalCancelPeriod,proto3" json:"liquidity_removal_cancel_period,omitempty"`
	RewardPeriods                []*RewardPeriod `protobuf:"bytes,4,rep,name=reward_periods,json=rewardPeriods,proto3" json:"reward_periods,omitempty"`
	RewardPeriodStartTime        string          `protobuf:"bytes,5,opt,name=reward_period_start_time,json=rewardPeriodStartTime,proto3" json:"reward_period_start_time,omitempty"`
}

func (m *RewardParams) Reset()         { *m = RewardParams{} }
func (m *RewardParams) String() string { return proto.CompactTextString(m) }
func (*RewardParams) ProtoMessage()    {}
func (*RewardParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{1}
}
func (m *RewardParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardParams.Merge(m, src)
}
func (m *RewardParams) XXX_Size() int {
	return m.Size()
}
func (m *RewardParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardParams.DiscardUnknown(m)
}

var xxx_messageInfo_RewardParams proto.InternalMessageInfo

func (m *RewardParams) GetLiquidityRemovalLockPeriod() uint64 {
	if m != nil {
		return m.LiquidityRemovalLockPeriod
	}
	return 0
}

func (m *RewardParams) GetLiquidityRemovalCancelPeriod() uint64 {
	if m != nil {
		return m.LiquidityRemovalCancelPeriod
	}
	return 0
}

func (m *RewardParams) GetRewardPeriods() []*RewardPeriod {
	if m != nil {
		return m.RewardPeriods
	}
	return nil
}

func (m *RewardParams) GetRewardPeriodStartTime() string {
	if m != nil {
		return m.RewardPeriodStartTime
	}
	return ""
}

// These params are non-governable and are calculated on chain
type PmtpRateParams struct {
	PmtpPeriodBlockRate    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=pmtp_period_block_rate,json=pmtpPeriodBlockRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pmtp_period_block_rate"`
	PmtpCurrentRunningRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=pmtp_current_running_rate,json=pmtpCurrentRunningRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pmtp_current_running_rate"`
	PmtpInterPolicyRate    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=pmtp_inter_policy_rate,json=pmtpInterPolicyRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pmtp_inter_policy_rate"`
}

func (m *PmtpRateParams) Reset()         { *m = PmtpRateParams{} }
func (m *PmtpRateParams) String() string { return proto.CompactTextString(m) }
func (*PmtpRateParams) ProtoMessage()    {}
func (*PmtpRateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{2}
}
func (m *PmtpRateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PmtpRateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PmtpRateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PmtpRateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PmtpRateParams.Merge(m, src)
}
func (m *PmtpRateParams) XXX_Size() int {
	return m.Size()
}
func (m *PmtpRateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PmtpRateParams.DiscardUnknown(m)
}

var xxx_messageInfo_PmtpRateParams proto.InternalMessageInfo

type PmtpParams struct {
	PmtpPeriodGovernanceRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=pmtp_period_governance_rate,json=pmtpPeriodGovernanceRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pmtp_period_governance_rate"`
	PmtpPeriodEpochLength    int64                                  `protobuf:"varint,2,opt,name=pmtp_period_epoch_length,json=pmtpPeriodEpochLength,proto3" json:"pmtp_period_epoch_length,omitempty"`
	PmtpPeriodStartBlock     int64                                  `protobuf:"varint,3,opt,name=pmtp_period_start_block,json=pmtpPeriodStartBlock,proto3" json:"pmtp_period_start_block,omitempty"`
	PmtpPeriodEndBlock       int64                                  `protobuf:"varint,4,opt,name=pmtp_period_end_block,json=pmtpPeriodEndBlock,proto3" json:"pmtp_period_end_block,omitempty"`
}

func (m *PmtpParams) Reset()         { *m = PmtpParams{} }
func (m *PmtpParams) String() string { return proto.CompactTextString(m) }
func (*PmtpParams) ProtoMessage()    {}
func (*PmtpParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{3}
}
func (m *PmtpParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PmtpParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PmtpParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PmtpParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PmtpParams.Merge(m, src)
}
func (m *PmtpParams) XXX_Size() int {
	return m.Size()
}
func (m *PmtpParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PmtpParams.DiscardUnknown(m)
}

var xxx_messageInfo_PmtpParams proto.InternalMessageInfo

func (m *PmtpParams) GetPmtpPeriodEpochLength() int64 {
	if m != nil {
		return m.PmtpPeriodEpochLength
	}
	return 0
}

func (m *PmtpParams) GetPmtpPeriodStartBlock() int64 {
	if m != nil {
		return m.PmtpPeriodStartBlock
	}
	return 0
}

func (m *PmtpParams) GetPmtpPeriodEndBlock() int64 {
	if m != nil {
		return m.PmtpPeriodEndBlock
	}
	return 0
}

type RewardPeriod struct {
	RewardPeriodId                string                                   `protobuf:"bytes,1,opt,name=reward_period_id,json=rewardPeriodId,proto3" json:"reward_period_id,omitempty"`
	RewardPeriodStartBlock        uint64                                   `protobuf:"varint,2,opt,name=reward_period_start_block,json=rewardPeriodStartBlock,proto3" json:"reward_period_start_block,omitempty"`
	RewardPeriodEndBlock          uint64                                   `protobuf:"varint,3,opt,name=reward_period_end_block,json=rewardPeriodEndBlock,proto3" json:"reward_period_end_block,omitempty"`
	RewardPeriodAllocation        *github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=reward_period_allocation,json=rewardPeriodAllocation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"reward_period_allocation,omitempty"`
	RewardPeriodPoolMultipliers   []*PoolMultiplier                        `protobuf:"bytes,5,rep,name=reward_period_pool_multipliers,json=rewardPeriodPoolMultipliers,proto3" json:"reward_period_pool_multipliers,omitempty"`
	RewardPeriodDefaultMultiplier *github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,6,opt,name=reward_period_default_multiplier,json=rewardPeriodDefaultMultiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_period_default_multiplier,omitempty"`
}

func (m *RewardPeriod) Reset()         { *m = RewardPeriod{} }
func (m *RewardPeriod) String() string { return proto.CompactTextString(m) }
func (*RewardPeriod) ProtoMessage()    {}
func (*RewardPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{4}
}
func (m *RewardPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPeriod.Merge(m, src)
}
func (m *RewardPeriod) XXX_Size() int {
	return m.Size()
}
func (m *RewardPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPeriod proto.InternalMessageInfo

func (m *RewardPeriod) GetRewardPeriodId() string {
	if m != nil {
		return m.RewardPeriodId
	}
	return ""
}

func (m *RewardPeriod) GetRewardPeriodStartBlock() uint64 {
	if m != nil {
		return m.RewardPeriodStartBlock
	}
	return 0
}

func (m *RewardPeriod) GetRewardPeriodEndBlock() uint64 {
	if m != nil {
		return m.RewardPeriodEndBlock
	}
	return 0
}

func (m *RewardPeriod) GetRewardPeriodPoolMultipliers() []*PoolMultiplier {
	if m != nil {
		return m.RewardPeriodPoolMultipliers
	}
	return nil
}

type PoolMultiplier struct {
	PoolMultiplierAsset string                                  `protobuf:"bytes,1,opt,name=pool_multiplier_asset,json=poolMultiplierAsset,proto3" json:"pool_multiplier_asset,omitempty"`
	Multiplier          *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=multiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multiplier,omitempty"`
}

func (m *PoolMultiplier) Reset()         { *m = PoolMultiplier{} }
func (m *PoolMultiplier) String() string { return proto.CompactTextString(m) }
func (*PoolMultiplier) ProtoMessage()    {}
func (*PoolMultiplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{5}
}
func (m *PoolMultiplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMultiplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMultiplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMultiplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMultiplier.Merge(m, src)
}
func (m *PoolMultiplier) XXX_Size() int {
	return m.Size()
}
func (m *PoolMultiplier) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMultiplier.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMultiplier proto.InternalMessageInfo

func (m *PoolMultiplier) GetPoolMultiplierAsset() string {
	if m != nil {
		return m.PoolMultiplierAsset
	}
	return ""
}

type ProviderDistributionPeriod struct {
	DistributionPeriodBlockRate  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=distribution_period_block_rate,json=distributionPeriodBlockRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"distribution_period_block_rate"`
	DistributionPeriodStartBlock int64                                  `protobuf:"varint,2,opt,name=distribution_period_start_block,json=distributionPeriodStartBlock,proto3" json:"distribution_period_start_block,omitempty"`
	DistributionPeriodEndBlock   int64                                  `protobuf:"varint,3,opt,name=distribution_period_end_block,json=distributionPeriodEndBlock,proto3" json:"distribution_period_end_block,omitempty"`
}

func (m *ProviderDistributionPeriod) Reset()         { *m = ProviderDistributionPeriod{} }
func (m *ProviderDistributionPeriod) String() string { return proto.CompactTextString(m) }
func (*ProviderDistributionPeriod) ProtoMessage()    {}
func (*ProviderDistributionPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{6}
}
func (m *ProviderDistributionPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderDistributionPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderDistributionPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderDistributionPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderDistributionPeriod.Merge(m, src)
}
func (m *ProviderDistributionPeriod) XXX_Size() int {
	return m.Size()
}
func (m *ProviderDistributionPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderDistributionPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderDistributionPeriod proto.InternalMessageInfo

func (m *ProviderDistributionPeriod) GetDistributionPeriodStartBlock() int64 {
	if m != nil {
		return m.DistributionPeriodStartBlock
	}
	return 0
}

func (m *ProviderDistributionPeriod) GetDistributionPeriodEndBlock() int64 {
	if m != nil {
		return m.DistributionPeriodEndBlock
	}
	return 0
}

type ProviderDistributionParams struct {
	DistributionPeriods []*ProviderDistributionPeriod `protobuf:"bytes,1,rep,name=distribution_periods,json=distributionPeriods,proto3" json:"distribution_periods,omitempty"`
}

func (m *ProviderDistributionParams) Reset()         { *m = ProviderDistributionParams{} }
func (m *ProviderDistributionParams) String() string { return proto.CompactTextString(m) }
func (*ProviderDistributionParams) ProtoMessage()    {}
func (*ProviderDistributionParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{7}
}
func (m *ProviderDistributionParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderDistributionParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderDistributionParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderDistributionParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderDistributionParams.Merge(m, src)
}
func (m *ProviderDistributionParams) XXX_Size() int {
	return m.Size()
}
func (m *ProviderDistributionParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderDistributionParams.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderDistributionParams proto.InternalMessageInfo

func (m *ProviderDistributionParams) GetDistributionPeriods() []*ProviderDistributionPeriod {
	if m != nil {
		return m.DistributionPeriods
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "sifnode.clp.v1.Params")
	proto.RegisterType((*RewardParams)(nil), "sifnode.clp.v1.RewardParams")
	proto.RegisterType((*PmtpRateParams)(nil), "sifnode.clp.v1.PmtpRateParams")
	proto.RegisterType((*PmtpParams)(nil), "sifnode.clp.v1.PmtpParams")
	proto.RegisterType((*RewardPeriod)(nil), "sifnode.clp.v1.RewardPeriod")
	proto.RegisterType((*PoolMultiplier)(nil), "sifnode.clp.v1.PoolMultiplier")
	proto.RegisterType((*ProviderDistributionPeriod)(nil), "sifnode.clp.v1.ProviderDistributionPeriod")
	proto.RegisterType((*ProviderDistributionParams)(nil), "sifnode.clp.v1.ProviderDistributionParams")
}

func init() { proto.RegisterFile("sifnode/clp/v1/params.proto", fileDescriptor_61de66e331088d04) }

var fileDescriptor_61de66e331088d04 = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6b, 0x1b, 0x47,
	0x14, 0xd7, 0x6a, 0x1d, 0x83, 0xa7, 0xad, 0x28, 0x6b, 0xc9, 0xd9, 0x48, 0xf6, 0x4a, 0xe8, 0xd0,
	0x8a, 0x94, 0xae, 0x70, 0x4a, 0x08, 0x3d, 0xca, 0xb2, 0x29, 0x29, 0x29, 0x88, 0x49, 0x7a, 0x29,
	0x94, 0x65, 0x35, 0x3b, 0x96, 0x06, 0xcf, 0xce, 0x6c, 0x67, 0x46, 0x6a, 0x4d, 0xbf, 0x44, 0x4e,
	0xbd, 0x14, 0xfa, 0x6d, 0x0a, 0x39, 0xe6, 0x58, 0x72, 0x30, 0xc5, 0x3e, 0xf6, 0x4b, 0x94, 0x9d,
	0x59, 0x49, 0xb3, 0x92, 0x0c, 0xb1, 0x4e, 0xfa, 0xf3, 0xde, 0xfb, 0xfd, 0xde, 0x9f, 0xdf, 0x7b,
	0x0c, 0x68, 0x49, 0x72, 0xc9, 0x78, 0x82, 0xfb, 0x88, 0x66, 0xfd, 0xf9, 0x69, 0x3f, 0x8b, 0x45,
	0x9c, 0xca, 0x30, 0x13, 0x5c, 0x71, 0xaf, 0x56, 0x18, 0x43, 0x44, 0xb3, 0x70, 0x7e, 0xda, 0xac,
	0x4f, 0xf8, 0x84, 0x6b, 0x53, 0x3f, 0xff, 0x66, 0xbc, 0xba, 0x43, 0xb0, 0x3f, 0xd2, 0x51, 0xde,
	0xb7, 0xe0, 0x49, 0x4a, 0x58, 0x84, 0x04, 0x8e, 0x15, 0x8e, 0x32, 0xce, 0x69, 0xa4, 0xa6, 0x02,
	0xcb, 0x29, 0xa7, 0x89, 0xef, 0x74, 0x9c, 0xde, 0x1e, 0x3c, 0x4a, 0x09, 0x1b, 0x6a, 0xfb, 0x88,
	0x73, 0xfa, 0x66, 0x61, 0xed, 0xfe, 0x51, 0x05, 0x9f, 0x42, 0xfc, 0x6b, 0x2c, 0x92, 0x02, 0x6b,
	0x00, 0x4e, 0x28, 0xf9, 0x65, 0x46, 0x12, 0xa2, 0xae, 0x23, 0x81, 0x53, 0x3e, 0x8f, 0x69, 0x44,
	0x39, 0xba, 0x8a, 0x32, 0x2c, 0x08, 0x5f, 0xe0, 0x35, 0x97, 0x4e, 0xd0, 0xf8, 0xbc, 0xe2, 0xe8,
	0x6a, 0xa4, 0x3d, 0xbc, 0x0b, 0xd0, 0xde, 0x84, 0x40, 0x31, 0x43, 0x98, 0x2e, 0x40, 0xaa, 0x1a,
	0xe4, 0x78, 0x1d, 0x64, 0xa8, 0x9d, 0x0a, 0x98, 0x21, 0xa8, 0x09, 0x9d, 0x59, 0x11, 0x24, 0xfd,
	0xbd, 0x8e, 0xdb, 0xfb, 0xe4, 0xd9, 0x71, 0x58, 0x6e, 0x4f, 0x58, 0xe4, 0xaf, 0x9d, 0xe0, 0x67,
	0xc2, 0xfa, 0x25, 0xbd, 0x17, 0xc0, 0x2f, 0x81, 0x44, 0x52, 0xc5, 0x42, 0x45, 0x8a, 0xa4, 0xd8,
	0x7f, 0xd4, 0x71, 0x7a, 0x07, 0xb0, 0x61, 0x07, 0xbc, 0xce, 0xad, 0x6f, 0x48, 0x8a, 0xbb, 0x7f,
	0x57, 0x41, 0x6d, 0x94, 0xaa, 0x0c, 0xe6, 0x2d, 0x33, 0xad, 0x41, 0xe0, 0x28, 0x4b, 0x55, 0xb6,
	0x40, 0x1a, 0xeb, 0xae, 0x88, 0x58, 0x61, 0x5d, 0xce, 0xc1, 0x59, 0xf8, 0xee, 0xa6, 0x5d, 0xf9,
	0x70, 0xd3, 0xfe, 0x62, 0x42, 0xd4, 0x74, 0x36, 0x0e, 0x11, 0x4f, 0xfb, 0x88, 0xcb, 0x94, 0xcb,
	0xe2, 0xe3, 0x6b, 0x99, 0x5c, 0xf5, 0xd5, 0x75, 0x86, 0x65, 0x78, 0x8e, 0x11, 0x3c, 0xcc, 0xd1,
	0x0c, 0xef, 0x59, 0x8e, 0x95, 0x53, 0x79, 0x04, 0x3c, 0xd1, 0x24, 0x68, 0x26, 0x04, 0x66, 0x2a,
	0x12, 0x33, 0xc6, 0x08, 0x9b, 0x18, 0x1e, 0x77, 0x27, 0x1e, 0x9d, 0xf5, 0xd0, 0xe0, 0x41, 0x03,
	0xa7, 0xa9, 0x16, 0xf5, 0x10, 0xa6, 0xb0, 0x88, 0x32, 0x4e, 0x09, 0xba, 0x36, 0x3c, 0x7b, 0xbb,
	0xd7, 0xf3, 0x32, 0x07, 0x1b, 0x69, 0xac, 0x9c, 0xa4, 0xfb, 0x57, 0x15, 0x80, 0xbc, 0x8f, 0x45,
	0x0f, 0x53, 0xd0, 0xb2, 0x7b, 0x38, 0xe1, 0x73, 0x2c, 0x58, 0x3e, 0x75, 0x43, 0xec, 0xec, 0x44,
	0xec, 0xaf, 0x1a, 0xf9, 0xdd, 0x12, 0x50, 0x97, 0xf8, 0x02, 0xf8, 0x36, 0x1d, 0xce, 0x38, 0x9a,
	0x46, 0x14, 0xb3, 0x89, 0x9a, 0xea, 0xa1, 0xb9, 0xb0, 0xb1, 0x8a, 0xbd, 0xc8, 0xad, 0xaf, 0xb4,
	0xd1, 0x7b, 0x0e, 0x1e, 0xdb, 0x81, 0x46, 0x35, 0x7a, 0xe2, 0x7a, 0x08, 0x2e, 0xac, 0xaf, 0xe2,
	0xb4, 0x68, 0xf4, 0x04, 0xbd, 0x53, 0xd0, 0x28, 0xf1, 0xb1, 0x42, 0x26, 0xba, 0xa3, 0x2e, 0xf4,
	0x2c, 0x32, 0x66, 0x86, 0xde, 0xfd, 0xcf, 0x5d, 0x6e, 0xa0, 0xd1, 0x7d, 0x0f, 0x7c, 0x5e, 0x96,
	0x2c, 0x31, 0x4b, 0x77, 0x00, 0x6b, 0xb6, 0x54, 0x5f, 0x26, 0xf9, 0xde, 0x6f, 0x13, 0xb7, 0x61,
	0x34, 0x2b, 0x76, 0xb4, 0xa1, 0x6e, 0x93, 0xe8, 0x73, 0xf0, 0xb8, 0x1c, 0xba, 0x4a, 0xd5, 0xd5,
	0x81, 0x75, 0x3b, 0x70, 0x91, 0xac, 0x87, 0xd7, 0xd7, 0x29, 0xa6, 0x94, 0xa3, 0x58, 0x11, 0xce,
	0x0a, 0xd1, 0x7c, 0xf5, 0xe1, 0xa6, 0xfd, 0xe5, 0x47, 0xcc, 0xed, 0x47, 0xc2, 0x54, 0x39, 0xbb,
	0xc1, 0x12, 0xca, 0x43, 0x20, 0x28, 0xd3, 0xe8, 0x9b, 0x96, 0xce, 0xa8, 0x22, 0x19, 0x25, 0x58,
	0x48, 0xff, 0x91, 0x3e, 0x05, 0xc1, 0xfa, 0x29, 0xc8, 0x8f, 0xdb, 0x0f, 0x4b, 0x37, 0xd8, 0xb2,
	0xf1, 0xcb, 0x36, 0xe9, 0x49, 0xd0, 0x29, 0x93, 0x24, 0xf8, 0x32, 0x9e, 0x51, 0x65, 0xf1, 0xf8,
	0xfb, 0xba, 0xa6, 0xa7, 0x0f, 0xd0, 0xe2, 0x89, 0x4d, 0x79, 0x6e, 0x10, 0x57, 0xac, 0xdd, 0xb7,
	0x0e, 0xa8, 0x95, 0x13, 0xf1, 0x9e, 0x81, 0xc6, 0x5a, 0x79, 0x51, 0x2c, 0x25, 0x56, 0xc5, 0xd0,
	0x0f, 0xb3, 0x92, 0xfb, 0x20, 0x37, 0x79, 0xdf, 0x03, 0x60, 0x65, 0x59, 0x7d, 0x70, 0x96, 0x56,
	0x74, 0xf7, 0xcf, 0x2a, 0x68, 0x8e, 0x04, 0x9f, 0x93, 0x04, 0x8b, 0x73, 0x22, 0x95, 0x20, 0xe3,
	0x59, 0x3e, 0x85, 0x42, 0x8e, 0x12, 0x04, 0x89, 0xf5, 0xef, 0x96, 0xeb, 0xb7, 0xdb, 0xd2, 0xb6,
	0x92, 0x0d, 0xae, 0xd5, 0x15, 0xbc, 0x00, 0xed, 0x6d, 0xa4, 0xeb, 0xfa, 0x76, 0xe1, 0xf1, 0x26,
	0x8a, 0xa5, 0xf2, 0x01, 0x38, 0xd9, 0x06, 0x53, 0xd6, 0xba, 0x0b, 0x9b, 0x9b, 0x20, 0xcb, 0xf5,
	0xfc, 0xfd, 0x9e, 0xe6, 0x98, 0x73, 0xf6, 0x33, 0xa8, 0x6f, 0x21, 0x90, 0xbe, 0xa3, 0xe5, 0xf9,
	0x74, 0x43, 0x9e, 0xf7, 0xb6, 0x19, 0x1e, 0x6e, 0xe6, 0x20, 0xcf, 0x06, 0xef, 0x6e, 0x03, 0xe7,
	0xfd, 0x6d, 0xe0, 0xfc, 0x7b, 0x1b, 0x38, 0x6f, 0xef, 0x82, 0xca, 0xfb, 0xbb, 0xa0, 0xf2, 0xcf,
	0x5d, 0x50, 0xf9, 0xc9, 0x5e, 0xb1, 0xd7, 0xe4, 0x12, 0x4d, 0x63, 0xc2, 0xfa, 0x8b, 0x37, 0xc5,
	0x6f, 0xfa, 0x55, 0xa1, 0x5b, 0x3d, 0xde, 0xd7, 0x8f, 0x85, 0x6f, 0xfe, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0x85, 0x13, 0xa7, 0xc5, 0x71, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinCreatePoolThreshold != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinCreatePoolThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPeriodStartTime) > 0 {
		i -= len(m.RewardPeriodStartTime)
		copy(dAtA[i:], m.RewardPeriodStartTime)
		i = encodeVarintParams(dAtA, i, uint64(len(m.RewardPeriodStartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RewardPeriods) > 0 {
		for iNdEx := len(m.RewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LiquidityRemovalCancelPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LiquidityRemovalCancelPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.LiquidityRemovalLockPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LiquidityRemovalLockPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PmtpRateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PmtpRateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PmtpRateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PmtpInterPolicyRate.Size()
		i -= size
		if _, err := m.PmtpInterPolicyRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.PmtpCurrentRunningRate.Size()
		i -= size
		if _, err := m.PmtpCurrentRunningRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PmtpPeriodBlockRate.Size()
		i -= size
		if _, err := m.PmtpPeriodBlockRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *PmtpParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PmtpParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PmtpParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PmtpPeriodEndBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PmtpPeriodEndBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.PmtpPeriodStartBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PmtpPeriodStartBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.PmtpPeriodEpochLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PmtpPeriodEpochLength))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.PmtpPeriodGovernanceRate.Size()
		i -= size
		if _, err := m.PmtpPeriodGovernanceRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RewardPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardPeriodDefaultMultiplier != nil {
		{
			size := m.RewardPeriodDefaultMultiplier.Size()
			i -= size
			if _, err := m.RewardPeriodDefaultMultiplier.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.RewardPeriodPoolMultipliers) > 0 {
		for iNdEx := len(m.RewardPeriodPoolMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPeriodPoolMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RewardPeriodAllocation != nil {
		{
			size := m.RewardPeriodAllocation.Size()
			i -= size
			if _, err := m.RewardPeriodAllocation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RewardPeriodEndBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RewardPeriodEndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.RewardPeriodStartBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RewardPeriodStartBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RewardPeriodId) > 0 {
		i -= len(m.RewardPeriodId)
		copy(dAtA[i:], m.RewardPeriodId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.RewardPeriodId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolMultiplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMultiplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMultiplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Multiplier != nil {
		{
			size := m.Multiplier.Size()
			i -= size
			if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolMultiplierAsset) > 0 {
		i -= len(m.PoolMultiplierAsset)
		copy(dAtA[i:], m.PoolMultiplierAsset)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PoolMultiplierAsset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProviderDistributionPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderDistributionPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderDistributionPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DistributionPeriodEndBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DistributionPeriodEndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.DistributionPeriodStartBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DistributionPeriodStartBlock))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.DistributionPeriodBlockRate.Size()
		i -= size
		if _, err := m.DistributionPeriodBlockRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProviderDistributionParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderDistributionParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderDistributionParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributionPeriods) > 0 {
		for iNdEx := len(m.DistributionPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributionPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinCreatePoolThreshold != 0 {
		n += 1 + sovParams(uint64(m.MinCreatePoolThreshold))
	}
	return n
}

func (m *RewardParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidityRemovalLockPeriod != 0 {
		n += 1 + sovParams(uint64(m.LiquidityRemovalLockPeriod))
	}
	if m.LiquidityRemovalCancelPeriod != 0 {
		n += 1 + sovParams(uint64(m.LiquidityRemovalCancelPeriod))
	}
	if len(m.RewardPeriods) > 0 {
		for _, e := range m.RewardPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = len(m.RewardPeriodStartTime)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *PmtpRateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PmtpPeriodBlockRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PmtpCurrentRunningRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PmtpInterPolicyRate.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *PmtpParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PmtpPeriodGovernanceRate.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.PmtpPeriodEpochLength != 0 {
		n += 1 + sovParams(uint64(m.PmtpPeriodEpochLength))
	}
	if m.PmtpPeriodStartBlock != 0 {
		n += 1 + sovParams(uint64(m.PmtpPeriodStartBlock))
	}
	if m.PmtpPeriodEndBlock != 0 {
		n += 1 + sovParams(uint64(m.PmtpPeriodEndBlock))
	}
	return n
}

func (m *RewardPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardPeriodId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.RewardPeriodStartBlock != 0 {
		n += 1 + sovParams(uint64(m.RewardPeriodStartBlock))
	}
	if m.RewardPeriodEndBlock != 0 {
		n += 1 + sovParams(uint64(m.RewardPeriodEndBlock))
	}
	if m.RewardPeriodAllocation != nil {
		l = m.RewardPeriodAllocation.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.RewardPeriodPoolMultipliers) > 0 {
		for _, e := range m.RewardPeriodPoolMultipliers {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.RewardPeriodDefaultMultiplier != nil {
		l = m.RewardPeriodDefaultMultiplier.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *PoolMultiplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolMultiplierAsset)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Multiplier != nil {
		l = m.Multiplier.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *ProviderDistributionPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DistributionPeriodBlockRate.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.DistributionPeriodStartBlock != 0 {
		n += 1 + sovParams(uint64(m.DistributionPeriodStartBlock))
	}
	if m.DistributionPeriodEndBlock != 0 {
		n += 1 + sovParams(uint64(m.DistributionPeriodEndBlock))
	}
	return n
}

func (m *ProviderDistributionParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DistributionPeriods) > 0 {
		for _, e := range m.DistributionPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCreatePoolThreshold", wireType)
			}
			m.MinCreatePoolThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCreatePoolThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityRemovalLockPeriod", wireType)
			}
			m.LiquidityRemovalLockPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityRemovalLockPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityRemovalCancelPeriod", wireType)
			}
			m.LiquidityRemovalCancelPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityRemovalCancelPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPeriods = append(m.RewardPeriods, &RewardPeriod{})
			if err := m.RewardPeriods[len(m.RewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPeriodStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PmtpRateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PmtpRateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PmtpRateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodBlockRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PmtpPeriodBlockRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpCurrentRunningRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PmtpCurrentRunningRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpInterPolicyRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PmtpInterPolicyRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PmtpParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PmtpParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PmtpParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodGovernanceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PmtpPeriodGovernanceRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodEpochLength", wireType)
			}
			m.PmtpPeriodEpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodEpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodStartBlock", wireType)
			}
			m.PmtpPeriodStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodEndBlock", wireType)
			}
			m.PmtpPeriodEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodEndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPeriodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodStartBlock", wireType)
			}
			m.RewardPeriodStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardPeriodStartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodEndBlock", wireType)
			}
			m.RewardPeriodEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardPeriodEndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodAllocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.RewardPeriodAllocation = &v
			if err := m.RewardPeriodAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodPoolMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPeriodPoolMultipliers = append(m.RewardPeriodPoolMultipliers, &PoolMultiplier{})
			if err := m.RewardPeriodPoolMultipliers[len(m.RewardPeriodPoolMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodDefaultMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.RewardPeriodDefaultMultiplier = &v
			if err := m.RewardPeriodDefaultMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMultiplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMultiplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMultiplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolMultiplierAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolMultiplierAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Multiplier = &v
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderDistributionPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderDistributionPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderDistributionPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionPeriodBlockRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributionPeriodBlockRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionPeriodStartBlock", wireType)
			}
			m.DistributionPeriodStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributionPeriodStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionPeriodEndBlock", wireType)
			}
			m.DistributionPeriodEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributionPeriodEndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderDistributionParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderDistributionParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderDistributionParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionPeriods = append(m.DistributionPeriods, &ProviderDistributionPeriod{})
			if err := m.DistributionPeriods[len(m.DistributionPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
