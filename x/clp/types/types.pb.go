// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/clp/v1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Asset struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{0}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type Pool struct {
	ExternalAsset                  *Asset                                  `protobuf:"bytes,1,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty"`
	NativeAssetBalance             github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=native_asset_balance,json=nativeAssetBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_asset_balance" yaml:"native_asset_balance"`
	ExternalAssetBalance           github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=external_asset_balance,json=externalAssetBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_asset_balance" yaml:"external_asset_balance"`
	PoolUnits                      github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=pool_units,json=poolUnits,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"pool_units" yaml:"pool_units"`
	SwapPriceNative                *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=swap_price_native,json=swapPriceNative,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_price_native,omitempty" yaml:"swap_price_native "`
	SwapPriceExternal              *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=swap_price_external,json=swapPriceExternal,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_price_external,omitempty" yaml:"swap_price_external "`
	RewardPeriodNativeDistributed  github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,7,opt,name=reward_period_native_distributed,json=rewardPeriodNativeDistributed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"reward_period_native_distributed" yaml:"reward_period_native_distributed"`
	ExternalLiabilities            github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,8,opt,name=external_liabilities,json=externalLiabilities,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_liabilities"`
	ExternalCustody                github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,9,opt,name=external_custody,json=externalCustody,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_custody"`
	NativeLiabilities              github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,10,opt,name=native_liabilities,json=nativeLiabilities,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_liabilities"`
	NativeCustody                  github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,11,opt,name=native_custody,json=nativeCustody,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_custody"`
	Health                         github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,12,opt,name=health,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"health"`
	InterestRate                   github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,13,opt,name=interest_rate,json=interestRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"interest_rate"`
	LastHeightInterestRateComputed int64                                   `protobuf:"varint,14,opt,name=last_height_interest_rate_computed,json=lastHeightInterestRateComputed,proto3" json:"last_height_interest_rate_computed,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

func (m *Pool) GetLastHeightInterestRateComputed() int64 {
	if m != nil {
		return m.LastHeightInterestRateComputed
	}
	return 0
}

type LiquidityProvider struct {
	Asset                    *Asset                                  `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	LiquidityProviderUnits   github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=liquidity_provider_units,json=liquidityProviderUnits,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"liquidity_provider_units" yaml:"liquidity_provider_units"`
	LiquidityProviderAddress string                                  `protobuf:"bytes,3,opt,name=liquidity_provider_address,json=liquidityProviderAddress,proto3" json:"liquidity_provider_address,omitempty"`
	Unlocks                  []*LiquidityUnlock                      `protobuf:"bytes,4,rep,name=unlocks,proto3" json:"unlocks,omitempty"`
}

func (m *LiquidityProvider) Reset()         { *m = LiquidityProvider{} }
func (m *LiquidityProvider) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvider) ProtoMessage()    {}
func (*LiquidityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{2}
}
func (m *LiquidityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvider.Merge(m, src)
}
func (m *LiquidityProvider) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvider proto.InternalMessageInfo

func (m *LiquidityProvider) GetAsset() *Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *LiquidityProvider) GetLiquidityProviderAddress() string {
	if m != nil {
		return m.LiquidityProviderAddress
	}
	return ""
}

func (m *LiquidityProvider) GetUnlocks() []*LiquidityUnlock {
	if m != nil {
		return m.Unlocks
	}
	return nil
}

type LiquidityUnlock struct {
	RequestHeight int64                                   `protobuf:"varint,1,opt,name=request_height,json=requestHeight,proto3" json:"request_height,omitempty"`
	Units         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=units,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"units"`
}

func (m *LiquidityUnlock) Reset()         { *m = LiquidityUnlock{} }
func (m *LiquidityUnlock) String() string { return proto.CompactTextString(m) }
func (*LiquidityUnlock) ProtoMessage()    {}
func (*LiquidityUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{3}
}
func (m *LiquidityUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityUnlock.Merge(m, src)
}
func (m *LiquidityUnlock) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityUnlock proto.InternalMessageInfo

func (m *LiquidityUnlock) GetRequestHeight() int64 {
	if m != nil {
		return m.RequestHeight
	}
	return 0
}

type PmtpEpoch struct {
	EpochCounter int64 `protobuf:"varint,1,opt,name=epoch_counter,json=epochCounter,proto3" json:"epoch_counter,omitempty"`
	BlockCounter int64 `protobuf:"varint,2,opt,name=block_counter,json=blockCounter,proto3" json:"block_counter,omitempty"`
}

func (m *PmtpEpoch) Reset()         { *m = PmtpEpoch{} }
func (m *PmtpEpoch) String() string { return proto.CompactTextString(m) }
func (*PmtpEpoch) ProtoMessage()    {}
func (*PmtpEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{4}
}
func (m *PmtpEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PmtpEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PmtpEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PmtpEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PmtpEpoch.Merge(m, src)
}
func (m *PmtpEpoch) XXX_Size() int {
	return m.Size()
}
func (m *PmtpEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_PmtpEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_PmtpEpoch proto.InternalMessageInfo

func (m *PmtpEpoch) GetEpochCounter() int64 {
	if m != nil {
		return m.EpochCounter
	}
	return 0
}

func (m *PmtpEpoch) GetBlockCounter() int64 {
	if m != nil {
		return m.BlockCounter
	}
	return 0
}

type WhiteList struct {
	ValidatorList []string `protobuf:"bytes,1,rep,name=validator_list,json=validatorList,proto3" json:"validator_list,omitempty"`
}

func (m *WhiteList) Reset()         { *m = WhiteList{} }
func (m *WhiteList) String() string { return proto.CompactTextString(m) }
func (*WhiteList) ProtoMessage()    {}
func (*WhiteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{5}
}
func (m *WhiteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhiteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhiteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhiteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteList.Merge(m, src)
}
func (m *WhiteList) XXX_Size() int {
	return m.Size()
}
func (m *WhiteList) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteList.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteList proto.InternalMessageInfo

func (m *WhiteList) GetValidatorList() []string {
	if m != nil {
		return m.ValidatorList
	}
	return nil
}

type LiquidityProviderData struct {
	LiquidityProvider    *LiquidityProvider `protobuf:"bytes,1,opt,name=liquidity_provider,json=liquidityProvider,proto3" json:"liquidity_provider,omitempty"`
	NativeAssetBalance   string             `protobuf:"bytes,2,opt,name=native_asset_balance,json=nativeAssetBalance,proto3" json:"native_asset_balance,omitempty"`
	ExternalAssetBalance string             `protobuf:"bytes,3,opt,name=external_asset_balance,json=externalAssetBalance,proto3" json:"external_asset_balance,omitempty"`
}

func (m *LiquidityProviderData) Reset()         { *m = LiquidityProviderData{} }
func (m *LiquidityProviderData) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderData) ProtoMessage()    {}
func (*LiquidityProviderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{6}
}
func (m *LiquidityProviderData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderData.Merge(m, src)
}
func (m *LiquidityProviderData) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderData) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderData.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderData proto.InternalMessageInfo

func (m *LiquidityProviderData) GetLiquidityProvider() *LiquidityProvider {
	if m != nil {
		return m.LiquidityProvider
	}
	return nil
}

func (m *LiquidityProviderData) GetNativeAssetBalance() string {
	if m != nil {
		return m.NativeAssetBalance
	}
	return ""
}

func (m *LiquidityProviderData) GetExternalAssetBalance() string {
	if m != nil {
		return m.ExternalAssetBalance
	}
	return ""
}

type EventPolicy struct {
	EventType            string `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	PmtpPeriodStartBlock string `protobuf:"bytes,2,opt,name=pmtp_period_start_block,json=pmtpPeriodStartBlock,proto3" json:"pmtp_period_start_block,omitempty"`
	PmtpPeriodEndBlock   string `protobuf:"bytes,3,opt,name=pmtp_period_end_block,json=pmtpPeriodEndBlock,proto3" json:"pmtp_period_end_block,omitempty"`
}

func (m *EventPolicy) Reset()         { *m = EventPolicy{} }
func (m *EventPolicy) String() string { return proto.CompactTextString(m) }
func (*EventPolicy) ProtoMessage()    {}
func (*EventPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{7}
}
func (m *EventPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPolicy.Merge(m, src)
}
func (m *EventPolicy) XXX_Size() int {
	return m.Size()
}
func (m *EventPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_EventPolicy proto.InternalMessageInfo

func (m *EventPolicy) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventPolicy) GetPmtpPeriodStartBlock() string {
	if m != nil {
		return m.PmtpPeriodStartBlock
	}
	return ""
}

func (m *EventPolicy) GetPmtpPeriodEndBlock() string {
	if m != nil {
		return m.PmtpPeriodEndBlock
	}
	return ""
}

type RemovalQueue struct {
	Count       int64                                   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Id          int64                                   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StartHeight int64                                   `protobuf:"varint,3,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	TotalValue  github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=total_value,json=totalValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"total_value"`
}

func (m *RemovalQueue) Reset()         { *m = RemovalQueue{} }
func (m *RemovalQueue) String() string { return proto.CompactTextString(m) }
func (*RemovalQueue) ProtoMessage()    {}
func (*RemovalQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09f92a67752e669, []int{8}
}
func (m *RemovalQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovalQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovalQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovalQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovalQueue.Merge(m, src)
}
func (m *RemovalQueue) XXX_Size() int {
	return m.Size()
}
func (m *RemovalQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovalQueue.DiscardUnknown(m)
}

var xxx_messageInfo_RemovalQueue proto.InternalMessageInfo

func (m *RemovalQueue) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RemovalQueue) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemovalQueue) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Asset)(nil), "sifnode.clp.v1.Asset")
	proto.RegisterType((*Pool)(nil), "sifnode.clp.v1.Pool")
	proto.RegisterType((*LiquidityProvider)(nil), "sifnode.clp.v1.LiquidityProvider")
	proto.RegisterType((*LiquidityUnlock)(nil), "sifnode.clp.v1.LiquidityUnlock")
	proto.RegisterType((*PmtpEpoch)(nil), "sifnode.clp.v1.PmtpEpoch")
	proto.RegisterType((*WhiteList)(nil), "sifnode.clp.v1.WhiteList")
	proto.RegisterType((*LiquidityProviderData)(nil), "sifnode.clp.v1.LiquidityProviderData")
	proto.RegisterType((*EventPolicy)(nil), "sifnode.clp.v1.EventPolicy")
	proto.RegisterType((*RemovalQueue)(nil), "sifnode.clp.v1.RemovalQueue")
}

func init() { proto.RegisterFile("sifnode/clp/v1/types.proto", fileDescriptor_a09f92a67752e669) }

var fileDescriptor_a09f92a67752e669 = []byte{
	// 1034 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xce, 0xc6, 0x4d, 0xfa, 0xf3, 0xeb, 0xd8, 0xf9, 0x79, 0x9a, 0x84, 0x25, 0x55, 0xec, 0x74,
	0x11, 0x34, 0x12, 0xc2, 0x26, 0x01, 0x0e, 0xa0, 0x5e, 0xf2, 0x0f, 0x28, 0x8a, 0x2a, 0xb3, 0x21,
	0x45, 0xca, 0x81, 0xd5, 0x78, 0x77, 0x1a, 0x8f, 0x3a, 0xde, 0xd9, 0xee, 0xcc, 0xba, 0xf5, 0x09,
	0x4e, 0x9c, 0x38, 0x70, 0xe2, 0x0b, 0x70, 0x42, 0xe2, 0x83, 0xe4, 0x58, 0x6e, 0xa8, 0x87, 0x08,
	0x25, 0xdf, 0xa0, 0x9f, 0x00, 0xcd, 0x9f, 0x75, 0xec, 0xd8, 0x2d, 0x71, 0x4e, 0xf6, 0xbe, 0xf3,
	0xbc, 0xcf, 0xf3, 0xcc, 0xfb, 0xbe, 0x3b, 0x3b, 0xb0, 0x2a, 0xe8, 0x93, 0x98, 0x47, 0xa4, 0x19,
	0xb2, 0xa4, 0xd9, 0xdb, 0x6c, 0xca, 0x7e, 0x42, 0x44, 0x23, 0x49, 0xb9, 0xe4, 0xa8, 0x62, 0xd7,
	0x1a, 0x21, 0x4b, 0x1a, 0xbd, 0xcd, 0xd5, 0xa5, 0x13, 0x7e, 0xc2, 0xf5, 0x52, 0x53, 0xfd, 0x33,
	0x28, 0xaf, 0x0e, 0x73, 0xdb, 0x42, 0x10, 0x89, 0x56, 0x60, 0x5e, 0xf4, 0xbb, 0x6d, 0xce, 0x5c,
	0x67, 0xdd, 0xd9, 0x28, 0xfa, 0xf6, 0xc9, 0xfb, 0xb3, 0x04, 0xb7, 0x5a, 0x9c, 0x33, 0xf4, 0x00,
	0x2a, 0xe4, 0x85, 0x24, 0x69, 0x8c, 0x59, 0x80, 0x55, 0x8a, 0x06, 0x96, 0xb6, 0x96, 0x1b, 0xa3,
	0x42, 0x0d, 0xcd, 0xe7, 0x97, 0x73, 0xb0, 0xa1, 0xff, 0xc9, 0x81, 0xa5, 0x18, 0x4b, 0xda, 0x23,
	0x26, 0x39, 0x68, 0x63, 0x86, 0xe3, 0x90, 0xb8, 0xb3, 0x4a, 0x6d, 0xe7, 0xd1, 0xe9, 0x59, 0x7d,
	0xe6, 0xd5, 0x59, 0xfd, 0xfe, 0x09, 0x95, 0x9d, 0xac, 0xdd, 0x08, 0x79, 0xb7, 0x19, 0x72, 0xd1,
	0xe5, 0xc2, 0xfe, 0x7c, 0x24, 0xa2, 0xa7, 0x76, 0x7b, 0x47, 0x34, 0x96, 0xaf, 0xcf, 0xea, 0x77,
	0xfb, 0xb8, 0xcb, 0xbe, 0xf0, 0x26, 0x91, 0x7a, 0x3e, 0x32, 0x61, 0xad, 0xbd, 0x63, 0x82, 0xe8,
	0x67, 0x07, 0x56, 0x46, 0x77, 0x30, 0x30, 0x51, 0xd0, 0x26, 0x5a, 0xd3, 0x9b, 0x58, 0x33, 0x26,
	0x26, 0xd3, 0x7a, 0xfe, 0xd2, 0x48, 0x11, 0x72, 0x23, 0x21, 0x40, 0xc2, 0x39, 0x0b, 0xb2, 0x98,
	0x4a, 0xe1, 0xde, 0xd2, 0xda, 0x7b, 0xd3, 0x6b, 0x57, 0x8d, 0xf6, 0x25, 0x95, 0xe7, 0x17, 0xd5,
	0xc3, 0x91, 0xfa, 0x8f, 0x04, 0x54, 0xc5, 0x73, 0x9c, 0x04, 0x49, 0x4a, 0x43, 0x12, 0x98, 0x72,
	0xb8, 0x73, 0x5a, 0xeb, 0xab, 0x57, 0x67, 0xf5, 0x0f, 0xae, 0xa1, 0xb3, 0x47, 0xc2, 0xd7, 0x67,
	0xf5, 0x77, 0x8d, 0xcc, 0x18, 0xd9, 0xba, 0xe7, 0x2f, 0xaa, 0x60, 0x4b, 0xc5, 0x1e, 0xe9, 0x10,
	0xea, 0xc3, 0x9d, 0x21, 0x5c, 0xbe, 0x79, 0x77, 0x5e, 0xcb, 0x3e, 0x9c, 0x4a, 0xf6, 0xee, 0x98,
	0x6c, 0x4e, 0xb7, 0xee, 0xf9, 0xd5, 0x81, 0xf0, 0xbe, 0x0d, 0xa2, 0xdf, 0x1d, 0x58, 0x4f, 0xc9,
	0x73, 0x9c, 0x46, 0x41, 0x42, 0x52, 0xca, 0x23, 0x6b, 0x33, 0x88, 0xa8, 0x90, 0x29, 0x6d, 0x67,
	0x92, 0x44, 0xee, 0x6d, 0x6d, 0xe4, 0x78, 0xfa, 0x5a, 0xdf, 0x37, 0x6e, 0xfe, 0x4b, 0xc0, 0xf3,
	0xd7, 0x0c, 0xa4, 0xa5, 0x11, 0xa6, 0x2a, 0x7b, 0x97, 0xeb, 0xa8, 0x0d, 0x83, 0x91, 0x08, 0x18,
	0xc5, 0x6d, 0xca, 0xa8, 0xa4, 0x44, 0xb8, 0xff, 0xd3, 0xc6, 0x9a, 0x53, 0x1a, 0xf3, 0xef, 0xe4,
	0x64, 0x07, 0x97, 0x5c, 0xe8, 0x18, 0xfe, 0x3f, 0xd0, 0x08, 0x33, 0x21, 0x79, 0xd4, 0x77, 0x8b,
	0x37, 0xe3, 0x5f, 0xcc, 0x89, 0x76, 0x0d, 0x0f, 0xfa, 0x01, 0xec, 0x9b, 0x35, 0xe2, 0x1e, 0x6e,
	0xc6, 0x5e, 0x35, 0x54, 0xc3, 0xde, 0x1f, 0x43, 0xc5, 0xf2, 0xe7, 0xce, 0x4b, 0x37, 0xe3, 0x2e,
	0x1b, 0x9a, 0xdc, 0xf7, 0x97, 0x30, 0xdf, 0x21, 0x98, 0xc9, 0x8e, 0xbb, 0xa0, 0xf9, 0x1a, 0x96,
	0xef, 0x9a, 0xf3, 0xe8, 0xdb, 0x6c, 0x74, 0x08, 0x65, 0x1a, 0x4b, 0x92, 0x12, 0x21, 0x83, 0x14,
	0x4b, 0xe2, 0x96, 0x6f, 0x44, 0xb7, 0x90, 0x93, 0xf8, 0x58, 0x12, 0xf4, 0x0d, 0x78, 0x0c, 0x0b,
	0x19, 0x74, 0x08, 0x3d, 0xe9, 0xc8, 0x60, 0x44, 0x20, 0x08, 0x79, 0x37, 0xd1, 0xb3, 0x5b, 0x59,
	0x77, 0x36, 0x0a, 0x7e, 0x4d, 0x21, 0xbf, 0xd6, 0xc0, 0x87, 0x43, 0x1c, 0xbb, 0x16, 0xe5, 0x9d,
	0xce, 0x42, 0xf5, 0x80, 0x3e, 0xcb, 0x68, 0x44, 0x65, 0xbf, 0x95, 0xf2, 0x1e, 0x8d, 0x48, 0x8a,
	0x3e, 0x84, 0xb9, 0x6b, 0x1c, 0xd9, 0x06, 0x83, 0x7e, 0x71, 0xc0, 0x65, 0x39, 0x45, 0x90, 0x58,
	0x0e, 0x7b, 0x5a, 0x99, 0xe3, 0xda, 0x9f, 0xfe, 0x0d, 0xaa, 0x9b, 0x37, 0xe8, 0x4d, 0xc4, 0x9e,
	0xbf, 0xc2, 0xae, 0xda, 0x36, 0x07, 0xd9, 0x03, 0x58, 0x9d, 0x90, 0x84, 0xa3, 0x28, 0x25, 0x42,
	0x98, 0x93, 0xdb, 0x77, 0xc7, 0x72, 0xb7, 0xcd, 0x3a, 0xfa, 0x1c, 0x6e, 0x67, 0x31, 0xe3, 0xe1,
	0x53, 0x75, 0xd0, 0x16, 0x36, 0x4a, 0x5b, 0xf5, 0xab, 0x7b, 0x1f, 0x54, 0xeb, 0x48, 0xe3, 0xfc,
	0x1c, 0xef, 0xfd, 0x08, 0x8b, 0x57, 0xd6, 0xd0, 0xfb, 0x50, 0x49, 0xc9, 0xb3, 0x8c, 0x0c, 0x9a,
	0xa5, 0x0b, 0x5a, 0xf0, 0xcb, 0x36, 0x6a, 0x1a, 0x83, 0xf6, 0x61, 0x6e, 0xb8, 0x5a, 0x53, 0x0f,
	0xaf, 0xc9, 0xf6, 0x8e, 0xa0, 0xd8, 0xea, 0xca, 0x64, 0x3f, 0xe1, 0x61, 0x07, 0xbd, 0x07, 0x65,
	0xa2, 0xfe, 0x04, 0x21, 0xcf, 0x54, 0xe3, 0xad, 0xf2, 0x82, 0x0e, 0xee, 0x9a, 0x98, 0x02, 0xb5,
	0x95, 0xd1, 0x01, 0x68, 0xd6, 0x80, 0x74, 0xd0, 0x82, 0xbc, 0x2d, 0x28, 0x7e, 0xdf, 0xa1, 0x92,
	0x1c, 0x50, 0x21, 0xd5, 0x8e, 0x7a, 0x98, 0xd1, 0x08, 0x4b, 0x9e, 0x06, 0x8c, 0x0a, 0xb5, 0xa3,
	0xc2, 0x46, 0xd1, 0x2f, 0x0f, 0xa2, 0x0a, 0xe6, 0xfd, 0xe5, 0xc0, 0xf2, 0xd8, 0x58, 0xed, 0x61,
	0x89, 0x51, 0x0b, 0xd0, 0x78, 0x7b, 0xec, 0x9c, 0xdd, 0x7b, 0x63, 0xad, 0x73, 0x0a, 0xbf, 0x3a,
	0xd6, 0x39, 0xf4, 0xf1, 0xdb, 0x6e, 0x0a, 0x13, 0xbf, 0xec, 0x9f, 0xbe, 0xfd, 0xc3, 0x3e, 0xf9,
	0x33, 0xec, 0xfd, 0xe6, 0x40, 0x69, 0xbf, 0x47, 0x62, 0xd9, 0xe2, 0x8c, 0x86, 0x7d, 0xb4, 0x06,
	0x40, 0xd4, 0x63, 0xa0, 0x3a, 0x61, 0x6f, 0x41, 0x45, 0x1d, 0xf9, 0xae, 0x9f, 0x10, 0xf4, 0x19,
	0xbc, 0x93, 0x74, 0x65, 0x92, 0x1f, 0xfe, 0x42, 0xe2, 0x54, 0x06, 0xba, 0xb0, 0xd6, 0xd9, 0x92,
	0x5a, 0x36, 0x07, 0xff, 0xa1, 0x5a, 0xdc, 0xd1, 0x23, 0xb3, 0x09, 0xcb, 0xc3, 0x69, 0x24, 0x8e,
	0x6c, 0x92, 0xb1, 0x86, 0x2e, 0x93, 0xf6, 0xe3, 0x48, 0xa7, 0x78, 0x7f, 0x38, 0xb0, 0xe0, 0x93,
	0x2e, 0xef, 0x61, 0xf6, 0x6d, 0x46, 0x32, 0x82, 0x96, 0x60, 0x4e, 0x37, 0xd4, 0xf6, 0xdc, 0x3c,
	0xa0, 0x0a, 0xcc, 0xd2, 0xc8, 0x76, 0x78, 0x96, 0x46, 0xe8, 0x1e, 0x2c, 0x18, 0x53, 0x76, 0x34,
	0x0b, 0x7a, 0xa5, 0xa4, 0x63, 0x76, 0x30, 0x5b, 0x50, 0x92, 0x5c, 0x62, 0x16, 0xf4, 0x30, 0xcb,
	0x88, 0xbd, 0x7a, 0x4c, 0x3d, 0x9e, 0xa0, 0x39, 0x1e, 0x2b, 0x8a, 0x9d, 0xed, 0xd3, 0xf3, 0x9a,
	0xf3, 0xf2, 0xbc, 0xe6, 0xfc, 0x73, 0x5e, 0x73, 0x7e, 0xbd, 0xa8, 0xcd, 0xbc, 0xbc, 0xa8, 0xcd,
	0xfc, 0x7d, 0x51, 0x9b, 0x39, 0x1e, 0xa6, 0x3b, 0xa4, 0x4f, 0xc2, 0x0e, 0xa6, 0x71, 0x33, 0xbf,
	0xaf, 0xbe, 0xd0, 0x37, 0x56, 0xcd, 0xd9, 0x9e, 0xd7, 0x37, 0xd1, 0x4f, 0xfe, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x1d, 0x22, 0xc3, 0xae, 0xcd, 0x0a, 0x00, 0x00,
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightInterestRateComputed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightInterestRateComputed))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.InterestRate.Size()
		i -= size
		if _, err := m.InterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.Health.Size()
		i -= size
		if _, err := m.Health.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.NativeCustody.Size()
		i -= size
		if _, err := m.NativeCustody.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.NativeLiabilities.Size()
		i -= size
		if _, err := m.NativeLiabilities.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.ExternalCustody.Size()
		i -= size
		if _, err := m.ExternalCustody.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.ExternalLiabilities.Size()
		i -= size
		if _, err := m.ExternalLiabilities.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.RewardPeriodNativeDistributed.Size()
		i -= size
		if _, err := m.RewardPeriodNativeDistributed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.SwapPriceExternal != nil {
		{
			size := m.SwapPriceExternal.Size()
			i -= size
			if _, err := m.SwapPriceExternal.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SwapPriceNative != nil {
		{
			size := m.SwapPriceNative.Size()
			i -= size
			if _, err := m.SwapPriceNative.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.PoolUnits.Size()
		i -= size
		if _, err := m.PoolUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ExternalAssetBalance.Size()
		i -= size
		if _, err := m.ExternalAssetBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.NativeAssetBalance.Size()
		i -= size
		if _, err := m.NativeAssetBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unlocks) > 0 {
		for iNdEx := len(m.Unlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LiquidityProviderAddress) > 0 {
		i -= len(m.LiquidityProviderAddress)
		copy(dAtA[i:], m.LiquidityProviderAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LiquidityProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.LiquidityProviderUnits.Size()
		i -= size
		if _, err := m.LiquidityProviderUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Units.Size()
		i -= size
		if _, err := m.Units.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RequestHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RequestHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PmtpEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PmtpEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PmtpEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockCounter != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockCounter))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochCounter != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EpochCounter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhiteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhiteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhiteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorList) > 0 {
		for iNdEx := len(m.ValidatorList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorList[iNdEx])
			copy(dAtA[i:], m.ValidatorList[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalAssetBalance) > 0 {
		i -= len(m.ExternalAssetBalance)
		copy(dAtA[i:], m.ExternalAssetBalance)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExternalAssetBalance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NativeAssetBalance) > 0 {
		i -= len(m.NativeAssetBalance)
		copy(dAtA[i:], m.NativeAssetBalance)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NativeAssetBalance)))
		i--
		dAtA[i] = 0x12
	}
	if m.LiquidityProvider != nil {
		{
			size, err := m.LiquidityProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PmtpPeriodEndBlock) > 0 {
		i -= len(m.PmtpPeriodEndBlock)
		copy(dAtA[i:], m.PmtpPeriodEndBlock)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PmtpPeriodEndBlock)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PmtpPeriodStartBlock) > 0 {
		i -= len(m.PmtpPeriodStartBlock)
		copy(dAtA[i:], m.PmtpPeriodStartBlock)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PmtpPeriodStartBlock)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemovalQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovalQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovalQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalValue.Size()
		i -= size
		if _, err := m.TotalValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.StartHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.NativeAssetBalance.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.ExternalAssetBalance.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.PoolUnits.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.SwapPriceNative != nil {
		l = m.SwapPriceNative.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SwapPriceExternal != nil {
		l = m.SwapPriceExternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.RewardPeriodNativeDistributed.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.ExternalLiabilities.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.ExternalCustody.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.NativeLiabilities.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.NativeCustody.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Health.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.InterestRate.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.LastHeightInterestRateComputed != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightInterestRateComputed))
	}
	return n
}

func (m *LiquidityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.LiquidityProviderUnits.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.LiquidityProviderAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Unlocks) > 0 {
		for _, e := range m.Unlocks {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *LiquidityUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestHeight != 0 {
		n += 1 + sovTypes(uint64(m.RequestHeight))
	}
	l = m.Units.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *PmtpEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochCounter != 0 {
		n += 1 + sovTypes(uint64(m.EpochCounter))
	}
	if m.BlockCounter != 0 {
		n += 1 + sovTypes(uint64(m.BlockCounter))
	}
	return n
}

func (m *WhiteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorList) > 0 {
		for _, s := range m.ValidatorList {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *LiquidityProviderData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidityProvider != nil {
		l = m.LiquidityProvider.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NativeAssetBalance)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExternalAssetBalance)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EventPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PmtpPeriodStartBlock)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PmtpPeriodEndBlock)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RemovalQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.StartHeight != 0 {
		n += 1 + sovTypes(uint64(m.StartHeight))
	}
	l = m.TotalValue.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeAssetBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalAssetBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapPriceNative", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.SwapPriceNative = &v
			if err := m.SwapPriceNative.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapPriceExternal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.SwapPriceExternal = &v
			if err := m.SwapPriceExternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriodNativeDistributed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPeriodNativeDistributed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalLiabilities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalLiabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalCustody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalCustody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeLiabilities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeLiabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeCustody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeCustody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Health.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightInterestRateComputed", wireType)
			}
			m.LastHeightInterestRateComputed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightInterestRateComputed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &Asset{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviderUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityProviderUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unlocks = append(m.Unlocks, &LiquidityUnlock{})
			if err := m.Unlocks[len(m.Unlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeight", wireType)
			}
			m.RequestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Units.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PmtpEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PmtpEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PmtpEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochCounter", wireType)
			}
			m.EpochCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCounter", wireType)
			}
			m.BlockCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhiteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhiteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhiteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorList = append(m.ValidatorList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidityProvider == nil {
				m.LiquidityProvider = &LiquidityProvider{}
			}
			if err := m.LiquidityProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeAssetBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAssetBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodStartBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PmtpPeriodStartBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodEndBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PmtpPeriodEndBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovalQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovalQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovalQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
