// Code generated by MockGen. DO NOT EDIT.
// Source: ../expected_keepers.go

// Package scibctransfermocks is a generated GoMock package.
package scibctransfermocks

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/ibc-go/v2/modules/apps/transfer/types"
	types1 "github.com/cosmos/ibc-go/v2/modules/core/04-channel/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSDKTransferKeeper is a mock of SDKTransferKeeper interface.
type MockSDKTransferKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockSDKTransferKeeperMockRecorder
}

// MockSDKTransferKeeperMockRecorder is the mock recorder for MockSDKTransferKeeper.
type MockSDKTransferKeeperMockRecorder struct {
	mock *MockSDKTransferKeeper
}

// NewMockSDKTransferKeeper creates a new mock instance.
func NewMockSDKTransferKeeper(ctrl *gomock.Controller) *MockSDKTransferKeeper {
	mock := &MockSDKTransferKeeper{ctrl: ctrl}
	mock.recorder = &MockSDKTransferKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKTransferKeeper) EXPECT() *MockSDKTransferKeeperMockRecorder {
	return m.recorder
}

// OnAcknowledgementPacket mocks base method.
func (m *MockSDKTransferKeeper) OnAcknowledgementPacket(ctx types.Context, packet types1.Packet, data types0.FungibleTokenPacketData, ack types1.Acknowledgement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAcknowledgementPacket", ctx, packet, data, ack)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnAcknowledgementPacket indicates an expected call of OnAcknowledgementPacket.
func (mr *MockSDKTransferKeeperMockRecorder) OnAcknowledgementPacket(ctx, packet, data, ack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAcknowledgementPacket", reflect.TypeOf((*MockSDKTransferKeeper)(nil).OnAcknowledgementPacket), ctx, packet, data, ack)
}

// OnRecvPacket mocks base method.
func (m *MockSDKTransferKeeper) OnRecvPacket(ctx types.Context, packet types1.Packet, data types0.FungibleTokenPacketData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRecvPacket", ctx, packet, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnRecvPacket indicates an expected call of OnRecvPacket.
func (mr *MockSDKTransferKeeperMockRecorder) OnRecvPacket(ctx, packet, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRecvPacket", reflect.TypeOf((*MockSDKTransferKeeper)(nil).OnRecvPacket), ctx, packet, data)
}

// OnTimeoutPacket mocks base method.
func (m *MockSDKTransferKeeper) OnTimeoutPacket(ctx types.Context, packet types1.Packet, data types0.FungibleTokenPacketData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnTimeoutPacket", ctx, packet, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnTimeoutPacket indicates an expected call of OnTimeoutPacket.
func (mr *MockSDKTransferKeeperMockRecorder) OnTimeoutPacket(ctx, packet, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTimeoutPacket", reflect.TypeOf((*MockSDKTransferKeeper)(nil).OnTimeoutPacket), ctx, packet, data)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// MintCoins mocks base method.
func (m *MockBankKeeper) MintCoins(ctx types.Context, moduleName string, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintCoins", ctx, moduleName, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MintCoins indicates an expected call of MintCoins.
func (mr *MockBankKeeperMockRecorder) MintCoins(ctx, moduleName, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintCoins", reflect.TypeOf((*MockBankKeeper)(nil).MintCoins), ctx, moduleName, amt)
}

// SendCoins mocks base method.
func (m *MockBankKeeper) SendCoins(ctx types.Context, fromAddr, toAddr types.AccAddress, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, fromAddr, toAddr, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockBankKeeperMockRecorder) SendCoins(ctx, fromAddr, toAddr, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockBankKeeper)(nil).SendCoins), ctx, fromAddr, toAddr, amt)
}

// SendCoinsFromModuleToAccount mocks base method.
func (m *MockBankKeeper) SendCoinsFromModuleToAccount(ctx types.Context, senderModule string, recipientAddr types.AccAddress, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", ctx, senderModule, recipientAddr, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromModuleToAccount(ctx, senderModule, recipientAddr, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromModuleToAccount), ctx, senderModule, recipientAddr, amt)
}

// MockMsgServer is a mock of MsgServer interface.
type MockMsgServer struct {
	ctrl     *gomock.Controller
	recorder *MockMsgServerMockRecorder
}

// MockMsgServerMockRecorder is the mock recorder for MockMsgServer.
type MockMsgServerMockRecorder struct {
	mock *MockMsgServer
}

// NewMockMsgServer creates a new mock instance.
func NewMockMsgServer(ctrl *gomock.Controller) *MockMsgServer {
	mock := &MockMsgServer{ctrl: ctrl}
	mock.recorder = &MockMsgServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgServer) EXPECT() *MockMsgServerMockRecorder {
	return m.recorder
}

// Transfer mocks base method.
func (m *MockMsgServer) Transfer(arg0 context.Context, arg1 *types0.MsgTransfer) (*types0.MsgTransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgTransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockMsgServerMockRecorder) Transfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockMsgServer)(nil).Transfer), arg0, arg1)
}
