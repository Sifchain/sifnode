// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/admin/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AdminType int32

const (
	AdminType_CLPDEX        AdminType = 0
	AdminType_PMTPREWARDS   AdminType = 1
	AdminType_TOKENREGISTRY AdminType = 2
	AdminType_ETHBRIDGE     AdminType = 3
	AdminType_ADMIN         AdminType = 4
	AdminType_MARGIN        AdminType = 5
)

var AdminType_name = map[int32]string{
	0: "CLPDEX",
	1: "PMTPREWARDS",
	2: "TOKENREGISTRY",
	3: "ETHBRIDGE",
	4: "ADMIN",
	5: "MARGIN",
}

var AdminType_value = map[string]int32{
	"CLPDEX":        0,
	"PMTPREWARDS":   1,
	"TOKENREGISTRY": 2,
	"ETHBRIDGE":     3,
	"ADMIN":         4,
	"MARGIN":        5,
}

func (x AdminType) String() string {
	return proto.EnumName(AdminType_name, int32(x))
}

func (AdminType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97192799444a7295, []int{0}
}

type GenesisState struct {
	AdminAccounts []*AdminAccount `protobuf:"bytes,1,rep,name=admin_accounts,json=adminAccounts,proto3" json:"admin_accounts,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_97192799444a7295, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetAdminAccounts() []*AdminAccount {
	if m != nil {
		return m.AdminAccounts
	}
	return nil
}

type AdminAccount struct {
	AdminType    AdminType `protobuf:"varint,1,opt,name=admin_type,json=adminType,proto3,enum=sifnode.admin.v1.AdminType" json:"admin_type,omitempty"`
	AdminAddress string    `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *AdminAccount) Reset()         { *m = AdminAccount{} }
func (m *AdminAccount) String() string { return proto.CompactTextString(m) }
func (*AdminAccount) ProtoMessage()    {}
func (*AdminAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_97192799444a7295, []int{1}
}
func (m *AdminAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminAccount.Merge(m, src)
}
func (m *AdminAccount) XXX_Size() int {
	return m.Size()
}
func (m *AdminAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminAccount.DiscardUnknown(m)
}

var xxx_messageInfo_AdminAccount proto.InternalMessageInfo

func (m *AdminAccount) GetAdminType() AdminType {
	if m != nil {
		return m.AdminType
	}
	return AdminType_CLPDEX
}

func (m *AdminAccount) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("sifnode.admin.v1.AdminType", AdminType_name, AdminType_value)
	proto.RegisterType((*GenesisState)(nil), "sifnode.admin.v1.GenesisState")
	proto.RegisterType((*AdminAccount)(nil), "sifnode.admin.v1.AdminAccount")
}

func init() { proto.RegisterFile("sifnode/admin/v1/types.proto", fileDescriptor_97192799444a7295) }

var fileDescriptor_97192799444a7295 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0xce, 0x4c, 0xcb,
	0xcb, 0x4f, 0x49, 0xd5, 0x4f, 0x4c, 0xc9, 0xcd, 0xcc, 0xd3, 0x2f, 0x33, 0xd4, 0x2f, 0xa9, 0x2c,
	0x48, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0xca, 0xea, 0x81, 0x65, 0xf5,
	0xca, 0x0c, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x92, 0xfa, 0x20, 0x16, 0x44, 0x9d, 0x52,
	0x28, 0x17, 0x8f, 0x7b, 0x6a, 0x5e, 0x6a, 0x71, 0x66, 0x71, 0x70, 0x49, 0x62, 0x49, 0xaa, 0x90,
	0x2b, 0x17, 0x1f, 0x58, 0x47, 0x7c, 0x62, 0x72, 0x72, 0x7e, 0x69, 0x5e, 0x49, 0xb1, 0x04, 0xa3,
	0x02, 0xb3, 0x06, 0xb7, 0x91, 0x9c, 0x1e, 0xba, 0x81, 0x7a, 0x8e, 0x20, 0x86, 0x23, 0x44, 0x59,
	0x10, 0x6f, 0x22, 0x12, 0xaf, 0x58, 0x29, 0x9f, 0x8b, 0x07, 0x59, 0x5a, 0xc8, 0x8a, 0x8b, 0x0b,
	0x62, 0x2c, 0xc8, 0x8d, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0xd2, 0x38, 0x8c, 0x0c, 0xa9,
	0x2c, 0x48, 0x0d, 0xe2, 0x4c, 0x84, 0x31, 0x85, 0x94, 0xb9, 0x78, 0xa1, 0x4e, 0x4a, 0x49, 0x29,
	0x4a, 0x2d, 0x2e, 0x96, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x81, 0xd8, 0x08, 0x11, 0xd3,
	0x4a, 0xe4, 0xe2, 0x84, 0x6b, 0x16, 0xe2, 0xe2, 0x62, 0x73, 0xf6, 0x09, 0x70, 0x71, 0x8d, 0x10,
	0x60, 0x10, 0xe2, 0xe7, 0xe2, 0x0e, 0xf0, 0x0d, 0x09, 0x08, 0x72, 0x0d, 0x77, 0x0c, 0x72, 0x09,
	0x16, 0x60, 0x14, 0x12, 0xe4, 0xe2, 0x0d, 0xf1, 0xf7, 0x76, 0xf5, 0x0b, 0x72, 0x75, 0xf7, 0x0c,
	0x0e, 0x09, 0x8a, 0x14, 0x60, 0x12, 0xe2, 0xe5, 0xe2, 0x74, 0x0d, 0xf1, 0x70, 0x0a, 0xf2, 0x74,
	0x71, 0x77, 0x15, 0x60, 0x16, 0xe2, 0xe4, 0x62, 0x75, 0x74, 0xf1, 0xf5, 0xf4, 0x13, 0x60, 0x01,
	0x99, 0xe4, 0xeb, 0x18, 0xe4, 0xee, 0xe9, 0x27, 0xc0, 0xea, 0xe4, 0x7c, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x9a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9,
	0xb9, 0xfa, 0xc1, 0x99, 0x69, 0xc9, 0x19, 0x89, 0x99, 0x79, 0xfa, 0xb0, 0xe8, 0xa9, 0x80, 0x46,
	0x10, 0x38, 0x76, 0x92, 0xd8, 0xc0, 0xc1, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x21,
	0x7f, 0xd8, 0xbe, 0x01, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAccounts) > 0 {
		for iNdEx := len(m.AdminAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdminAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.AdminType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AdminType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AdminAccounts) > 0 {
		for _, e := range m.AdminAccounts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AdminAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdminType != 0 {
		n += 1 + sovTypes(uint64(m.AdminType))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAccounts = append(m.AdminAccounts, &AdminAccount{})
			if err := m.AdminAccounts[len(m.AdminAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminType", wireType)
			}
			m.AdminType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminType |= AdminType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
