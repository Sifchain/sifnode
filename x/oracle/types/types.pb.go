// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/oracle/v1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StatusText is an enum used to represent the status of the prophecy
type StatusText int32

const (
	// Default value
	StatusText_STATUS_TEXT_UNSPECIFIED StatusText = 0
	// Pending status
	StatusText_STATUS_TEXT_PENDING StatusText = 1
	// Success status
	StatusText_STATUS_TEXT_SUCCESS StatusText = 2
)

var StatusText_name = map[int32]string{
	0: "STATUS_TEXT_UNSPECIFIED",
	1: "STATUS_TEXT_PENDING",
	2: "STATUS_TEXT_SUCCESS",
}

var StatusText_value = map[string]int32{
	"STATUS_TEXT_UNSPECIFIED": 0,
	"STATUS_TEXT_PENDING":     1,
	"STATUS_TEXT_SUCCESS":     2,
}

func (x StatusText) String() string {
	return proto.EnumName(StatusText_name, int32(x))
}

func (StatusText) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{0}
}

type GenesisState struct {
	NetworkConfigData []*NetworkConfigData `protobuf:"bytes,1,rep,name=network_config_data,json=networkConfigData,proto3" json:"network_config_data,omitempty"`
	AdminAddress      string               `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	Prophecies        []*Prophecy          `protobuf:"bytes,3,rep,name=prophecies,proto3" json:"prophecies,omitempty"`
	// repeated GenesisConsensusNeeded consensus_needed = 4;
	// repeated GenesisCrossChainFeeConfig cross_chain_fee = 5;
	WitnessLockBurnSequence []*GenesisWitnessLockBurnSequence `protobuf:"bytes,4,rep,name=witness_lock_burn_sequence,json=witnessLockBurnSequence,proto3" json:"witness_lock_burn_sequence,omitempty"`
	ProphecyInfo            []*GenesisProphecyInfo            `protobuf:"bytes,5,rep,name=prophecy_info,json=prophecyInfo,proto3" json:"prophecy_info,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetNetworkConfigData() []*NetworkConfigData {
	if m != nil {
		return m.NetworkConfigData
	}
	return nil
}

func (m *GenesisState) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *GenesisState) GetProphecies() []*Prophecy {
	if m != nil {
		return m.Prophecies
	}
	return nil
}

func (m *GenesisState) GetWitnessLockBurnSequence() []*GenesisWitnessLockBurnSequence {
	if m != nil {
		return m.WitnessLockBurnSequence
	}
	return nil
}

func (m *GenesisState) GetProphecyInfo() []*GenesisProphecyInfo {
	if m != nil {
		return m.ProphecyInfo
	}
	return nil
}

type ValidatorWhiteList struct {
	ValidatorPower []*ValidatorPower `protobuf:"bytes,1,rep,name=validator_power,json=validatorPower,proto3" json:"validator_power,omitempty"`
}

func (m *ValidatorWhiteList) Reset()         { *m = ValidatorWhiteList{} }
func (m *ValidatorWhiteList) String() string { return proto.CompactTextString(m) }
func (*ValidatorWhiteList) ProtoMessage()    {}
func (*ValidatorWhiteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{1}
}
func (m *ValidatorWhiteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorWhiteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorWhiteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorWhiteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorWhiteList.Merge(m, src)
}
func (m *ValidatorWhiteList) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorWhiteList) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorWhiteList.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorWhiteList proto.InternalMessageInfo

func (m *ValidatorWhiteList) GetValidatorPower() []*ValidatorPower {
	if m != nil {
		return m.ValidatorPower
	}
	return nil
}

type ValidatorPower struct {
	ValidatorAddress []byte `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	VotingPower      uint32 `protobuf:"varint,2,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *ValidatorPower) Reset()         { *m = ValidatorPower{} }
func (m *ValidatorPower) String() string { return proto.CompactTextString(m) }
func (*ValidatorPower) ProtoMessage()    {}
func (*ValidatorPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{2}
}
func (m *ValidatorPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPower.Merge(m, src)
}
func (m *ValidatorPower) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPower) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPower.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPower proto.InternalMessageInfo

func (m *ValidatorPower) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *ValidatorPower) GetVotingPower() uint32 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

type NetworkConfigData struct {
	NetworkDescriptor  NetworkDescriptor    `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty"`
	ValidatorWhitelist *ValidatorWhiteList  `protobuf:"bytes,2,opt,name=validator_whitelist,json=validatorWhitelist,proto3" json:"validator_whitelist,omitempty"`
	ConsensusNeeded    *ConsensusNeeded     `protobuf:"bytes,3,opt,name=consensus_needed,json=consensusNeeded,proto3" json:"consensus_needed,omitempty"`
	CrossChainFee      *CrossChainFeeConfig `protobuf:"bytes,4,opt,name=cross_chain_fee,json=crossChainFee,proto3" json:"cross_chain_fee,omitempty"`
}

func (m *NetworkConfigData) Reset()         { *m = NetworkConfigData{} }
func (m *NetworkConfigData) String() string { return proto.CompactTextString(m) }
func (*NetworkConfigData) ProtoMessage()    {}
func (*NetworkConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{3}
}
func (m *NetworkConfigData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkConfigData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkConfigData.Merge(m, src)
}
func (m *NetworkConfigData) XXX_Size() int {
	return m.Size()
}
func (m *NetworkConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkConfigData proto.InternalMessageInfo

func (m *NetworkConfigData) GetNetworkDescriptor() NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *NetworkConfigData) GetValidatorWhitelist() *ValidatorWhiteList {
	if m != nil {
		return m.ValidatorWhitelist
	}
	return nil
}

func (m *NetworkConfigData) GetConsensusNeeded() *ConsensusNeeded {
	if m != nil {
		return m.ConsensusNeeded
	}
	return nil
}

func (m *NetworkConfigData) GetCrossChainFee() *CrossChainFeeConfig {
	if m != nil {
		return m.CrossChainFee
	}
	return nil
}

type GenesisWitnessLockBurnSequence struct {
	WitnessLockBurnSequenceKey *LockBurnSequenceKey `protobuf:"bytes,1,opt,name=witness_lock_burn_sequence_key,json=witnessLockBurnSequenceKey,proto3" json:"witness_lock_burn_sequence_key,omitempty"`
	WitnessLockBurnSequence    *LockBurnSequence    `protobuf:"bytes,2,opt,name=witness_lock_burn_sequence,json=witnessLockBurnSequence,proto3" json:"witness_lock_burn_sequence,omitempty"`
}

func (m *GenesisWitnessLockBurnSequence) Reset()         { *m = GenesisWitnessLockBurnSequence{} }
func (m *GenesisWitnessLockBurnSequence) String() string { return proto.CompactTextString(m) }
func (*GenesisWitnessLockBurnSequence) ProtoMessage()    {}
func (*GenesisWitnessLockBurnSequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{4}
}
func (m *GenesisWitnessLockBurnSequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisWitnessLockBurnSequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisWitnessLockBurnSequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisWitnessLockBurnSequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisWitnessLockBurnSequence.Merge(m, src)
}
func (m *GenesisWitnessLockBurnSequence) XXX_Size() int {
	return m.Size()
}
func (m *GenesisWitnessLockBurnSequence) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisWitnessLockBurnSequence.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisWitnessLockBurnSequence proto.InternalMessageInfo

func (m *GenesisWitnessLockBurnSequence) GetWitnessLockBurnSequenceKey() *LockBurnSequenceKey {
	if m != nil {
		return m.WitnessLockBurnSequenceKey
	}
	return nil
}

func (m *GenesisWitnessLockBurnSequence) GetWitnessLockBurnSequence() *LockBurnSequence {
	if m != nil {
		return m.WitnessLockBurnSequence
	}
	return nil
}

type GenesisProphecyInfo struct {
	GlobalSequenceKey *GlobalSequenceKey `protobuf:"bytes,1,opt,name=global_sequence_key,json=globalSequenceKey,proto3" json:"global_sequence_key,omitempty"`
	ProphecyInfo      *ProphecyInfo      `protobuf:"bytes,2,opt,name=prophecy_info,json=prophecyInfo,proto3" json:"prophecy_info,omitempty"`
}

func (m *GenesisProphecyInfo) Reset()         { *m = GenesisProphecyInfo{} }
func (m *GenesisProphecyInfo) String() string { return proto.CompactTextString(m) }
func (*GenesisProphecyInfo) ProtoMessage()    {}
func (*GenesisProphecyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{5}
}
func (m *GenesisProphecyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisProphecyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisProphecyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisProphecyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisProphecyInfo.Merge(m, src)
}
func (m *GenesisProphecyInfo) XXX_Size() int {
	return m.Size()
}
func (m *GenesisProphecyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisProphecyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisProphecyInfo proto.InternalMessageInfo

func (m *GenesisProphecyInfo) GetGlobalSequenceKey() *GlobalSequenceKey {
	if m != nil {
		return m.GlobalSequenceKey
	}
	return nil
}

func (m *GenesisProphecyInfo) GetProphecyInfo() *ProphecyInfo {
	if m != nil {
		return m.ProphecyInfo
	}
	return nil
}

// Claim contains an arbitrary claim with arbitrary content made by a given
// validator
type Claim struct {
	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Content          string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{6}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func (m *Claim) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Claim) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *Claim) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// Prophecy is what the prophecy becomes when being saved to the database.
//  Tendermint/Amino does not support maps so we must serialize those variables
//  into bytes.
type Prophecy struct {
	Id              []byte     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status          StatusText `protobuf:"varint,2,opt,name=status,proto3,enum=sifnode.oracle.v1.StatusText" json:"status,omitempty"`
	ClaimValidators []string   `protobuf:"bytes,3,rep,name=claim_validators,json=claimValidators,proto3" json:"claim_validators,omitempty"`
}

func (m *Prophecy) Reset()         { *m = Prophecy{} }
func (m *Prophecy) String() string { return proto.CompactTextString(m) }
func (*Prophecy) ProtoMessage()    {}
func (*Prophecy) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{7}
}
func (m *Prophecy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Prophecy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Prophecy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Prophecy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prophecy.Merge(m, src)
}
func (m *Prophecy) XXX_Size() int {
	return m.Size()
}
func (m *Prophecy) XXX_DiscardUnknown() {
	xxx_messageInfo_Prophecy.DiscardUnknown(m)
}

var xxx_messageInfo_Prophecy proto.InternalMessageInfo

func (m *Prophecy) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Prophecy) GetStatus() StatusText {
	if m != nil {
		return m.Status
	}
	return StatusText_STATUS_TEXT_UNSPECIFIED
}

func (m *Prophecy) GetClaimValidators() []string {
	if m != nil {
		return m.ClaimValidators
	}
	return nil
}

// CrossChainFeeConfig is crosschain fee config for each network
type CrossChainFeeConfig struct {
	FeeCurrency              string                                 `protobuf:"bytes,1,opt,name=fee_currency,json=feeCurrency,proto3" json:"fee_currency,omitempty"`
	FeeCurrencyGas           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=fee_currency_gas,json=feeCurrencyGas,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_currency_gas" yaml:"fee_currency_gas"`
	MinimumLockCost          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=minimum_lock_cost,json=minimumLockCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_lock_cost" yaml:"minimum_lock_cost"`
	MinimumBurnCost          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=minimum_burn_cost,json=minimumBurnCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_burn_cost" yaml:"minimum_burn_cost"`
	FirstBurnDoublePeggyCost github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=first_burn_double_peggy_cost,json=firstBurnDoublePeggyCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"first_burn_double_peggy_cost" yaml:"first_burn_double_peggy_cost"`
}

func (m *CrossChainFeeConfig) Reset()         { *m = CrossChainFeeConfig{} }
func (m *CrossChainFeeConfig) String() string { return proto.CompactTextString(m) }
func (*CrossChainFeeConfig) ProtoMessage()    {}
func (*CrossChainFeeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{8}
}
func (m *CrossChainFeeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainFeeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainFeeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainFeeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainFeeConfig.Merge(m, src)
}
func (m *CrossChainFeeConfig) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainFeeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainFeeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainFeeConfig proto.InternalMessageInfo

func (m *CrossChainFeeConfig) GetFeeCurrency() string {
	if m != nil {
		return m.FeeCurrency
	}
	return ""
}

// ProphecyInfo include the ethereum addressed and signatures.
type ProphecyInfo struct {
	NetworkDescriptor    NetworkDescriptor                      `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty" yaml:"network_descriptor"`
	BlockNumber          uint64                                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ProphecyId           []byte                                 `protobuf:"bytes,3,opt,name=prophecy_id,json=prophecyId,proto3" json:"prophecy_id,omitempty"`
	CosmosSender         string                                 `protobuf:"bytes,4,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	CosmosSenderSequence uint64                                 `protobuf:"varint,5,opt,name=cosmos_sender_sequence,json=cosmosSenderSequence,proto3" json:"cosmos_sender_sequence,omitempty"`
	EthereumReceiver     string                                 `protobuf:"bytes,6,opt,name=ethereum_receiver,json=ethereumReceiver,proto3" json:"ethereum_receiver,omitempty"`
	TokenDenomHash       string                                 `protobuf:"bytes,7,opt,name=token_denom_hash,json=tokenDenomHash,proto3" json:"token_denom_hash,omitempty"`
	TokenContractAddress string                                 `protobuf:"bytes,8,opt,name=token_contract_address,json=tokenContractAddress,proto3" json:"token_contract_address,omitempty"`
	TokenAmount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_amount" yaml:"token_amount"`
	BridgeToken          bool                                   `protobuf:"varint,10,opt,name=bridge_token,json=bridgeToken,proto3" json:"bridge_token,omitempty"`
	GlobalSequence       uint64                                 `protobuf:"varint,11,opt,name=global_sequence,json=globalSequence,proto3" json:"global_sequence,omitempty"`
	CrosschainFee        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=crosschain_fee,json=crosschainFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"crosschain_fee" yaml:"crosschain_fee"`
	Decimal              uint32                                 `protobuf:"varint,13,opt,name=decimal,proto3" json:"decimal,omitempty"`
	TokenName            string                                 `protobuf:"bytes,14,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenSymbol          string                                 `protobuf:"bytes,15,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	EthereumAddress      []string                               `protobuf:"bytes,16,rep,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	Signatures           []string                               `protobuf:"bytes,17,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *ProphecyInfo) Reset()         { *m = ProphecyInfo{} }
func (m *ProphecyInfo) String() string { return proto.CompactTextString(m) }
func (*ProphecyInfo) ProtoMessage()    {}
func (*ProphecyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{9}
}
func (m *ProphecyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProphecyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProphecyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProphecyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProphecyInfo.Merge(m, src)
}
func (m *ProphecyInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProphecyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProphecyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProphecyInfo proto.InternalMessageInfo

func (m *ProphecyInfo) GetNetworkDescriptor() NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *ProphecyInfo) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *ProphecyInfo) GetProphecyId() []byte {
	if m != nil {
		return m.ProphecyId
	}
	return nil
}

func (m *ProphecyInfo) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *ProphecyInfo) GetCosmosSenderSequence() uint64 {
	if m != nil {
		return m.CosmosSenderSequence
	}
	return 0
}

func (m *ProphecyInfo) GetEthereumReceiver() string {
	if m != nil {
		return m.EthereumReceiver
	}
	return ""
}

func (m *ProphecyInfo) GetTokenDenomHash() string {
	if m != nil {
		return m.TokenDenomHash
	}
	return ""
}

func (m *ProphecyInfo) GetTokenContractAddress() string {
	if m != nil {
		return m.TokenContractAddress
	}
	return ""
}

func (m *ProphecyInfo) GetBridgeToken() bool {
	if m != nil {
		return m.BridgeToken
	}
	return false
}

func (m *ProphecyInfo) GetGlobalSequence() uint64 {
	if m != nil {
		return m.GlobalSequence
	}
	return 0
}

func (m *ProphecyInfo) GetDecimal() uint32 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *ProphecyInfo) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *ProphecyInfo) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ProphecyInfo) GetEthereumAddress() []string {
	if m != nil {
		return m.EthereumAddress
	}
	return nil
}

func (m *ProphecyInfo) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// ConsensusNeeded threshold for prophocy finalization
type ConsensusNeeded struct {
	ConsensusNeeded uint32 `protobuf:"varint,1,opt,name=consensus_needed,json=consensusNeeded,proto3" json:"consensus_needed,omitempty"`
}

func (m *ConsensusNeeded) Reset()         { *m = ConsensusNeeded{} }
func (m *ConsensusNeeded) String() string { return proto.CompactTextString(m) }
func (*ConsensusNeeded) ProtoMessage()    {}
func (*ConsensusNeeded) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{10}
}
func (m *ConsensusNeeded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusNeeded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusNeeded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusNeeded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusNeeded.Merge(m, src)
}
func (m *ConsensusNeeded) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusNeeded) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusNeeded.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusNeeded proto.InternalMessageInfo

func (m *ConsensusNeeded) GetConsensusNeeded() uint32 {
	if m != nil {
		return m.ConsensusNeeded
	}
	return 0
}

// LockBurnNonceKey the key for LockBurnNonce used in sifnode keeper
type LockBurnSequenceKey struct {
	NetworkDescriptor NetworkDescriptor `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty"`
	ValidatorAddress  []byte            `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *LockBurnSequenceKey) Reset()         { *m = LockBurnSequenceKey{} }
func (m *LockBurnSequenceKey) String() string { return proto.CompactTextString(m) }
func (*LockBurnSequenceKey) ProtoMessage()    {}
func (*LockBurnSequenceKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{11}
}
func (m *LockBurnSequenceKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockBurnSequenceKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockBurnSequenceKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockBurnSequenceKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockBurnSequenceKey.Merge(m, src)
}
func (m *LockBurnSequenceKey) XXX_Size() int {
	return m.Size()
}
func (m *LockBurnSequenceKey) XXX_DiscardUnknown() {
	xxx_messageInfo_LockBurnSequenceKey.DiscardUnknown(m)
}

var xxx_messageInfo_LockBurnSequenceKey proto.InternalMessageInfo

func (m *LockBurnSequenceKey) GetNetworkDescriptor() NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *LockBurnSequenceKey) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

// LockBurnSequence the value stored in the sifnode keeper
type LockBurnSequence struct {
	LockBurnSequence uint64 `protobuf:"varint,1,opt,name=lock_burn_sequence,json=lockBurnSequence,proto3" json:"lock_burn_sequence,omitempty"`
}

func (m *LockBurnSequence) Reset()         { *m = LockBurnSequence{} }
func (m *LockBurnSequence) String() string { return proto.CompactTextString(m) }
func (*LockBurnSequence) ProtoMessage()    {}
func (*LockBurnSequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{12}
}
func (m *LockBurnSequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockBurnSequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockBurnSequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockBurnSequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockBurnSequence.Merge(m, src)
}
func (m *LockBurnSequence) XXX_Size() int {
	return m.Size()
}
func (m *LockBurnSequence) XXX_DiscardUnknown() {
	xxx_messageInfo_LockBurnSequence.DiscardUnknown(m)
}

var xxx_messageInfo_LockBurnSequence proto.InternalMessageInfo

func (m *LockBurnSequence) GetLockBurnSequence() uint64 {
	if m != nil {
		return m.LockBurnSequence
	}
	return 0
}

// GlobalSequenceKey the key for GlobalSequence used in sifnode keeper
type GlobalSequenceKey struct {
	NetworkDescriptor NetworkDescriptor `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty"`
	GlobalSequence    uint64            `protobuf:"varint,2,opt,name=global_sequence,json=globalSequence,proto3" json:"global_sequence,omitempty"`
}

func (m *GlobalSequenceKey) Reset()         { *m = GlobalSequenceKey{} }
func (m *GlobalSequenceKey) String() string { return proto.CompactTextString(m) }
func (*GlobalSequenceKey) ProtoMessage()    {}
func (*GlobalSequenceKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{13}
}
func (m *GlobalSequenceKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSequenceKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSequenceKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSequenceKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSequenceKey.Merge(m, src)
}
func (m *GlobalSequenceKey) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSequenceKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSequenceKey.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSequenceKey proto.InternalMessageInfo

func (m *GlobalSequenceKey) GetNetworkDescriptor() NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *GlobalSequenceKey) GetGlobalSequence() uint64 {
	if m != nil {
		return m.GlobalSequence
	}
	return 0
}

// GlobalSequence the value stored in sifnode keeper
type GlobalSequence struct {
	GlobalSequence uint64 `protobuf:"varint,1,opt,name=global_sequence,json=globalSequence,proto3" json:"global_sequence,omitempty"`
}

func (m *GlobalSequence) Reset()         { *m = GlobalSequence{} }
func (m *GlobalSequence) String() string { return proto.CompactTextString(m) }
func (*GlobalSequence) ProtoMessage()    {}
func (*GlobalSequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{14}
}
func (m *GlobalSequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSequence.Merge(m, src)
}
func (m *GlobalSequence) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSequence) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSequence.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSequence proto.InternalMessageInfo

func (m *GlobalSequence) GetGlobalSequence() uint64 {
	if m != nil {
		return m.GlobalSequence
	}
	return 0
}

// BlockNumber is value stored in sifnode keeper
type BlockNumber struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *BlockNumber) Reset()         { *m = BlockNumber{} }
func (m *BlockNumber) String() string { return proto.CompactTextString(m) }
func (*BlockNumber) ProtoMessage()    {}
func (*BlockNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{15}
}
func (m *BlockNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockNumber.Merge(m, src)
}
func (m *BlockNumber) XXX_Size() int {
	return m.Size()
}
func (m *BlockNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockNumber.DiscardUnknown(m)
}

var xxx_messageInfo_BlockNumber proto.InternalMessageInfo

func (m *BlockNumber) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func init() {
	proto.RegisterEnum("sifnode.oracle.v1.StatusText", StatusText_name, StatusText_value)
	proto.RegisterType((*GenesisState)(nil), "sifnode.oracle.v1.GenesisState")
	proto.RegisterType((*ValidatorWhiteList)(nil), "sifnode.oracle.v1.ValidatorWhiteList")
	proto.RegisterType((*ValidatorPower)(nil), "sifnode.oracle.v1.ValidatorPower")
	proto.RegisterType((*NetworkConfigData)(nil), "sifnode.oracle.v1.NetworkConfigData")
	proto.RegisterType((*GenesisWitnessLockBurnSequence)(nil), "sifnode.oracle.v1.GenesisWitnessLockBurnSequence")
	proto.RegisterType((*GenesisProphecyInfo)(nil), "sifnode.oracle.v1.GenesisProphecyInfo")
	proto.RegisterType((*Claim)(nil), "sifnode.oracle.v1.Claim")
	proto.RegisterType((*Prophecy)(nil), "sifnode.oracle.v1.Prophecy")
	proto.RegisterType((*CrossChainFeeConfig)(nil), "sifnode.oracle.v1.CrossChainFeeConfig")
	proto.RegisterType((*ProphecyInfo)(nil), "sifnode.oracle.v1.ProphecyInfo")
	proto.RegisterType((*ConsensusNeeded)(nil), "sifnode.oracle.v1.ConsensusNeeded")
	proto.RegisterType((*LockBurnSequenceKey)(nil), "sifnode.oracle.v1.LockBurnSequenceKey")
	proto.RegisterType((*LockBurnSequence)(nil), "sifnode.oracle.v1.LockBurnSequence")
	proto.RegisterType((*GlobalSequenceKey)(nil), "sifnode.oracle.v1.GlobalSequenceKey")
	proto.RegisterType((*GlobalSequence)(nil), "sifnode.oracle.v1.GlobalSequence")
	proto.RegisterType((*BlockNumber)(nil), "sifnode.oracle.v1.BlockNumber")
}

func init() { proto.RegisterFile("sifnode/oracle/v1/types.proto", fileDescriptor_dac1b931484f4203) }

var fileDescriptor_dac1b931484f4203 = []byte{
	// 1405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4d, 0x73, 0x1b, 0x45,
	0x13, 0xf6, 0xfa, 0x2b, 0x71, 0x4b, 0xd6, 0xc7, 0x38, 0xef, 0xeb, 0xc5, 0xc1, 0xb2, 0xb3, 0x81,
	0x60, 0x12, 0xb0, 0x49, 0x80, 0x03, 0x1f, 0x07, 0x62, 0xc9, 0x31, 0x4a, 0x82, 0xca, 0xb5, 0x92,
	0x13, 0x0a, 0xaa, 0xd8, 0xac, 0x76, 0x47, 0xd2, 0x60, 0xed, 0x8c, 0xd8, 0x99, 0x95, 0xa3, 0x2a,
	0x6e, 0xfc, 0x01, 0x38, 0x50, 0xfc, 0x0e, 0x0e, 0xfc, 0x87, 0x1c, 0x73, 0xa4, 0x38, 0x18, 0x2a,
	0xb9, 0x73, 0xc8, 0x95, 0x0b, 0xb5, 0x33, 0xbb, 0xd2, 0x4a, 0x5a, 0xbb, 0x70, 0x41, 0x4e, 0xf6,
	0x3e, 0xfd, 0x4c, 0x77, 0xcf, 0x4c, 0xf7, 0x33, 0x2d, 0x58, 0xe7, 0xa4, 0x45, 0x99, 0x8b, 0x77,
	0x98, 0x6f, 0x3b, 0x5d, 0xbc, 0xd3, 0xbf, 0xb9, 0x23, 0x06, 0x3d, 0xcc, 0xb7, 0x7b, 0x3e, 0x13,
	0x0c, 0x15, 0x23, 0xf3, 0xb6, 0x32, 0x6f, 0xf7, 0x6f, 0xae, 0x5d, 0x6a, 0xb3, 0x36, 0x93, 0xd6,
	0x9d, 0xf0, 0x3f, 0x45, 0x5c, 0xbb, 0x3e, 0xed, 0x87, 0x62, 0x71, 0xcc, 0xfc, 0x23, 0xcb, 0xc5,
	0xdc, 0xf1, 0x49, 0x4f, 0x30, 0x5f, 0x71, 0x8d, 0xef, 0xe6, 0x20, 0xbb, 0x8f, 0x29, 0xe6, 0x84,
	0xd7, 0x85, 0x2d, 0x30, 0x6a, 0xc0, 0x4a, 0x4c, 0x76, 0x18, 0x6d, 0x91, 0xb6, 0xe5, 0xda, 0xc2,
	0xd6, 0xb5, 0xcd, 0xb9, 0xad, 0xcc, 0xad, 0xd7, 0xb6, 0xa7, 0x72, 0xd8, 0xae, 0x29, 0x76, 0x59,
	0x92, 0x2b, 0xb6, 0xb0, 0xcd, 0x22, 0x9d, 0x84, 0xd0, 0x55, 0x58, 0xb6, 0x5d, 0x8f, 0x50, 0xcb,
	0x76, 0x5d, 0x1f, 0x73, 0xae, 0xcf, 0x6e, 0x6a, 0x5b, 0x4b, 0x66, 0x56, 0x82, 0xb7, 0x15, 0x86,
	0x3e, 0x02, 0xe8, 0xf9, 0xac, 0xd7, 0xc1, 0x0e, 0xc1, 0x5c, 0x9f, 0x93, 0x11, 0x2f, 0xa7, 0x44,
	0x3c, 0x50, 0xa4, 0x81, 0x99, 0xa0, 0x23, 0x0a, 0x6b, 0xc7, 0x44, 0x50, 0xcc, 0xb9, 0xd5, 0x65,
	0xce, 0x91, 0xd5, 0x0c, 0x7c, 0x6a, 0x71, 0xfc, 0x4d, 0x80, 0xa9, 0x83, 0xf5, 0x79, 0xe9, 0xec,
	0x66, 0x8a, 0xb3, 0x68, 0xf3, 0x0f, 0xd5, 0xda, 0xfb, 0xcc, 0x39, 0xda, 0x0d, 0x7c, 0x5a, 0x8f,
	0x16, 0x9a, 0xab, 0xc7, 0xe9, 0x06, 0x74, 0x0f, 0x96, 0xa3, 0xe8, 0x03, 0x8b, 0xd0, 0x16, 0xd3,
	0x17, 0x64, 0x88, 0x6b, 0xa7, 0x87, 0x88, 0xd3, 0xae, 0xd2, 0x16, 0x33, 0xb3, 0xbd, 0xc4, 0x97,
	0xf1, 0x08, 0xd0, 0x03, 0xbb, 0x4b, 0x5c, 0x5b, 0x30, 0xff, 0x61, 0x87, 0x08, 0x7c, 0x9f, 0x70,
	0x81, 0xee, 0x42, 0xbe, 0x1f, 0xa3, 0x56, 0x8f, 0x1d, 0x63, 0x3f, 0xba, 0x86, 0x2b, 0x29, 0x41,
	0x86, 0xeb, 0x0f, 0x42, 0xa2, 0x99, 0xeb, 0x8f, 0x7d, 0x1b, 0x8f, 0x20, 0x37, 0xce, 0x40, 0x37,
	0xa0, 0x38, 0xf2, 0x1e, 0x5f, 0x8b, 0xb6, 0xa9, 0x6d, 0x65, 0xcd, 0xc2, 0xd0, 0x10, 0x5f, 0xcd,
	0x15, 0xc8, 0xf6, 0x99, 0x20, 0xb4, 0x1d, 0xe5, 0x11, 0x5e, 0xdf, 0xb2, 0x99, 0x51, 0x98, 0x8a,
	0xf0, 0xfb, 0x2c, 0x14, 0xa7, 0x6a, 0x01, 0xd5, 0x01, 0x4d, 0xd7, 0x9e, 0x0c, 0x93, 0x3b, 0xab,
	0x9a, 0x2a, 0x43, 0xee, 0xb0, 0x9a, 0x46, 0x10, 0x7a, 0x00, 0x2b, 0xa3, 0xd4, 0x8f, 0xc3, 0xf3,
	0xea, 0x12, 0x2e, 0x64, 0x52, 0x99, 0x5b, 0xaf, 0x9f, 0x75, 0x38, 0xc3, 0xc3, 0x35, 0x51, 0x7f,
	0x0c, 0x0b, 0x1d, 0xa0, 0xcf, 0xa0, 0xe0, 0x30, 0xca, 0x31, 0xe5, 0x01, 0xb7, 0x28, 0xc6, 0x2e,
	0x76, 0xf5, 0x39, 0xe9, 0xd4, 0x48, 0x71, 0x5a, 0x8e, 0xa9, 0x35, 0xc9, 0x34, 0xf3, 0xce, 0x38,
	0x80, 0x6a, 0x90, 0x77, 0x7c, 0xc6, 0xb9, 0xe5, 0x74, 0x6c, 0x42, 0xad, 0x16, 0x0e, 0xeb, 0x50,
	0x3b, 0xa5, 0x48, 0xca, 0x21, 0xb3, 0x1c, 0x12, 0xef, 0x60, 0xac, 0x0e, 0xd0, 0x5c, 0x76, 0x92,
	0xa0, 0xf1, 0xa7, 0x06, 0xa5, 0xb3, 0xcb, 0x15, 0x7d, 0x0d, 0xa5, 0xd3, 0xbb, 0xc0, 0x3a, 0xc2,
	0x03, 0x79, 0xf4, 0xe9, 0x19, 0x4c, 0x3a, 0xbb, 0x87, 0x07, 0xe6, 0xda, 0x29, 0xe5, 0x7f, 0x0f,
	0x0f, 0xd0, 0xa3, 0x33, 0x3b, 0x4e, 0x5d, 0xc6, 0xd5, 0x7f, 0x10, 0xe7, 0xd4, 0x1e, 0x33, 0x7e,
	0xd6, 0x60, 0x25, 0xa5, 0x79, 0x42, 0x8d, 0x6a, 0x77, 0x59, 0xd3, 0xee, 0xa6, 0x6d, 0x2d, 0xad,
	0xaa, 0xf6, 0x25, 0x3b, 0xb9, 0xb1, 0x62, 0x7b, 0x12, 0x42, 0x95, 0xc9, 0x8e, 0x56, 0x5b, 0xd8,
	0x38, 0x43, 0x81, 0x52, 0x5a, 0xf9, 0x2b, 0x58, 0x28, 0x77, 0x6d, 0xe2, 0xa1, 0x1c, 0xcc, 0x12,
	0x57, 0xe6, 0xb4, 0x64, 0xce, 0x12, 0x37, 0xbd, 0xdf, 0x94, 0x0c, 0x4e, 0xf7, 0x9b, 0x0e, 0x17,
	0x1c, 0x46, 0x05, 0xa6, 0x42, 0x16, 0xe0, 0x92, 0x19, 0x7f, 0x1a, 0xdf, 0xc2, 0xc5, 0x38, 0x7a,
	0x22, 0x44, 0x56, 0x86, 0x78, 0x1f, 0x16, 0xb9, 0xb0, 0x45, 0xa0, 0xfc, 0xe6, 0x6e, 0xad, 0xa7,
	0xa4, 0x5e, 0x97, 0x84, 0x06, 0x7e, 0x2c, 0xcc, 0x88, 0x8c, 0xde, 0x84, 0x82, 0x13, 0xa6, 0x6c,
	0x0d, 0xd3, 0x50, 0xea, 0xbb, 0x64, 0xe6, 0x25, 0x3e, 0xec, 0x1e, 0x6e, 0xfc, 0x32, 0x0f, 0x2b,
	0x29, 0x95, 0x1a, 0xea, 0x43, 0x0b, 0x63, 0xcb, 0x09, 0x7c, 0x1f, 0x53, 0x67, 0x10, 0x6d, 0x3b,
	0xd3, 0xc2, 0xb8, 0x1c, 0x41, 0x88, 0x43, 0x21, 0x49, 0xb1, 0xda, 0x76, 0xb4, 0xfd, 0xdd, 0xea,
	0x93, 0x93, 0x8d, 0x99, 0xdf, 0x4e, 0x36, 0xae, 0xb5, 0x89, 0xe8, 0x04, 0xcd, 0x6d, 0x87, 0x79,
	0x3b, 0x0e, 0xe3, 0x1e, 0xe3, 0xd1, 0x9f, 0xb7, 0xb9, 0x7b, 0x14, 0x3d, 0x85, 0x55, 0x2a, 0x5e,
	0x9c, 0x6c, 0xac, 0x0e, 0x6c, 0xaf, 0xfb, 0xa1, 0x31, 0xe9, 0xcf, 0x30, 0x73, 0x89, 0x88, 0xfb,
	0x36, 0x47, 0x7d, 0x28, 0x7a, 0x84, 0x12, 0x2f, 0xf0, 0x54, 0x8d, 0x3a, 0x8c, 0x47, 0x27, 0xba,
	0x7b, 0xf7, 0xdc, 0x51, 0x75, 0x15, 0x75, 0xca, 0xa1, 0x61, 0xe6, 0x23, 0x2c, 0xac, 0xe0, 0x32,
	0xe3, 0x22, 0x19, 0x57, 0xb6, 0x85, 0x8c, 0x3b, 0xff, 0xdf, 0xc4, 0x1d, 0x3a, 0x1c, 0xc5, 0x0d,
	0xbb, 0x46, 0xc6, 0xfd, 0x51, 0x83, 0x57, 0x5b, 0xc4, 0xe7, 0x42, 0xb1, 0x5c, 0x16, 0x34, 0xbb,
	0xd8, 0xea, 0xe1, 0x76, 0x7b, 0xa0, 0x72, 0x58, 0x90, 0x39, 0x1c, 0x9e, 0x3b, 0x87, 0xab, 0xd1,
	0x89, 0x9f, 0xe1, 0xdb, 0x30, 0x75, 0x69, 0x0e, 0x93, 0xa9, 0x48, 0xe3, 0x41, 0x68, 0x0b, 0xf3,
	0x32, 0xfe, 0x5a, 0x84, 0xec, 0x58, 0x0b, 0xfb, 0xff, 0xf6, 0x5d, 0xd8, 0x5d, 0x7f, 0x71, 0xb2,
	0xf1, 0x8a, 0xca, 0x6a, 0xda, 0x93, 0x91, 0xf6, 0x6c, 0x5c, 0x81, 0x6c, 0x53, 0x5e, 0x1a, 0x0d,
	0xbc, 0x66, 0xf4, 0x88, 0xcd, 0x9b, 0x19, 0x89, 0xd5, 0x24, 0x84, 0x36, 0x20, 0x33, 0xd2, 0x00,
	0x25, 0xfe, 0xd9, 0xe1, 0x98, 0x31, 0xa8, 0xba, 0xe1, 0x20, 0xa3, 0x4e, 0xc8, 0xe2, 0x98, 0xba,
	0xd8, 0x57, 0x97, 0x6a, 0x66, 0x15, 0x58, 0x97, 0x18, 0x7a, 0x0f, 0xfe, 0x3f, 0x46, 0x1a, 0xa9,
	0xe2, 0x82, 0x0c, 0x79, 0x29, 0xc9, 0x1e, 0x6a, 0xf7, 0x0d, 0x28, 0x62, 0xd1, 0xc1, 0x3e, 0x0e,
	0x3c, 0xcb, 0xc7, 0x0e, 0x26, 0x7d, 0xec, 0xeb, 0x8b, 0x4a, 0x20, 0x62, 0x83, 0x19, 0xe1, 0x68,
	0x0b, 0x0a, 0x82, 0x1d, 0x61, 0x6a, 0xb9, 0x98, 0x32, 0xcf, 0xea, 0xd8, 0xbc, 0xa3, 0x5f, 0x90,
	0xdc, 0x9c, 0xc4, 0x2b, 0x21, 0xfc, 0xa9, 0xcd, 0x3b, 0x61, 0x32, 0x8a, 0x19, 0x2a, 0x88, 0x6f,
	0x3b, 0x62, 0x28, 0x3e, 0x17, 0x25, 0xff, 0x92, 0xb4, 0x96, 0x23, 0x63, 0x2c, 0x40, 0x1d, 0xc8,
	0xaa, 0x55, 0xb6, 0xc7, 0x02, 0x2a, 0xf4, 0x25, 0x59, 0x37, 0x7b, 0xe7, 0xae, 0x9b, 0x15, 0x75,
	0x43, 0x49, 0x5f, 0x86, 0x99, 0x91, 0x9f, 0xb7, 0xe5, 0x97, 0xbc, 0x15, 0x9f, 0xb8, 0x6d, 0x6c,
	0x49, 0x54, 0x87, 0x4d, 0x6d, 0xeb, 0xa2, 0x99, 0x51, 0x58, 0x23, 0x84, 0xd0, 0x1b, 0x90, 0x9f,
	0xd0, 0x7b, 0x3d, 0x23, 0x0f, 0x32, 0x37, 0xae, 0xe2, 0x88, 0x42, 0x4e, 0x3e, 0x99, 0xa3, 0x07,
	0x37, 0x2b, 0xf3, 0xde, 0x3f, 0x77, 0xde, 0xff, 0x53, 0x79, 0x8f, 0x7b, 0x33, 0xa2, 0x17, 0xd9,
	0x89, 0xc4, 0x2f, 0x94, 0x69, 0x17, 0x3b, 0xc4, 0xb3, 0xbb, 0xfa, 0xb2, 0x9c, 0x88, 0xe2, 0x4f,
	0xb4, 0x0e, 0xa0, 0xf6, 0x4c, 0x6d, 0x0f, 0xeb, 0x39, 0x79, 0xd2, 0x4b, 0x12, 0xa9, 0xd9, 0x1e,
	0x0e, 0x37, 0xad, 0xcc, 0x7c, 0xe0, 0x35, 0x59, 0x57, 0xcf, 0x2b, 0xbd, 0x94, 0x58, 0x5d, 0x42,
	0xa1, 0x2a, 0x0f, 0xcb, 0x21, 0xbe, 0xb1, 0x82, 0x52, 0xe5, 0x18, 0x8f, 0x2f, 0xab, 0x04, 0xc0,
	0x49, 0x9b, 0xda, 0x22, 0xf0, 0x31, 0xd7, 0x8b, 0x92, 0x94, 0x40, 0x8c, 0x8f, 0x21, 0x3f, 0x31,
	0xac, 0x48, 0xcd, 0x9f, 0x1c, 0x75, 0x34, 0xb9, 0x85, 0xc9, 0x31, 0xc6, 0xf8, 0x49, 0x83, 0x95,
	0xb4, 0xf7, 0xff, 0xa5, 0x8c, 0x76, 0xa7, 0xbe, 0x92, 0x29, 0x53, 0xa9, 0xf1, 0x09, 0x14, 0xa6,
	0x26, 0xa0, 0xb7, 0x00, 0xa5, 0x4c, 0x23, 0x9a, 0x2c, 0x97, 0x42, 0x77, 0x72, 0xc2, 0xf8, 0x41,
	0x83, 0xe2, 0xd4, 0x70, 0xf0, 0x72, 0x76, 0x96, 0x52, 0xc4, 0xb3, 0x69, 0x45, 0x6c, 0x7c, 0x00,
	0xb9, 0xf1, 0x94, 0xd2, 0x96, 0x6a, 0xa9, 0x4b, 0xdf, 0x81, 0xcc, 0x6e, 0x42, 0xcd, 0x26, 0x05,
	0x4f, 0x9b, 0x12, 0xbc, 0xeb, 0x5f, 0x02, 0x8c, 0x26, 0x02, 0x74, 0x19, 0x56, 0xeb, 0x8d, 0xdb,
	0x8d, 0xc3, 0xba, 0xd5, 0xd8, 0xfb, 0xbc, 0x61, 0x1d, 0xd6, 0xea, 0x07, 0x7b, 0xe5, 0xea, 0x9d,
	0xea, 0x5e, 0xa5, 0x30, 0x83, 0x56, 0x61, 0x25, 0x69, 0x3c, 0xd8, 0xab, 0x55, 0xaa, 0xb5, 0xfd,
	0x82, 0x36, 0x69, 0xa8, 0x1f, 0x96, 0xcb, 0x7b, 0xf5, 0x7a, 0x61, 0x76, 0xb7, 0xf2, 0xe4, 0x59,
	0x49, 0x7b, 0xfa, 0xac, 0xa4, 0xfd, 0xf1, 0xac, 0xa4, 0x7d, 0xff, 0xbc, 0x34, 0xf3, 0xf4, 0x79,
	0x69, 0xe6, 0xd7, 0xe7, 0xa5, 0x99, 0x2f, 0xae, 0x27, 0x1a, 0xb1, 0x4e, 0x5a, 0xb2, 0xa1, 0x76,
	0xe2, 0x9f, 0xad, 0x8f, 0xe3, 0x1f, 0xae, 0xb2, 0x21, 0x9b, 0x8b, 0xf2, 0x97, 0xea, 0xbb, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x2e, 0x2d, 0x38, 0x1f, 0x0f, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProphecyInfo) > 0 {
		for iNdEx := len(m.ProphecyInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProphecyInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.WitnessLockBurnSequence) > 0 {
		for iNdEx := len(m.WitnessLockBurnSequence) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WitnessLockBurnSequence[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Prophecies) > 0 {
		for iNdEx := len(m.Prophecies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prophecies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkConfigData) > 0 {
		for iNdEx := len(m.NetworkConfigData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkConfigData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorWhiteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorWhiteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorWhiteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorPower) > 0 {
		for iNdEx := len(m.ValidatorPower) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorPower[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkConfigData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkConfigData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkConfigData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrossChainFee != nil {
		{
			size, err := m.CrossChainFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ConsensusNeeded != nil {
		{
			size, err := m.ConsensusNeeded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ValidatorWhitelist != nil {
		{
			size, err := m.ValidatorWhitelist.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisWitnessLockBurnSequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisWitnessLockBurnSequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisWitnessLockBurnSequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WitnessLockBurnSequence != nil {
		{
			size, err := m.WitnessLockBurnSequence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WitnessLockBurnSequenceKey != nil {
		{
			size, err := m.WitnessLockBurnSequenceKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisProphecyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisProphecyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisProphecyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProphecyInfo != nil {
		{
			size, err := m.ProphecyInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.GlobalSequenceKey != nil {
		{
			size, err := m.GlobalSequenceKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Prophecy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prophecy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Prophecy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimValidators) > 0 {
		for iNdEx := len(m.ClaimValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimValidators[iNdEx])
			copy(dAtA[i:], m.ClaimValidators[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ClaimValidators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainFeeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainFeeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainFeeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FirstBurnDoublePeggyCost.Size()
		i -= size
		if _, err := m.FirstBurnDoublePeggyCost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MinimumBurnCost.Size()
		i -= size
		if _, err := m.MinimumBurnCost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MinimumLockCost.Size()
		i -= size
		if _, err := m.MinimumLockCost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.FeeCurrencyGas.Size()
		i -= size
		if _, err := m.FeeCurrencyGas.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FeeCurrency) > 0 {
		i -= len(m.FeeCurrency)
		copy(dAtA[i:], m.FeeCurrency)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FeeCurrency)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProphecyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProphecyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProphecyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.EthereumAddress) > 0 {
		for iNdEx := len(m.EthereumAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EthereumAddress[iNdEx])
			copy(dAtA[i:], m.EthereumAddress[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.EthereumAddress[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x72
	}
	if m.Decimal != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.CrosschainFee.Size()
		i -= size
		if _, err := m.CrosschainFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.GlobalSequence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalSequence))
		i--
		dAtA[i] = 0x58
	}
	if m.BridgeToken {
		i--
		if m.BridgeToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.TokenContractAddress) > 0 {
		i -= len(m.TokenContractAddress)
		copy(dAtA[i:], m.TokenContractAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenContractAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TokenDenomHash) > 0 {
		i -= len(m.TokenDenomHash)
		copy(dAtA[i:], m.TokenDenomHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenDenomHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EthereumReceiver) > 0 {
		i -= len(m.EthereumReceiver)
		copy(dAtA[i:], m.EthereumReceiver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EthereumReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if m.CosmosSenderSequence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CosmosSenderSequence))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProphecyId) > 0 {
		i -= len(m.ProphecyId)
		copy(dAtA[i:], m.ProphecyId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProphecyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusNeeded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusNeeded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusNeeded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusNeeded != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConsensusNeeded))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockBurnSequenceKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockBurnSequenceKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockBurnSequenceKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockBurnSequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockBurnSequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockBurnSequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockBurnSequence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LockBurnSequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSequenceKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSequenceKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSequenceKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalSequence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalSequence))
		i--
		dAtA[i] = 0x10
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalSequence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalSequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NetworkConfigData) > 0 {
		for _, e := range m.NetworkConfigData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Prophecies) > 0 {
		for _, e := range m.Prophecies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WitnessLockBurnSequence) > 0 {
		for _, e := range m.WitnessLockBurnSequence {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProphecyInfo) > 0 {
		for _, e := range m.ProphecyInfo {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ValidatorWhiteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorPower) > 0 {
		for _, e := range m.ValidatorPower {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ValidatorPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VotingPower != 0 {
		n += 1 + sovTypes(uint64(m.VotingPower))
	}
	return n
}

func (m *NetworkConfigData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTypes(uint64(m.NetworkDescriptor))
	}
	if m.ValidatorWhitelist != nil {
		l = m.ValidatorWhitelist.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConsensusNeeded != nil {
		l = m.ConsensusNeeded.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CrossChainFee != nil {
		l = m.CrossChainFee.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GenesisWitnessLockBurnSequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WitnessLockBurnSequenceKey != nil {
		l = m.WitnessLockBurnSequenceKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WitnessLockBurnSequence != nil {
		l = m.WitnessLockBurnSequence.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GenesisProphecyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalSequenceKey != nil {
		l = m.GlobalSequenceKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProphecyInfo != nil {
		l = m.ProphecyInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Prophecy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if len(m.ClaimValidators) > 0 {
		for _, s := range m.ClaimValidators {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CrossChainFeeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeCurrency)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.FeeCurrencyGas.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MinimumLockCost.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MinimumBurnCost.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.FirstBurnDoublePeggyCost.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *ProphecyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTypes(uint64(m.NetworkDescriptor))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTypes(uint64(m.BlockNumber))
	}
	l = len(m.ProphecyId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CosmosSenderSequence != 0 {
		n += 1 + sovTypes(uint64(m.CosmosSenderSequence))
	}
	l = len(m.EthereumReceiver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TokenDenomHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TokenContractAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.BridgeToken {
		n += 2
	}
	if m.GlobalSequence != 0 {
		n += 1 + sovTypes(uint64(m.GlobalSequence))
	}
	l = m.CrosschainFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Decimal != 0 {
		n += 1 + sovTypes(uint64(m.Decimal))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.EthereumAddress) > 0 {
		for _, s := range m.EthereumAddress {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ConsensusNeeded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsensusNeeded != 0 {
		n += 1 + sovTypes(uint64(m.ConsensusNeeded))
	}
	return n
}

func (m *LockBurnSequenceKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTypes(uint64(m.NetworkDescriptor))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LockBurnSequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockBurnSequence != 0 {
		n += 1 + sovTypes(uint64(m.LockBurnSequence))
	}
	return n
}

func (m *GlobalSequenceKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTypes(uint64(m.NetworkDescriptor))
	}
	if m.GlobalSequence != 0 {
		n += 1 + sovTypes(uint64(m.GlobalSequence))
	}
	return n
}

func (m *GlobalSequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalSequence != 0 {
		n += 1 + sovTypes(uint64(m.GlobalSequence))
	}
	return n
}

func (m *BlockNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNumber != 0 {
		n += 1 + sovTypes(uint64(m.BlockNumber))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConfigData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkConfigData = append(m.NetworkConfigData, &NetworkConfigData{})
			if err := m.NetworkConfigData[len(m.NetworkConfigData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prophecies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prophecies = append(m.Prophecies, &Prophecy{})
			if err := m.Prophecies[len(m.Prophecies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessLockBurnSequence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WitnessLockBurnSequence = append(m.WitnessLockBurnSequence, &GenesisWitnessLockBurnSequence{})
			if err := m.WitnessLockBurnSequence[len(m.WitnessLockBurnSequence)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProphecyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProphecyInfo = append(m.ProphecyInfo, &GenesisProphecyInfo{})
			if err := m.ProphecyInfo[len(m.ProphecyInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorWhiteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorWhiteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorWhiteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPower = append(m.ValidatorPower, &ValidatorPower{})
			if err := m.ValidatorPower[len(m.ValidatorPower)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = append(m.ValidatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddress == nil {
				m.ValidatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkConfigData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkConfigData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkConfigData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorWhitelist == nil {
				m.ValidatorWhitelist = &ValidatorWhiteList{}
			}
			if err := m.ValidatorWhitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusNeeded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusNeeded == nil {
				m.ConsensusNeeded = &ConsensusNeeded{}
			}
			if err := m.ConsensusNeeded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrossChainFee == nil {
				m.CrossChainFee = &CrossChainFeeConfig{}
			}
			if err := m.CrossChainFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisWitnessLockBurnSequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisWitnessLockBurnSequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisWitnessLockBurnSequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessLockBurnSequenceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessLockBurnSequenceKey == nil {
				m.WitnessLockBurnSequenceKey = &LockBurnSequenceKey{}
			}
			if err := m.WitnessLockBurnSequenceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessLockBurnSequence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessLockBurnSequence == nil {
				m.WitnessLockBurnSequence = &LockBurnSequence{}
			}
			if err := m.WitnessLockBurnSequence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisProphecyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisProphecyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisProphecyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalSequenceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalSequenceKey == nil {
				m.GlobalSequenceKey = &GlobalSequenceKey{}
			}
			if err := m.GlobalSequenceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProphecyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProphecyInfo == nil {
				m.ProphecyInfo = &ProphecyInfo{}
			}
			if err := m.ProphecyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Prophecy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prophecy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prophecy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StatusText(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimValidators = append(m.ClaimValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainFeeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainFeeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainFeeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCurrencyGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCurrencyGas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumLockCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumLockCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBurnCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumBurnCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBurnDoublePeggyCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FirstBurnDoublePeggyCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProphecyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProphecyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProphecyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProphecyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProphecyId = append(m.ProphecyId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProphecyId == nil {
				m.ProphecyId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSenderSequence", wireType)
			}
			m.CosmosSenderSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CosmosSenderSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenomHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenomHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeToken = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalSequence", wireType)
			}
			m.GlobalSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumAddress = append(m.EthereumAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusNeeded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusNeeded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusNeeded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusNeeded", wireType)
			}
			m.ConsensusNeeded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusNeeded |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockBurnSequenceKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockBurnSequenceKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockBurnSequenceKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = append(m.ValidatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddress == nil {
				m.ValidatorAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockBurnSequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockBurnSequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockBurnSequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockBurnSequence", wireType)
			}
			m.LockBurnSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockBurnSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSequenceKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSequenceKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSequenceKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalSequence", wireType)
			}
			m.GlobalSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalSequence", wireType)
			}
			m.GlobalSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
