// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/oracle/v1/network_descriptor.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NetworkDescriptor is a unique identifier for all chains that Sifchain
// enables. Numbers MUST BE BETWEEN 0-9999, Sifnode WILL PANIC if a number
// is below 0 or larger then 9999 as we use human readable denoms.
type NetworkDescriptor int32

const (
	// Not currently in use
	NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED NetworkDescriptor = 0
	// https://ethereum.org
	NetworkDescriptor_NETWORK_DESCRIPTOR_ETHEREUM NetworkDescriptor = 1
	// Bitcoin mainnet
	NetworkDescriptor_NETWORK_DESCRIPTOR_BITCOIN NetworkDescriptor = 2
	// https://github.com/ethereum/ropsten
	NetworkDescriptor_NETWORK_DESCRIPTOR_ETHEREUM_TESTNET_ROPSTEN NetworkDescriptor = 3
	// https://www.binance.org
	NetworkDescriptor_NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN NetworkDescriptor = 56
	// https://testnet.binance.org/
	NetworkDescriptor_NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN_TESTNET NetworkDescriptor = 97
	// Ganache local testnet
	NetworkDescriptor_NETWORK_DESCRIPTOR_GANACHE NetworkDescriptor = 5777
	// Hardhat local testnet
	NetworkDescriptor_NETWORK_DESCRIPTOR_HARDHAT NetworkDescriptor = 9999
)

var NetworkDescriptor_name = map[int32]string{
	0:    "NETWORK_DESCRIPTOR_UNSPECIFIED",
	1:    "NETWORK_DESCRIPTOR_ETHEREUM",
	2:    "NETWORK_DESCRIPTOR_BITCOIN",
	3:    "NETWORK_DESCRIPTOR_ETHEREUM_TESTNET_ROPSTEN",
	56:   "NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN",
	97:   "NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN_TESTNET",
	5777: "NETWORK_DESCRIPTOR_GANACHE",
	9999: "NETWORK_DESCRIPTOR_HARDHAT",
}

var NetworkDescriptor_value = map[string]int32{
	"NETWORK_DESCRIPTOR_UNSPECIFIED":                 0,
	"NETWORK_DESCRIPTOR_ETHEREUM":                    1,
	"NETWORK_DESCRIPTOR_BITCOIN":                     2,
	"NETWORK_DESCRIPTOR_ETHEREUM_TESTNET_ROPSTEN":    3,
	"NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN":         56,
	"NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN_TESTNET": 97,
	"NETWORK_DESCRIPTOR_GANACHE":                     5777,
	"NETWORK_DESCRIPTOR_HARDHAT":                     9999,
}

func (x NetworkDescriptor) String() string {
	return proto.EnumName(NetworkDescriptor_name, int32(x))
}

func (NetworkDescriptor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_721e8ae3af4d5f0a, []int{0}
}

type NetworkIdentity struct {
	NetworkDescriptor NetworkDescriptor `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty"`
}

func (m *NetworkIdentity) Reset()         { *m = NetworkIdentity{} }
func (m *NetworkIdentity) String() string { return proto.CompactTextString(m) }
func (*NetworkIdentity) ProtoMessage()    {}
func (*NetworkIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_721e8ae3af4d5f0a, []int{0}
}
func (m *NetworkIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkIdentity.Merge(m, src)
}
func (m *NetworkIdentity) XXX_Size() int {
	return m.Size()
}
func (m *NetworkIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkIdentity proto.InternalMessageInfo

func (m *NetworkIdentity) GetNetworkDescriptor() NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("sifnode.oracle.v1.NetworkDescriptor", NetworkDescriptor_name, NetworkDescriptor_value)
	proto.RegisterType((*NetworkIdentity)(nil), "sifnode.oracle.v1.NetworkIdentity")
}

func init() {
	proto.RegisterFile("sifnode/oracle/v1/network_descriptor.proto", fileDescriptor_721e8ae3af4d5f0a)
}

var fileDescriptor_721e8ae3af4d5f0a = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd2, 0x4f, 0x4b, 0xf3, 0x30,
	0x1c, 0xc0, 0xf1, 0x76, 0x0f, 0x3c, 0x87, 0x1c, 0x9e, 0x27, 0x0b, 0x1e, 0x64, 0x42, 0x26, 0x43,
	0x44, 0x2a, 0xb6, 0x6c, 0x5e, 0xbc, 0x76, 0x6d, 0xb4, 0x45, 0x96, 0x8e, 0x34, 0x43, 0xf0, 0x12,
	0xb6, 0xae, 0xdb, 0x8a, 0xda, 0x8c, 0x2e, 0x4e, 0xf7, 0x2a, 0xd4, 0x77, 0x25, 0x78, 0xd9, 0xd1,
	0xa3, 0x6c, 0x6f, 0x44, 0xdc, 0x1f, 0x0f, 0xae, 0x8a, 0xb7, 0x90, 0x7c, 0xf2, 0x4d, 0x0e, 0x3f,
	0x60, 0x8c, 0x92, 0x5e, 0x2a, 0xbb, 0xb1, 0x25, 0xb3, 0x76, 0x74, 0x1d, 0x5b, 0xe3, 0xaa, 0x95,
	0xc6, 0xea, 0x4e, 0x66, 0x57, 0xa2, 0x1b, 0x8f, 0xa2, 0x2c, 0x19, 0x2a, 0x99, 0x99, 0xc3, 0x4c,
	0x2a, 0x89, 0x8a, 0x2b, 0x6b, 0x2e, 0xad, 0x39, 0xae, 0x96, 0xb6, 0xfa, 0xb2, 0x2f, 0x17, 0xa7,
	0xd6, 0xc7, 0x6a, 0x09, 0x2b, 0x3d, 0xf0, 0x9f, 0x2e, 0x23, 0x7e, 0x37, 0x4e, 0x55, 0xa2, 0x26,
	0x28, 0x04, 0x68, 0xb3, 0xbb, 0xad, 0xef, 0xea, 0x07, 0xff, 0x6a, 0x7b, 0xe6, 0x46, 0xd8, 0x5c,
	0xdd, 0x77, 0x3f, 0x2d, 0x2b, 0xa6, 0x5f, 0xb7, 0x8c, 0x97, 0x02, 0x28, 0x6e, 0x40, 0x54, 0x01,
	0x98, 0x12, 0x7e, 0x11, 0xb0, 0x73, 0xe1, 0x92, 0xd0, 0x61, 0x7e, 0x93, 0x07, 0x4c, 0xb4, 0x68,
	0xd8, 0x24, 0x8e, 0x7f, 0xea, 0x13, 0x17, 0x6a, 0xa8, 0x0c, 0x76, 0x72, 0x0c, 0xe1, 0x1e, 0x61,
	0xa4, 0xd5, 0x80, 0x3a, 0xc2, 0xa0, 0x94, 0x03, 0xea, 0x3e, 0x77, 0x02, 0x9f, 0xc2, 0x02, 0xb2,
	0xc0, 0xe1, 0x0f, 0x01, 0xc1, 0x49, 0xc8, 0x29, 0xe1, 0x82, 0x05, 0xcd, 0x90, 0x13, 0x0a, 0xff,
	0x20, 0x03, 0xec, 0xe7, 0x06, 0xa9, 0x4d, 0x1d, 0x22, 0xc2, 0x86, 0xcd, 0xb8, 0x70, 0x3c, 0xdb,
	0xa7, 0xf0, 0x04, 0xd5, 0x80, 0xf9, 0x3b, 0xbb, 0x7e, 0x07, 0xb6, 0x51, 0x39, 0xf7, 0xc3, 0x67,
	0x36, 0xb5, 0x1d, 0x8f, 0xc0, 0xa7, 0xa3, 0x6f, 0x80, 0x67, 0x33, 0xd7, 0xb3, 0x39, 0x7c, 0xa0,
	0x75, 0xf7, 0x79, 0x86, 0xf5, 0xe9, 0x0c, 0xeb, 0x6f, 0x33, 0xac, 0x3f, 0xce, 0xb1, 0x36, 0x9d,
	0x63, 0xed, 0x75, 0x8e, 0xb5, 0x4b, 0xa3, 0x9f, 0xa8, 0xc1, 0x6d, 0xc7, 0x8c, 0xe4, 0x8d, 0x15,
	0x26, 0xbd, 0x68, 0xd0, 0x4e, 0x52, 0x6b, 0x3d, 0x38, 0xf7, 0xeb, 0xd1, 0x51, 0x93, 0x61, 0x3c,
	0xea, 0xfc, 0x5d, 0x8c, 0xc0, 0xf1, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x0d, 0xe7, 0x31,
	0x59, 0x02, 0x00, 0x00,
}

func (m *NetworkIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		i = encodeVarintNetworkDescriptor(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetworkDescriptor(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetworkDescriptor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovNetworkDescriptor(uint64(m.NetworkDescriptor))
	}
	return n
}

func sovNetworkDescriptor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetworkDescriptor(x uint64) (n int) {
	return sovNetworkDescriptor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkDescriptor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkDescriptor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkDescriptor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkDescriptor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetworkDescriptor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetworkDescriptor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetworkDescriptor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetworkDescriptor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkDescriptor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetworkDescriptor = fmt.Errorf("proto: unexpected end of group")
)
