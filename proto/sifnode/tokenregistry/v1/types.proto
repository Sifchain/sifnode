syntax = "proto3";
package sifnode.tokenregistry.v1;
import "gogoproto/gogo.proto";

option go_package = "github.com/Sifchain/sifnode/x/tokenregistry/types";

message GenesisState {
  Registry registry = 2;
}

message Registry { repeated RegistryEntry entries = 1; }

enum Permission {
  UNSPECIFIED = 0;
  CLP = 1;
  IBCEXPORT = 2;
  IBCIMPORT = 3;
  DISABLE_BUY = 4;
  DISABLE_SELL = 5;
}

message RegistryEntry {
  reserved 1;
  int64 decimals = 2;
  string denom = 3;
  string base_denom = 4;
  string path = 5;
  string ibc_channel_id = 6;
  string ibc_counterparty_channel_id = 7;
  string display_name = 8;
  string display_symbol = 9;
  string network = 10;
  string address = 11;
  string external_symbol = 12;
  string transfer_limit = 13;
  repeated Permission permissions = 15;
  // The name of denomination unit of this token that is the smallest unit
  // stored. IBC imports of this RegistryEntry convert and store funds as
  // unit_denom. Several different denom units of a token may be imported into
  // this same unit denom, they should all be stored under the same unit_denom
  // if they are the same token. When exporting a RegistryEntry where unit_denom
  // != denom, then unit_denom can, in future, be used to indicate the source of
  // funds for a denom unit that does not actually exist on chain, enabling
  // other chains to overcome the uint64 limit on the packet level and import
  // large amounts of high precision tokens easily. ie. microrowan -> rowan i.e
  // rowan -> rowan
  string unit_denom = 16;
  // The name of denomination unit of this token that should appear on
  // counterparty chain when this unit is exported. If empty, the denom is
  // exported as is. Generally this will only be used to map a high precision
  // (unit_denom) to a lower precision, to overcome the current uint64 limit on
  // the packet level. i.e rowan -> microrowan i.e microrowan -> microrowan
  string ibc_counterparty_denom = 17;
  string ibc_counterparty_chain_id = 18;
}