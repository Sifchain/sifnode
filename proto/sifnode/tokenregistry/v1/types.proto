syntax = "proto3";
package sifnode.tokenregistry.v1;
import "gogoproto/gogo.proto";
import "sifnode/oracle/v1/network_descriptor.proto";

option go_package = "github.com/Sifchain/sifnode/x/tokenregistry/types";

message GenesisState {
  string admin_account = 1;
  Registry registry = 2;
}

message Registry { repeated RegistryEntry entries = 1; }

// Permission
enum Permission {
  UNSPECIFIED = 0;
  CLP = 1;
  IBCEXPORT = 2;
  IBCIMPORT = 3;
}

message RegistryEntry {
  int64 decimals = 1;
  string denom = 2;
  string base_denom = 3;
  string path = 4;
  string ibc_channel_id = 5;
  string ibc_counterparty_channel_id = 6;
  string display_name = 7;
  string display_symbol = 8;
  sifnode.oracle.v1.NetworkDescriptor network = 9;
  string address = 10;
  string external_symbol = 11;
  string transfer_limit = 12;
  repeated Permission permissions = 13;
  // The name of denomination unit of this token that is the smallest unit
  // stored. IBC imports of this RegistryEntry convert and store funds as
  // unit_denom. Several different denom units of a token may be imported into
  // this same unit denom, they should all be stored under the same unit_denom
  // if they are the same token. When exporting a RegistryEntry where unit_denom
  // != denom, then unit_denom can, in future, be used to indicate the source of
  // funds for a denom unit that does not actually exist on chain, enabling
  // other chains to overcome the uint64 limit on the packet level and import
  // large amounts of high precision tokens easily. ie. microrowan -> rowan i.e
  // rowan -> rowan
  string unit_denom = 14;
  // The name of denomination unit of this token that should appear on
  // counterparty chain when this unit is exported. If empty, the denom is
  // exported as is. Generally this will only be used to map a high precision
  // (unit_denom) to a lower precision, to overcome the current uint64 limit on
  // the packet level. i.e rowan -> microrowan i.e microrowan -> microrowan
  string ibc_counterparty_denom = 15;
  string ibc_counterparty_chain_id = 16;
  map<uint32, bool> double_pegged_network_map = 17;
}

// Coin Metadata Modlue structure for storing
// new tokens and fetching queries
message TokenMetadata {
  int64 decimals = 1 [ (gogoproto.moretags) = "yaml:\"token_decimals\"" ];
  string name = 2 [ (gogoproto.moretags) = "yaml:\"token_name\"" ];
  string symbol = 3 [ (gogoproto.moretags) = "yaml:\"token_symbol\"" ];
  string token_address = 4 [ (gogoproto.moretags) = "yaml:\"token_address\"" ];
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 5
      [ (gogoproto.moretags) = "yaml:\"network\"" ];
}