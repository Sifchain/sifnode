syntax = "proto3";
package sifnode.oracle.v1;

import "gogoproto/gogo.proto";
import "sifnode/oracle/v1/network_descriptor.proto";

option go_package = "github.com/Sifchain/sifnode/x/oracle/types";

message GenesisState {
  repeated NetworkConfigData network_config_data = 1;
  string admin_address = 2;
  repeated Prophecy prophecies = 3;
  repeated GenesisWitnessLockBurnSequence witness_lock_burn_sequence = 4;
  repeated GenesisProphecyInfo prophecy_info = 5;
}

message ValidatorWhiteList { 
  repeated ValidatorPower validator_power = 1;
}

message ValidatorPower { 
  bytes validator_address = 1;
  uint32 voting_power = 2;
}

message NetworkConfigData {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1;
  ValidatorWhiteList validator_whitelist = 2;
  ConsensusNeeded consensus_needed = 3;
  CrossChainFeeConfig cross_chain_fee = 4;
}

message GenesisWitnessLockBurnSequence {
  LockBurnSequenceKey witness_lock_burn_sequence_key = 1;
  LockBurnSequence witness_lock_burn_sequence = 2;
}

message GenesisProphecyInfo {
  GlobalSequenceKey global_sequence_key = 1;
  ProphecyInfo prophecy_info = 2;
}

// Claim contains an arbitrary claim with arbitrary content made by a given
// validator
message Claim {
  string id = 1;
  string validator_address = 2;
  string content = 3;
}

// Prophecy is what the prophecy becomes when being saved to the database.
//  Tendermint/Amino does not support maps so we must serialize those variables
//  into bytes.
message Prophecy {
  bytes id = 1;
  StatusText status = 2;
  repeated string claim_validators = 3;
}

// StatusText is an enum used to represent the status of the prophecy
enum StatusText {
  // Default value
  STATUS_TEXT_UNSPECIFIED = 0;
  // Pending status
  STATUS_TEXT_PENDING = 1;
  // Success status
  STATUS_TEXT_SUCCESS = 2;
}

// CrossChainFeeConfig is crosschain fee config for each network
message CrossChainFeeConfig {
  string fee_currency = 1;
  string fee_currency_gas = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee_currency_gas\""
  ];
  string minimum_lock_cost = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"minimum_lock_cost\""
  ];
  string minimum_burn_cost = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"minimum_burn_cost\""
  ];
  string first_burn_double_peggy_cost = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"first_burn_double_peggy_cost\""
  ];
}

// ProphecyInfo include the ethereum addressed and signatures.
message ProphecyInfo {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  uint64 block_number = 2;
  bytes prophecy_id = 3;
  string cosmos_sender = 4;
  uint64 cosmos_sender_sequence = 5;
  string ethereum_receiver = 6;
  string token_denom_hash = 7;
  string token_contract_address = 8;
  string token_amount = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"token_amount\""
  ];
  bool bridge_token = 10;
  uint64 global_sequence = 11;
  string crosschain_fee = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"crosschain_fee\""
  ];
  uint32 decimals = 13;
  string token_name = 14;
  string token_symbol = 15;
  repeated string ethereum_address = 16;
  repeated string signatures = 17;
}

// ConsensusNeeded threshold for prophocy finalization
message ConsensusNeeded { uint32 consensus_needed = 1; }

// LockBurnNonceKey the key for LockBurnNonce used in sifnode keeper
message LockBurnSequenceKey {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1;
  bytes validator_address = 2;
}

// LockBurnSequence the value stored in the sifnode keeper
message LockBurnSequence { uint64 lock_burn_sequence = 1; }

// GlobalSequenceKey the key for GlobalSequence used in sifnode keeper
message GlobalSequenceKey {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1;
  uint64 global_sequence = 2;
}

// GlobalSequence the value stored in sifnode keeper
message GlobalSequence { uint64 global_sequence = 1; }

// BlockNumber is value stored in sifnode keeper
message BlockNumber { uint64 block_number = 1; }
