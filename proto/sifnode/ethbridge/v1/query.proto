syntax = "proto3";
package sifnode.ethbridge.v1;

import "gogoproto/gogo.proto";
import "sifnode/ethbridge/v1/types.proto";
import "sifnode/oracle/v1/types.proto";
import "sifnode/oracle/v1/network_descriptor.proto";

option go_package = "github.com/Sifchain/sifnode/x/ethbridge/types";

// Query service for queries
service Query {
  // EthProphecy queries an EthProphecy
  rpc EthProphecy(QueryEthProphecyRequest) returns (QueryEthProphecyResponse) {}
  rpc GetBlacklist(QueryBlacklistRequest) returns (QueryBlacklistResponse) {}
  // CrosschainFeeConfig queries crosschain fee config for a network
  rpc CrosschainFeeConfig(QueryCrosschainFeeConfigRequest)
      returns (QueryCrosschainFeeConfigResponse) {}
  // EthereumLockBurnSequence query ethereum lock burn sequence for a relayer in
  // a network
  rpc EthereumLockBurnSequence(QueryEthereumLockBurnSequenceRequest)
      returns (QueryEthereumLockBurnSequenceResponse) {}
  // WitnessLockBurnSequence query witness lock burn sequence for a relayer in a
  // network
  rpc WitnessLockBurnSequence(QueryWitnessLockBurnSequenceRequest)
      returns (QueryWitnessLockBurnSequenceResponse) {}
  // GlobalSequenceBlockNumber query block number for a global sequence
  rpc GlobalSequenceBlockNumber(QueryGlobalSequenceBlockNumberRequest)
      returns (QueryGlobalSequenceBlockNumberResponse) {}
  // Prophecies Completed Query Service to fetch prophecy info from global
  // sequence
  rpc PropheciesCompleted(QueryPropheciesCompletedRequest)
      returns (QueryPropheciesCompletedResponse) {}
}

// QueryEthProphecyRequest payload for EthProphecy rpc query
message QueryEthProphecyRequest { bytes prophecy_id = 7; }

// QueryEthProphecyResponse payload for EthProphecy rpc query
message QueryEthProphecyResponse {
  bytes prophecy_id = 1;
  sifnode.oracle.v1.StatusText status = 2;
  repeated string claim_validators = 4;
}

// QueryCrosschainFeeConfigRequest payload for EthProphecy rpc query
message QueryCrosschainFeeConfigRequest {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1;
}

// QueryCrosschainFeeConfigResponse payload for EthProphecy rpc query
message QueryCrosschainFeeConfigResponse {
  sifnode.oracle.v1.CrossChainFeeConfig crosschain_fee_config = 1;
}

// QueryPropheciesCompletedRequest payload for
// PropheciesCompletedQueryRequest rpc query
message QueryPropheciesCompletedRequest {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1;
  uint64 global_sequence = 2;
}

// QueryPropheciesCompletedResponse payload for
// PropheciesCompletedQueryResponse rpc query response
message QueryPropheciesCompletedResponse {
  repeated sifnode.oracle.v1.ProphecyInfo prophecy_info = 1;
}

// QueryEthereumLockBurnSequenceRequest payload for EthereumLockBurnSequence rpc
// query
message QueryEthereumLockBurnSequenceRequest {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1;
  string relayer_val_address = 2;
}

// QueryEthereumLockBurnSequenceResponse return EthereumLockBurnSequence
message QueryEthereumLockBurnSequenceResponse {
  uint64 ethereum_lock_burn_sequence = 1;
}

// QueryWitnessLockBurnSequenceRequest payload for WitnessLockBurnSequence rpc
// query
message QueryWitnessLockBurnSequenceRequest {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1;
  string relayer_val_address = 2;
}

// QueryWitnessLockBurnSequenceResponse return WitnessLockBurnSequence
message QueryWitnessLockBurnSequenceResponse {
  uint64 witness_lock_burn_sequence = 1;
}

// QueryGlobalSequenceBlockNumberRequest payload for GlobalsequenceBlockNumber
// rpc query
message QueryGlobalSequenceBlockNumberRequest {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1;
  uint64 global_sequence = 2;
}

// QueryGlobalSequenceBlockNumberResponse return GlobalsequenceBlockNumber
message QueryGlobalSequenceBlockNumberResponse { uint64 block_number = 1; }

message QueryBlacklistRequest {}

message QueryBlacklistResponse { repeated string addresses = 1; }