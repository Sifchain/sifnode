syntax = "proto3";
package sifnode.ethbridge.v1;

import "gogoproto/gogo.proto";
import "sifnode/ethbridge/v1/types.proto";
import "sifnode/oracle/v1/network_descriptor.proto";

option go_package = "github.com/Sifchain/sifnode/x/ethbridge/types";

// Msg service for messages
service Msg {
  rpc Lock(MsgLock) returns (MsgLockResponse);
  rpc Burn(MsgBurn) returns (MsgBurnResponse);
  rpc CreateEthBridgeClaim(MsgCreateEthBridgeClaim)
      returns (MsgCreateEthBridgeClaimResponse);
  rpc UpdateWhiteListValidator(MsgUpdateWhiteListValidator)
      returns (MsgUpdateWhiteListValidatorResponse);
  rpc SignProphecy(MsgSignProphecy) returns (MsgSignProphecyResponse);
  rpc UpdateCrossChainFeeReceiverAccount(MsgUpdateCrossChainFeeReceiverAccount)
      returns (MsgUpdateCrossChainFeeReceiverAccountResponse);
  rpc RescueCrossChainFee(MsgRescueCrossChainFee)
      returns (MsgRescueCrossChainFeeResponse);
  rpc SetFeeInfo(MsgSetFeeInfo) returns (MsgSetFeeInfoResponse);
  rpc UpdateConsensusNeeded(MsgUpdateConsensusNeeded)
      returns (MsgUpdateConsensusNeededResponse);
  rpc SetBlacklist(MsgSetBlacklist) returns (MsgSetBlacklistResponse);
}

// MsgLock defines a message for locking coins and triggering a related event
message MsgLock {
  string cosmos_sender = 1;
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount\""
  ];
  string denom_hash = 3 [ (gogoproto.moretags) = "yaml:\"denom_hash\"" ];
  reserved 4;
  string ethereum_receiver = 5
      [ (gogoproto.moretags) = "yaml:\"ethereum_receiver\"" ];
  string crosschain_fee = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"crosschain_fee\""
  ];
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 7
  [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
}

message MsgLockResponse {}

// MsgBurn defines a message for burning coins and triggering a related event
message MsgBurn {
  string cosmos_sender = 1 [ (gogoproto.moretags) = "yaml:\"cosmos_sender\"" ];
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount\""
  ];
  string denom_hash = 3 [ (gogoproto.moretags) = "yaml:\"denom_hash\"" ];
  reserved 4;
  string ethereum_receiver = 5
      [ (gogoproto.moretags) = "yaml:\"ethereum_receiver\"" ];
  string crosschain_fee = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"crosschain_fee\""
  ];
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 7
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
}

message MsgBurnResponse {}

message MsgCreateEthBridgeClaim {
  EthBridgeClaim eth_bridge_claim = 1
      [ (gogoproto.moretags) = "yaml:\"eth_bridge_claim\"" ];
}

message MsgCreateEthBridgeClaimResponse {}

// MsgUpdateWhiteListValidator add or remove validator from whitelist
message MsgUpdateWhiteListValidator {
  string cosmos_sender = 1 [ (gogoproto.moretags) = "yaml:\"cosmos_sender\"" ];
  string validator = 2 [ (gogoproto.moretags) = "yaml:\"validator\"" ];
  reserved 3;
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 4
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  uint32 power = 5;
}

message MsgUpdateWhiteListValidatorResponse {}

message MsgUpdateCrossChainFeeReceiverAccount {
  string cosmos_sender = 1;
  string crosschain_fee_receiver = 2;
}

message MsgUpdateCrossChainFeeReceiverAccountResponse {}

message MsgRescueCrossChainFee {
  string cosmos_sender = 1;
  string cosmos_receiver = 2;
  string crosschain_fee_symbol = 3;
  string crosschain_fee = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgSetBlacklist {
  string from = 1;
  repeated string addresses = 2;
}

message MsgSetBlacklistResponse {}

message MsgRescueCrossChainFeeResponse {}

message MsgSetFeeInfo {
  string cosmos_sender = 1;
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 2
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  string fee_currency = 3;
  string fee_currency_gas = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee_currency_gas\""
  ];
  string minimum_lock_cost = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"minimum_lock_cost\""
  ];
  string minimum_burn_cost = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"minimum_burn_cost\""
  ];
  string first_burn_double_peggy_cost = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"first_burn_double_peggy_cost\""
  ];
}

message MsgSetFeeInfoResponse {}

// MsgSignProphecy defines a message for sending signature for prophecy
message MsgSignProphecy {
  string cosmos_sender = 1;
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 2
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  bytes prophecy_id = 3;
  string ethereum_address = 4;
  string signature = 5;
}

message MsgSignProphecyResponse {}

message MsgUpdateConsensusNeeded {
  string cosmos_sender = 1;
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 2
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  uint32 consensus_needed = 3;
}

message MsgUpdateConsensusNeededResponse {}