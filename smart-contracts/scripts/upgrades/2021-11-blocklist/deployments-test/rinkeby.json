{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xaD52082956B331EF8A6DcFA2445999B25227745E",
    "txHash": "0x5403f98cc3bbac5c9f6a4b2c28b9b5127c52d0fc07838cbd19522e2703ee9d9a"
  },
  "proxies": [
    {
      "address": "0x84A096672AA417e1afF2bAA9994247FF73347E55",
      "txHash": "0x98278847ca9867639a988212a321af8d3ec09efee56b126d69cc165cf526a592",
      "kind": "transparent"
    },
    {
      "address": "0x5CAf4CB0693AD0e8f354A30D01CC20F9496988D4",
      "txHash": "0x68d8584b2d29f613e448bd1fac156f99c22306f10b5f76e24b7e8097998cdc75",
      "kind": "transparent"
    }
  ],
  "impls": {
    "b69e7d9731e0fb2f3d6eb796a4f8bfc9f50523008869bd83860c2172ebffe282": {
      "address": "0x82381FB8A12C787e79d70A7858cc92cC3D0987C5",
      "txHash": "0x931cab0c9d1773a20e847daef85199762fa1dcd62b236b99e3c247f62ef3be06",
      "layout": {
        "storage": [
          {
            "contract": "CosmosBridgeStorage",
            "label": "COSMOS_NATIVE_ASSET_PREFIX",
            "type": "t_string_storage",
            "src": "../project:/contracts/CosmosBridgeStorage.sol:10"
          },
          {
            "contract": "CosmosBridgeStorage",
            "label": "operator",
            "type": "t_address",
            "src": "../project:/contracts/CosmosBridgeStorage.sol:15"
          },
          {
            "contract": "CosmosBridgeStorage",
            "label": "valset",
            "type": "t_address_payable",
            "src": "../project:/contracts/CosmosBridgeStorage.sol:20"
          },
          {
            "contract": "CosmosBridgeStorage",
            "label": "oracle",
            "type": "t_address_payable",
            "src": "../project:/contracts/CosmosBridgeStorage.sol:25"
          },
          {
            "contract": "CosmosBridgeStorage",
            "label": "bridgeBank",
            "type": "t_address_payable",
            "src": "../project:/contracts/CosmosBridgeStorage.sol:30"
          },
          {
            "contract": "CosmosBridgeStorage",
            "label": "hasBridgeBank",
            "type": "t_bool",
            "src": "../project:/contracts/CosmosBridgeStorage.sol:35"
          },
          {
            "contract": "CosmosBridgeStorage",
            "label": "prophecyClaims",
            "type": "t_mapping(t_uint256,t_struct(ProphecyClaim)3376_storage)",
            "src": "../project:/contracts/CosmosBridgeStorage.sol:40"
          },
          {
            "contract": "CosmosBridgeStorage",
            "label": "____gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/CosmosBridgeStorage.sol:64"
          },
          {
            "contract": "OracleStorage",
            "label": "cosmosBridge",
            "type": "t_address",
            "src": "../project:/contracts/OracleStorage.sol:7"
          },
          {
            "contract": "OracleStorage",
            "label": "operator",
            "type": "t_address",
            "src": "../project:/contracts/OracleStorage.sol:12"
          },
          {
            "contract": "OracleStorage",
            "label": "consensusThreshold",
            "type": "t_uint256",
            "src": "../project:/contracts/OracleStorage.sol:17"
          },
          {
            "contract": "OracleStorage",
            "label": "oracleClaimValidators",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/OracleStorage.sol:22"
          },
          {
            "contract": "OracleStorage",
            "label": "hasMadeClaim",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "src": "../project:/contracts/OracleStorage.sol:27"
          },
          {
            "contract": "OracleStorage",
            "label": "____gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/OracleStorage.sol:32"
          },
          {
            "contract": "ValsetStorage",
            "label": "totalPower",
            "type": "t_uint256",
            "src": "../project:/contracts/ValsetStorage.sol:8"
          },
          {
            "contract": "ValsetStorage",
            "label": "currentValsetVersion",
            "type": "t_uint256",
            "src": "../project:/contracts/ValsetStorage.sol:13"
          },
          {
            "contract": "ValsetStorage",
            "label": "validatorCount",
            "type": "t_uint256",
            "src": "../project:/contracts/ValsetStorage.sol:18"
          },
          {
            "contract": "ValsetStorage",
            "label": "validators",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/contracts/ValsetStorage.sol:23"
          },
          {
            "contract": "ValsetStorage",
            "label": "operator",
            "type": "t_address",
            "src": "../project:/contracts/ValsetStorage.sol:28"
          },
          {
            "contract": "ValsetStorage",
            "label": "powers",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../project:/contracts/ValsetStorage.sol:33"
          },
          {
            "contract": "ValsetStorage",
            "label": "____gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/ValsetStorage.sol:38"
          },
          {
            "contract": "Valset",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../project:/contracts/Valset.sol:9"
          },
          {
            "contract": "Oracle",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../project:/contracts/Oracle.sol:12"
          },
          {
            "contract": "CosmosBridge",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../project:/contracts/CosmosBridge.sol:13"
          },
          {
            "contract": "CosmosBridge",
            "label": "___gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/CosmosBridge.sol:14"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_mapping(t_uint256,t_struct(ProphecyClaim)3376_storage)": {
            "label": "mapping(uint256 => struct CosmosBridgeStorage.ProphecyClaim)"
          },
          "t_struct(ProphecyClaim)3376_storage": {
            "label": "struct CosmosBridgeStorage.ProphecyClaim",
            "members": [
              {
                "label": "ethereumReceiver",
                "type": "t_address_payable"
              },
              {
                "label": "symbol",
                "type": "t_string_storage"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          }
        }
      }
    },
    "ec8eff706c672de8bcc76cc6a189ceb017f5173d36f121ddb89b9070e6177c11": {
      "address": "0x01b4b99307D51ea93c0f4a39C3de38464E998b2C",
      "txHash": "0x7c252021227691a7269fc8278598db63a9ba51f15d91558a89ac476ee5883c1a",
      "layout": {
        "storage": [
          {
            "contract": "CosmosBankStorage",
            "label": "bridgeTokenCount",
            "type": "t_uint256",
            "src": "../project:/contracts/BridgeBank/CosmosBankStorage.sol:19"
          },
          {
            "contract": "CosmosBankStorage",
            "label": "cosmosDepositNonce",
            "type": "t_uint256",
            "src": "../project:/contracts/BridgeBank/CosmosBankStorage.sol:24"
          },
          {
            "contract": "CosmosBankStorage",
            "label": "controlledBridgeTokens",
            "type": "t_mapping(t_string_memory,t_address)",
            "src": "../project:/contracts/BridgeBank/CosmosBankStorage.sol:29"
          },
          {
            "contract": "CosmosBankStorage",
            "label": "lowerToUpperTokens",
            "type": "t_mapping(t_string_memory,t_string_storage)",
            "src": "../project:/contracts/BridgeBank/CosmosBankStorage.sol:34"
          },
          {
            "contract": "CosmosBankStorage",
            "label": "____gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/BridgeBank/CosmosBankStorage.sol:39"
          },
          {
            "contract": "EthereumBankStorage",
            "label": "lockBurnNonce",
            "type": "t_uint256",
            "src": "../project:/contracts/BridgeBank/EthereumBankStorage.sol:8"
          },
          {
            "contract": "EthereumBankStorage",
            "label": "lockedFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/BridgeBank/EthereumBankStorage.sol:13"
          },
          {
            "contract": "EthereumBankStorage",
            "label": "lockedTokenList",
            "type": "t_mapping(t_string_memory,t_address)",
            "src": "../project:/contracts/BridgeBank/EthereumBankStorage.sol:18"
          },
          {
            "contract": "EthereumBankStorage",
            "label": "____gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/BridgeBank/EthereumBankStorage.sol:23"
          },
          {
            "contract": "CosmosWhiteListStorage",
            "label": "_cosmosTokenWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/BridgeBank/CosmosWhiteListStorage.sol:8"
          },
          {
            "contract": "CosmosWhiteListStorage",
            "label": "____gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/BridgeBank/CosmosWhiteListStorage.sol:13"
          },
          {
            "contract": "BankStorage",
            "label": "operator",
            "type": "t_address",
            "src": "../project:/contracts/BridgeBank/BankStorage.sol:15"
          },
          {
            "contract": "BankStorage",
            "label": "oracle",
            "type": "t_address",
            "src": "../project:/contracts/BridgeBank/BankStorage.sol:20"
          },
          {
            "contract": "BankStorage",
            "label": "cosmosBridge",
            "type": "t_address",
            "src": "../project:/contracts/BridgeBank/BankStorage.sol:25"
          },
          {
            "contract": "BankStorage",
            "label": "owner",
            "type": "t_address",
            "src": "../project:/contracts/BridgeBank/BankStorage.sol:30"
          },
          {
            "contract": "BankStorage",
            "label": "maxTokenAmount",
            "type": "t_mapping(t_string_memory,t_uint256)",
            "src": "../project:/contracts/BridgeBank/BankStorage.sol:32"
          },
          {
            "contract": "BankStorage",
            "label": "____gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/BridgeBank/BankStorage.sol:37"
          },
          {
            "contract": "EthereumWhiteList",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../project:/contracts/BridgeBank/EthereumWhitelist.sol:9"
          },
          {
            "contract": "EthereumWhiteList",
            "label": "_ethereumTokenWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/BridgeBank/EthereumWhitelist.sol:14"
          },
          {
            "contract": "EthereumWhiteList",
            "label": "____gap",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/BridgeBank/EthereumWhitelist.sol:19"
          },
          {
            "contract": "CosmosWhiteList",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../project:/contracts/BridgeBank/CosmosWhiteList.sol:11"
          },
          {
            "contract": "PauserRole",
            "label": "pausers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/BridgeBank/PauserRole.sol:5"
          },
          {
            "contract": "Pausable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../project:/contracts/BridgeBank/Pausable.sol:25"
          },
          {
            "contract": "BridgeBank",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../project:/contracts/BridgeBank/BridgeBank.sol:29"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_string_memory,t_uint256)": {
            "label": "mapping(string => uint256)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_string_memory,t_address)": {
            "label": "mapping(string => address)"
          },
          "t_mapping(t_string_memory,t_string_storage)": {
            "label": "mapping(string => string)"
          }
        }
      }
    }
  }
}
